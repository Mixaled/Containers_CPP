
#include <gtest/gtest.h>
#include <stdexcept>
#include "../s21_containers.h"
    
TEST(ListTest, Create0) {
  s21::list<int> lst({726, 338, 186, 593, 567, 587, 940, 805, 747, 671, 105, 0, 735});
  EXPECT_EQ(lst.size(), 13);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create1) {
  s21::list<int> lst({446, 267, 725, 121, 591, 910, 977, 257, 469, 96, 42, 294, 162, 190, 439, 424, 389, 168, 728, 399, 70, 726, 106, 501, 942, 985, 95, 813, 453, 97, 246, 390, 871, 677, 905, 129, 277, 684, 117, 733, 287, 668, 733, 481, 858, 92, 820, 109, 808, 910, 474, 692, 114, 149, 505, 965, 804, 474, 530, 789, 57, 251, 291, 867, 510, 641, 492, 358, 435, 415, 71, 385, 551, 452, 779, 410, 952, 121, 429, 602, 810, 13, 320});
  EXPECT_EQ(lst.size(), 83);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create2) {
  s21::list<int> lst({848, 671, 936, 120, 498, 874, 985, 222, 930, 353, 419, 344});
  EXPECT_EQ(lst.size(), 12);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create3) {
  s21::list<int> lst({775, 517, 245, 792, 711, 362, 715, 797, 423, 210, 872, 595, 62, 708, 910, 435, 755, 503, 387, 765, 38, 106, 37, 1, 126, 261, 852, 169, 622, 99, 133, 409, 501, 510, 980, 873, 517, 844, 567, 93, 876, 477, 782, 155, 121, 803});
  EXPECT_EQ(lst.size(), 46);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create4) {
  s21::list<int> lst({149, 354, 807, 701, 800, 708, 711, 914, 28, 545, 423, 764, 650, 300, 60, 257, 956, 868, 967, 354, 429, 474, 223, 820, 9, 768, 179, 594, 885, 802, 485, 877, 796, 604, 626, 756, 655, 64, 540, 447, 148, 554, 703, 843});
  EXPECT_EQ(lst.size(), 44);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create5) {
  s21::list<int> lst({748, 785, 322, 950, 320, 346, 414, 763, 197, 664, 864, 277, 970, 853, 627, 59, 830});
  EXPECT_EQ(lst.size(), 17);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create6) {
  s21::list<int> lst({636, 38, 182, 201, 158, 199, 24, 462, 635, 254, 33, 906, 491, 219, 2, 137, 343, 826, 628, 10, 171});
  EXPECT_EQ(lst.size(), 21);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create7) {
  s21::list<int> lst({530, 384, 478, 118, 845, 915, 127, 291, 614, 993, 502, 935, 523, 848, 6, 241, 330, 927, 672, 224, 168, 820, 501, 406, 983, 626, 572, 893, 409, 936, 859, 54, 551, 661, 344, 232, 605, 207, 727, 641, 851, 88, 97, 37, 948, 849, 325, 0, 374, 20, 716, 933, 336, 822, 223, 415, 724, 590, 325, 174, 356, 713, 972, 920, 623, 33, 913, 846, 883, 840, 252, 857, 739, 479, 298, 486, 401, 399, 128, 113, 446, 507, 565, 602, 372, 410, 836, 159, 884, 38, 519, 576, 221, 632, 516, 71, 567});
  EXPECT_EQ(lst.size(), 97);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create8) {
  s21::list<int> lst({332, 235, 47, 318, 649, 161, 34, 621, 952, 699, 140, 992, 485, 806, 975, 538, 662, 498, 58, 444, 978, 131, 544, 159, 455, 19, 152, 915, 66, 566, 590, 836});
  EXPECT_EQ(lst.size(), 32);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create9) {
  s21::list<int> lst({274, 333, 149, 106, 464, 653, 806, 514, 243, 34, 520, 491, 202, 575, 743, 467, 89, 359, 453, 664});
  EXPECT_EQ(lst.size(), 20);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create10) {
  s21::list<int> lst({505, 391, 210, 316, 288, 158, 932, 354, 479, 446, 508, 966, 660, 721, 425, 204, 545, 288, 973, 779, 835, 531, 692, 493, 666, 989, 846, 659, 170, 514, 46, 471, 35, 255, 421, 338, 300, 774, 913, 415, 372, 841, 406, 30, 688, 768, 808, 344, 158, 771, 668, 427, 198, 176, 292, 944, 956, 60, 828, 784, 410, 207, 516, 868, 694, 797, 788, 423, 351, 161, 498, 477});
  EXPECT_EQ(lst.size(), 72);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create11) {
  s21::list<int> lst({433, 638, 495, 723, 718, 947, 937, 462, 638, 967, 930, 573, 108, 950, 58, 238, 381, 768, 381, 525, 976, 778, 416, 372, 214, 156, 14, 870, 274, 524, 535, 248, 771, 263, 0, 294, 635, 162, 492, 779, 400, 363, 251, 183, 713, 302, 26, 566, 704, 967, 97, 930, 732, 255, 745, 572, 964, 869, 405, 520, 696, 477});
  EXPECT_EQ(lst.size(), 62);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create12) {
  s21::list<int> lst({317, 411, 49, 114, 696, 569, 330, 190, 524, 997, 839});
  EXPECT_EQ(lst.size(), 11);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create13) {
  s21::list<int> lst({202, 826, 901, 560, 247, 902, 682, 382, 51, 437, 699, 666, 934, 74, 276, 568, 835, 883, 491, 324, 675, 157, 836, 212, 512, 518, 136, 108, 401, 106, 618, 222, 309, 244, 903, 943, 37, 249, 161, 877, 102, 689, 502, 187, 598, 859, 998, 117, 307, 622, 321, 785, 360, 783, 820, 125, 371, 359, 798, 376, 460, 922, 291, 783, 770, 623, 695, 755, 620, 793, 308, 507, 325, 948, 699, 339, 969, 7, 586, 353, 123, 761, 593, 504, 298, 745, 709, 58, 513, 757, 94, 87, 21, 378, 204, 805});
  EXPECT_EQ(lst.size(), 96);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create14) {
  s21::list<int> lst({57, 683, 759, 486, 486, 809, 347, 633, 905, 722, 412, 452, 147, 145, 615, 310, 94, 374, 24, 925, 379, 474, 460, 829, 689, 154, 882, 595, 772, 416, 856, 842, 454, 756, 23, 246, 595, 400, 348, 137, 454, 84, 82, 790, 319, 178, 539, 149, 136, 870, 17, 721, 346, 291, 199, 223, 306, 482, 143, 571, 286, 157, 591, 869, 577, 885, 734, 56, 448, 543});
  EXPECT_EQ(lst.size(), 70);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create15) {
  s21::list<int> lst({857, 316, 18, 442, 102, 808, 903, 645, 726, 239, 248, 546});
  EXPECT_EQ(lst.size(), 12);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create16) {
  s21::list<int> lst({372, 511, 768, 662, 890, 845, 873, 921, 519, 735, 502, 656, 632, 731, 526, 612, 586, 191, 104, 272, 49, 340, 801, 764, 474, 860, 887, 407, 135, 658, 504, 121, 975, 556, 440, 596, 463, 630, 903, 52, 238, 693, 721, 927, 412, 853, 478, 966, 64, 530, 699, 83, 685, 263, 17, 152, 424, 217, 791, 35, 485, 843, 897, 841, 653, 419, 873, 982, 508, 240, 630, 858, 7, 777, 140, 789, 694, 123});
  EXPECT_EQ(lst.size(), 78);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create17) {
  s21::list<int> lst({121, 526, 113, 699, 975, 805, 572, 25, 816, 755, 198, 12, 869, 62, 292, 936, 894, 551, 489, 402, 17, 984, 711, 572, 703, 276, 874, 661, 97, 149, 334, 459, 241, 376, 108, 637, 879, 241, 955, 135, 923, 347});
  EXPECT_EQ(lst.size(), 42);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create18) {
  s21::list<int> lst({494, 585, 819, 35, 200, 935, 481, 459, 450, 583, 53, 285, 504, 890, 505, 705, 71});
  EXPECT_EQ(lst.size(), 17);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create19) {
  s21::list<int> lst({851, 398, 705, 890, 31, 4, 313, 176, 698, 270, 224, 440, 663, 693, 711, 841, 95, 435, 324, 601, 122, 93, 76, 331, 186, 166, 867, 573, 999, 592, 665, 240, 262, 377, 80, 968, 854, 569, 424, 585, 624, 938, 702, 175, 976, 141, 672, 640, 669});
  EXPECT_EQ(lst.size(), 49);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create20) {
  s21::list<int> lst({102, 795, 995, 560, 707, 599, 804, 181, 393, 665, 233, 673, 676, 107, 160, 700, 784, 938, 987, 706, 233, 852, 448, 123, 985, 780, 706, 669, 512, 167, 944, 303, 354, 148, 132, 338, 226, 111, 313, 589});
  EXPECT_EQ(lst.size(), 40);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create21) {
  s21::list<int> lst({788, 835, 446, 120, 499});
  EXPECT_EQ(lst.size(), 5);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create22) {
  s21::list<int> lst({328, 101, 405, 986, 647, 648, 454, 410, 947, 629, 609, 352, 140, 955, 741, 846, 401, 74, 330, 180, 255, 135, 477, 937, 34, 592, 816, 406, 184, 889, 982});
  EXPECT_EQ(lst.size(), 31);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create23) {
  s21::list<int> lst({883, 446, 523, 632, 700, 877, 440, 668, 605, 817, 328, 788, 243, 382, 927, 808, 517, 68, 542, 576, 336, 996, 293, 112, 939, 59, 358, 424, 932, 406, 624, 769, 756, 123, 311, 567, 432, 337, 294, 3, 3, 750, 623, 254, 680, 126, 979, 432, 816, 191, 617, 335, 580, 858, 59, 379, 806, 691, 239, 249, 912});
  EXPECT_EQ(lst.size(), 61);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create24) {
  s21::list<int> lst({862, 444, 895, 566, 309, 180, 827, 684, 208, 375, 950, 147, 394, 319, 641, 909, 447, 956, 80, 423, 536, 42, 50, 648, 633, 13, 75, 255, 490, 267, 126, 133, 713, 10, 435, 383, 821, 866, 984, 439, 71, 217, 652, 220, 41, 494, 535, 635, 310, 889, 698, 957, 467, 410, 179, 483, 748, 695, 269, 636, 270, 730, 914, 340, 200, 6, 453, 709, 199, 406, 10, 606, 84, 454, 880, 473, 349, 97, 282, 143, 60, 672, 406, 573, 672, 761, 307, 810, 42, 90, 207});
  EXPECT_EQ(lst.size(), 91);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create25) {
  s21::list<int> lst({402, 372, 52, 796, 16, 392, 565, 836, 253, 725, 673, 620, 682, 718, 690, 410, 392, 908, 352, 771, 38, 169, 774, 468, 21, 546, 108, 990, 369, 485, 588, 818, 683, 726, 794, 858, 651, 550, 103, 217, 273, 238, 17, 234, 212, 283, 960, 924, 536, 255, 950, 651, 228, 541, 215, 300, 477, 938, 306, 737, 832, 255, 969, 109, 521, 749, 269, 667, 160, 740, 968, 796, 840, 958, 646, 422, 638, 53, 157, 247, 742, 995, 372, 632, 501});
  EXPECT_EQ(lst.size(), 85);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create26) {
  s21::list<int> lst({51, 968, 400, 868, 682, 960, 582, 423, 261, 757, 326, 509, 880, 994, 466, 831, 819, 681, 162, 983, 18, 907, 214, 858, 349, 384, 507, 937, 540, 927, 208, 266, 375, 430, 384, 920, 742, 485, 664, 134, 683, 202, 528, 363, 565, 918, 487, 993, 699, 205, 337, 648, 245, 357, 875, 125, 679, 65, 482, 968, 341, 980, 935, 350, 664, 579, 159});
  EXPECT_EQ(lst.size(), 67);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create27) {
  s21::list<int> lst({315, 462, 927, 786, 221, 945, 528, 182, 556, 233, 590, 867, 137, 916, 619, 956, 795, 387, 741, 507, 420, 431, 493, 602, 493, 63, 742, 184, 167, 324, 814, 449, 602, 979, 776, 0, 94, 530, 459, 736, 647, 159, 33, 587, 734, 799, 195, 630, 953, 983, 311, 866, 959, 46, 926, 814, 330, 517, 130, 921, 955, 265, 437, 26, 434, 795, 38, 926, 838, 104, 51, 366, 341, 695, 216, 134, 950, 540, 394, 125, 887, 471, 434});
  EXPECT_EQ(lst.size(), 83);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create28) {
  s21::list<int> lst({877, 173, 567, 430, 426, 954, 216, 707, 84, 131, 783});
  EXPECT_EQ(lst.size(), 11);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create29) {
  s21::list<int> lst({966, 747, 552, 124, 379, 192, 295, 738, 505, 705, 612, 728, 676, 754, 701, 621, 870, 917, 807, 760, 429, 994, 172, 895, 251, 994, 285, 309, 881, 763, 50, 657, 166, 204, 103, 4, 961, 759, 714, 783, 168, 430, 227, 962, 157, 770, 594, 857, 451, 722, 236, 318, 861, 386, 534, 189, 91, 968, 314, 728, 143, 994, 973, 675, 354, 662, 417, 111, 186, 601, 595, 856, 791, 344, 938, 48, 34, 108, 147, 525, 978, 865, 100, 412, 908, 769, 922, 408});
  EXPECT_EQ(lst.size(), 88);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create30) {
  s21::list<int> lst({275, 1, 5, 290, 282, 740, 765, 835, 141, 973, 543, 452, 585, 144, 531, 430, 559, 17, 223, 812, 894, 861, 365, 777, 873, 741, 163, 341, 678, 834, 517, 139, 800, 353, 553, 760, 240, 514, 665, 481, 42, 788, 698, 812});
  EXPECT_EQ(lst.size(), 44);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create31) {
  s21::list<int> lst({970, 217, 797, 926, 93, 589, 406, 931, 90, 199, 48, 934, 94, 146, 529, 415, 713, 198, 736, 503, 651, 978, 874, 249, 486, 583, 214, 566, 644, 287, 273, 30, 263, 742, 78, 997, 970, 535, 211, 179, 708, 692, 67, 335, 909, 752, 977, 905, 816, 39, 711, 588, 772, 890, 236, 758, 633, 344, 989, 956, 683, 310, 871, 142, 305});
  EXPECT_EQ(lst.size(), 65);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create32) {
  s21::list<int> lst({229, 67, 161, 967, 356, 942, 37, 241, 92, 808, 796, 749, 253, 462, 499, 146, 105, 84, 164, 694, 7, 719, 2, 821, 215, 214, 229, 937, 852, 12, 676, 762, 681, 339, 320, 257, 32, 813, 915, 262, 573, 177, 779, 111, 741, 411, 949, 204, 100, 89, 49, 566, 512, 806, 981, 6, 25, 289, 225, 7, 308, 515, 455, 163, 270, 963, 341, 821, 912, 899, 485, 612, 306, 622, 751, 161, 877, 326, 655, 438, 872, 78, 460, 860, 639, 694, 951, 956, 897, 232});
  EXPECT_EQ(lst.size(), 90);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create33) {
  s21::list<int> lst({928, 346, 53, 812, 666, 998, 400, 863, 680, 312, 648, 852, 854, 643, 868, 546, 583, 117, 568, 527, 338, 675, 874, 922, 254, 330, 560, 737, 920, 5, 951, 711, 453, 421, 147, 206, 441, 447, 634, 207, 458, 777, 663, 135, 455, 0, 693, 882, 525, 210, 422, 264, 627, 604, 979, 693, 119, 375, 421, 252, 593, 307, 81, 118, 496, 240, 534, 222, 546, 599, 917, 146, 89, 806, 856, 626, 571, 107, 830, 655, 977, 675, 448, 57, 439, 236, 358});
  EXPECT_EQ(lst.size(), 87);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create34) {
  s21::list<int> lst({528, 239, 265, 260, 537, 793});
  EXPECT_EQ(lst.size(), 6);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create35) {
  s21::list<int> lst({111, 389, 634, 63, 637, 444, 164, 105, 292, 577, 12, 216, 320, 579, 247, 127, 109, 840, 71, 959, 352, 703, 649, 268, 446, 733, 877, 444, 929, 706, 25, 106, 159, 565, 810, 138, 916, 692, 448, 445, 955, 307, 44, 21, 365, 847, 308, 42, 759, 685, 608, 167, 271, 351, 429, 112, 388, 425, 687, 890, 720, 428, 62, 756, 85, 77, 99, 312, 496, 843, 326, 327, 836, 836, 940, 284, 908, 597, 441, 689, 654, 609, 346, 468, 99});
  EXPECT_EQ(lst.size(), 85);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create36) {
  s21::list<int> lst({63, 327, 365, 73, 904, 22, 59, 320});
  EXPECT_EQ(lst.size(), 8);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create37) {
  s21::list<int> lst({631, 795, 607, 125, 588, 100, 859, 101, 424, 948, 203, 598, 590, 156, 414, 987, 8, 115, 657, 17, 736, 21, 826, 604, 327, 876, 753, 681, 298, 886, 381, 321, 629, 205, 185, 388, 599, 115, 794, 539, 638, 526, 831, 995, 146, 567, 687, 641, 361, 454, 561, 698, 815, 590, 323, 591, 617, 102, 72, 883, 866, 790, 458, 657, 876, 60, 894, 594, 784, 740, 612, 121, 883, 770, 808, 357, 46, 859, 850, 885, 483, 108, 313, 145, 584, 586, 199, 152, 445, 869});
  EXPECT_EQ(lst.size(), 90);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create38) {
  s21::list<int> lst({837, 767, 420, 992, 823, 777, 896, 559, 513, 609, 952, 994, 159, 244, 466, 53, 156, 662, 745, 389, 563, 136, 58, 598, 236, 514, 784, 669, 37, 261, 898, 513, 677, 71, 842, 371, 963, 562, 647, 721, 202, 804, 203, 940, 613, 637, 664, 999, 686, 660, 800, 284, 800, 595, 939, 814, 423, 362, 831, 261, 436, 186, 934, 387, 557, 249, 634, 254, 869, 582, 87, 280, 914, 852, 970, 205, 527, 420, 402, 461, 418, 983});
  EXPECT_EQ(lst.size(), 82);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create39) {
  s21::list<int> lst({99, 328, 269, 425, 971, 398, 425, 569, 593, 3, 770, 466, 143, 122, 131, 202, 728, 295, 669, 423, 239, 285, 74, 564, 663, 693, 97, 723, 364, 912, 944, 611, 894, 879, 605, 744, 347, 800, 495, 838, 396, 923, 818, 888, 457, 113, 42, 655, 787, 695, 646, 112, 357, 204, 244, 669, 960, 786, 251, 473, 488, 709, 228, 793, 380, 499, 40, 761, 819, 451, 167, 772, 762, 82, 648, 17, 969, 418, 862, 708, 236});
  EXPECT_EQ(lst.size(), 81);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create40) {
  s21::list<int> lst({338, 169, 670, 128, 129, 568, 330, 419, 87, 420, 727, 478, 326, 60, 725, 349, 727, 863, 893, 796, 120, 867, 474, 528, 462, 568, 18, 406, 606, 180, 7, 145, 336, 374, 558, 911, 745, 690, 340, 11, 60, 291, 384, 583, 617, 91, 346, 157, 432, 882, 762, 573, 936, 294, 654, 884, 653, 574, 217, 369, 771, 109, 634, 939, 774, 263, 127, 358, 110, 680, 389, 136, 861, 323, 276, 306, 468, 590, 745, 175, 237, 197, 395});
  EXPECT_EQ(lst.size(), 83);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create41) {
  s21::list<int> lst({936, 231, 109, 391, 740, 420, 677, 940, 914, 686, 328, 915, 495, 277, 442, 721, 144, 700, 498, 910, 735, 468, 970, 18, 32, 225, 408, 817, 256, 87, 198, 744, 652, 931, 711, 48, 450, 94, 174, 475, 316, 31, 269, 496, 533, 11, 992, 675, 341, 890, 189, 486, 663, 986, 919, 576, 818, 526, 493, 142, 545, 718});
  EXPECT_EQ(lst.size(), 62);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create42) {
  s21::list<int> lst({903, 11, 236, 708, 404, 280, 713, 530, 616, 233, 489, 656, 89, 173, 823, 14, 644, 789, 394, 63, 56, 367, 508, 263, 713, 103, 244, 384, 734, 0, 229, 586, 211, 592, 683, 938, 928, 598, 650, 822, 95, 984, 461, 249, 977, 514, 895, 947, 804});
  EXPECT_EQ(lst.size(), 49);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create43) {
  s21::list<int> lst({24, 288, 698, 770, 733, 131, 131, 712, 26, 712, 29, 829, 241, 689, 645});
  EXPECT_EQ(lst.size(), 15);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create44) {
  s21::list<int> lst({235, 831, 394, 227, 39, 915, 774, 556, 99, 202, 474, 152, 343, 802, 15, 742, 437, 768, 461, 347, 229, 860, 511, 237, 848, 817, 627, 179, 972, 874, 115, 782, 771, 370, 283, 747, 90, 70, 564, 663, 743, 881, 622, 412, 174, 254, 971, 931, 718, 118, 528, 570, 120, 989, 549, 869, 519, 9, 100, 555, 468, 941, 519, 375, 556, 404, 525, 331, 454, 892, 795, 30, 96, 88, 276, 874, 576, 568, 368, 507, 269, 461, 299, 136, 917, 340, 861, 569});
  EXPECT_EQ(lst.size(), 88);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create45) {
  s21::list<int> lst({749, 651, 482, 537, 989, 598, 528});
  EXPECT_EQ(lst.size(), 7);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create46) {
  s21::list<int> lst({976, 58, 993});
  EXPECT_EQ(lst.size(), 3);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create47) {
  s21::list<int> lst({38, 846, 152, 528, 740, 812, 564, 399, 147, 844, 195, 686, 589, 904, 59, 251, 419, 217, 771, 152, 912, 386, 65, 568, 490, 510, 958, 42, 624, 12, 203, 233, 329, 805, 769, 929, 980, 392, 346, 769, 586, 249, 644, 334, 941, 51, 469, 910, 287, 512, 54, 567, 388, 873, 953, 676, 985, 903, 28, 844, 305, 619});
  EXPECT_EQ(lst.size(), 62);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create48) {
  s21::list<int> lst({549, 588, 499, 669, 589, 39, 3, 302, 1, 440, 923, 662, 522, 25, 643, 882, 411, 816, 161, 595, 769, 799, 146, 530, 664, 623, 637, 18, 342, 462, 809, 234, 495, 146, 377, 376, 865, 896, 110, 52, 183, 131, 564, 736, 796, 542, 850, 623, 188, 160, 280, 326, 724, 960, 764, 935, 958, 747, 854, 171, 209, 600, 348, 543, 826, 397, 874, 294, 273, 833, 78, 84, 493, 105, 941, 851, 732, 391});
  EXPECT_EQ(lst.size(), 78);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create49) {
  s21::list<int> lst({351, 604, 564, 280, 927, 956, 108, 105, 476, 880, 548, 832, 851, 825, 734, 342, 742, 174, 985, 383, 207, 243, 27, 274, 945, 94, 476, 734, 968, 450, 198, 709, 224, 130, 335, 188, 113, 223, 409, 107, 728, 10, 933, 177, 47, 240, 452, 36, 850, 722, 580, 14, 214, 628, 721, 771, 961, 410, 208, 686, 260, 999, 937, 555, 953, 453, 332, 356, 709, 307, 284, 47, 248, 280, 50, 68, 868, 467, 656, 36, 709, 41, 622});
  EXPECT_EQ(lst.size(), 83);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create50) {
  s21::list<int> lst({460, 765, 113, 283, 521, 0, 851, 329, 493, 726, 819, 839, 215, 116, 255, 299, 77, 362, 685, 734, 972, 849, 886, 469, 577, 736, 23, 298, 438, 879, 746, 699, 878, 980, 11, 353, 118, 428, 436, 2, 58, 90, 207, 80, 848, 415, 216, 587, 230, 685, 544, 49, 547, 714, 726, 769, 333, 840, 783, 619, 253, 762, 933, 1, 411, 88, 937, 131, 592, 40});
  EXPECT_EQ(lst.size(), 70);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create51) {
  s21::list<int> lst({696, 281, 872, 137, 376, 524, 265, 89, 549, 187, 310, 22, 917, 963, 430, 127, 791, 619, 148, 217, 317, 780, 175, 737, 84, 878, 652, 961, 447, 760, 888, 887, 303, 361, 880, 787, 521, 2, 67, 996, 619, 849, 151, 804, 207, 869, 356, 261, 49, 39, 366, 656, 847, 575, 310, 677, 620, 820, 16, 625, 299, 181, 806, 804, 737, 959, 436, 309, 278, 850, 44, 447, 363, 750, 525, 780, 41, 491, 481, 278, 423, 60, 571, 774, 494, 440, 699, 696, 492, 692, 807, 752});
  EXPECT_EQ(lst.size(), 92);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create52) {
  s21::list<int> lst({977, 929, 541, 794, 79, 568, 571, 663, 349, 958, 888, 168, 461, 130, 139, 237, 391, 281, 940, 950, 712, 295, 409, 70, 751, 40, 309, 439, 101, 975, 279, 260, 428, 639, 523, 155, 849, 686, 204, 599, 492, 454, 667, 535, 483, 427, 728, 387, 545, 127, 806, 94, 667, 635, 20, 766, 475, 226, 608, 599, 749});
  EXPECT_EQ(lst.size(), 61);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create53) {
  s21::list<int> lst({599, 615, 506, 446, 166, 218, 615, 479, 700, 962, 507, 573, 418, 285, 604, 765, 496, 877, 505, 988, 35, 856, 271, 22, 404, 425, 91, 818, 699, 664, 396, 471, 101, 577, 272, 270, 990, 618, 908, 584, 295, 209, 343, 162, 68, 702, 332, 150, 717, 316, 865, 655, 268, 766, 818, 447, 763});
  EXPECT_EQ(lst.size(), 57);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create54) {
  s21::list<int> lst({510, 426, 494, 553, 401, 395, 352, 630, 703, 672, 284, 597, 451, 95, 122, 699, 88, 396, 177, 572, 125, 803});
  EXPECT_EQ(lst.size(), 22);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create55) {
  s21::list<int> lst({963, 812, 799, 545, 421, 361, 181, 901, 367, 322, 61, 981, 792, 622, 220, 202, 880, 94, 895, 790, 549, 349, 846, 937, 814, 720, 920, 124, 870, 961, 504, 526, 906, 700, 561, 840, 29, 438, 120, 651, 911, 246, 921, 251, 668, 381, 848, 563});
  EXPECT_EQ(lst.size(), 48);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create56) {
  s21::list<int> lst({874, 613, 848, 47, 214, 325, 123, 928, 999, 930, 620, 660, 312, 228, 160, 135, 507, 653, 795, 147, 61, 125, 757, 664, 523, 607, 184, 774, 600});
  EXPECT_EQ(lst.size(), 29);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create57) {
  s21::list<int> lst({150, 95, 834, 215, 236, 969, 10, 967, 913, 538, 893, 118, 49, 347, 225, 265, 712, 15, 545, 754, 876, 52, 655, 40, 538, 485, 384, 707, 217, 129, 865, 618, 75, 168, 54, 43, 367, 675, 981, 52, 51, 145, 636, 497, 709, 806, 626, 428, 537, 95, 636, 234, 164, 82, 605, 720, 919, 441, 825, 536, 159, 965, 192, 909, 844, 373, 588, 501, 871, 8, 164, 607, 456, 25, 908, 622, 850, 376, 270, 361, 400, 991, 160, 833, 940, 901});
  EXPECT_EQ(lst.size(), 86);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create58) {
  s21::list<int> lst({235, 322, 914, 485, 790, 974, 694, 615, 769, 746, 426, 60, 426, 874, 932, 62, 93, 115, 841, 421, 626, 655, 677, 500, 57, 776, 833, 960, 528, 488, 975, 606, 209, 865, 308, 580, 369, 253, 334, 404, 735, 357, 194, 935, 590, 305, 920, 534, 849, 611, 778, 89, 55, 757, 947, 51, 343, 741, 136, 368, 219, 256, 939, 60, 249, 432, 776, 71, 864, 556, 498, 77, 303, 571, 136, 416, 773, 112, 948, 624, 561, 485, 298, 469, 877});
  EXPECT_EQ(lst.size(), 85);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create59) {
  s21::list<int> lst({224, 969, 373, 55, 231, 312, 307, 771, 232, 507, 635, 805, 503, 643, 181, 264, 521, 884, 768, 764, 873, 77, 865, 739, 387, 704, 680, 195, 678, 295, 752, 525, 216, 873, 182, 634, 768, 84, 810, 598, 918, 833, 731, 552, 561, 310, 451, 375, 351, 262, 331, 14, 912, 926, 408, 203, 609, 629, 963, 806, 76, 299, 314, 389, 438, 113, 294, 718, 584, 571, 806, 456, 244, 975, 27, 826, 478, 855, 106, 8, 463, 195, 72, 339, 7, 740, 651, 717, 28, 696});
  EXPECT_EQ(lst.size(), 90);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create60) {
  s21::list<int> lst({860, 359, 547, 824, 849, 924, 301, 45});
  EXPECT_EQ(lst.size(), 8);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create61) {
  s21::list<int> lst({528, 298, 769, 34, 157, 124, 433, 531, 906, 266, 739, 500, 587, 981, 364, 359, 849, 345, 961, 463, 19, 471, 961, 682, 582, 395, 152, 623, 627, 443, 899, 992, 237, 345, 909, 830, 657, 994, 684, 287, 412, 372, 941, 224, 933, 442, 608});
  EXPECT_EQ(lst.size(), 47);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create62) {
  s21::list<int> lst({171, 896, 481, 74, 117, 445, 322, 856, 992, 280, 160, 514, 24, 954, 712, 491, 285, 466, 794, 437, 940, 631, 156, 57, 625, 415, 673, 840, 724, 119, 764, 885, 977, 299, 514, 209, 32, 769, 464, 602, 844, 387, 542, 752, 600, 22, 519, 350, 283, 443, 810, 890, 215, 20, 180, 280, 326, 792, 58, 489, 557, 846, 443, 470, 857, 412, 154, 553, 954, 776, 511, 832, 440, 662, 987, 261, 532, 607, 365, 220, 952, 318, 368, 708, 290, 903, 95, 914, 678, 36, 902, 104, 899, 449, 908, 917, 632});
  EXPECT_EQ(lst.size(), 97);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create63) {
  s21::list<int> lst({319, 700, 369, 22, 761, 285, 454, 286, 636, 283, 113, 1, 132, 962, 836, 5, 970, 231, 993, 528, 890, 333, 261, 650, 635, 138, 285, 622, 424, 893, 712, 77, 435, 487, 487, 626, 966, 841, 609, 377, 970, 325, 602, 134, 224, 497, 953, 752, 653, 133, 693, 990, 141, 883, 306, 358, 651, 640, 157, 16, 458, 625, 608, 148, 203, 963, 72, 426, 484, 698, 781, 233, 918, 896, 588, 179, 883, 7, 446, 871, 732, 278, 631, 172, 910, 484, 785, 838, 743, 459, 861, 569, 354, 727, 19, 786, 218, 284, 489, 354});
  EXPECT_EQ(lst.size(), 100);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create64) {
  s21::list<int> lst({866, 900, 531, 873, 797, 353, 598, 581, 384, 422, 998, 310, 1, 586, 991, 349, 11, 379, 409, 866, 93, 203, 360, 455, 43, 468, 483, 452, 935, 714, 248});
  EXPECT_EQ(lst.size(), 31);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create65) {
  s21::list<int> lst({686, 369, 8, 993, 398, 990, 178, 914, 275, 293, 815, 906, 423, 939, 504, 948, 533, 577, 468, 106, 776, 112, 978, 931, 923, 872, 157, 735, 462, 718, 694, 22, 463, 629, 100, 580, 312, 998, 969, 317, 133, 861, 342, 612, 664, 204, 578, 767, 236, 534, 642, 775, 432, 429, 892, 440, 112, 977, 403, 609, 803, 121, 741, 390, 655, 436, 969, 219});
  EXPECT_EQ(lst.size(), 68);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create66) {
  s21::list<int> lst({778, 987, 534, 278, 664, 221, 641, 565, 902, 280, 666, 697, 812, 557, 506, 438, 826, 161, 935, 217, 415, 643, 335, 976, 471, 493, 831, 40, 621, 441, 859, 733, 14, 364, 717, 978, 370, 441, 265, 119, 702, 795, 780, 675, 540, 621, 366, 648, 10, 705, 794, 240, 374, 654, 860, 37, 639, 271, 196, 394, 69, 126});
  EXPECT_EQ(lst.size(), 62);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create67) {
  s21::list<int> lst({492, 953, 361, 225, 83, 658, 594, 413, 480, 140, 817, 195, 573, 744, 952, 328, 904, 68, 308, 137, 309, 888, 271, 637, 712, 718, 634, 975, 215, 689, 687, 113, 975, 380, 77, 188, 537, 694, 352, 78, 24, 792, 423, 336, 585, 792, 360, 506, 869, 762, 899, 326, 383, 742, 51, 451, 208, 315, 972, 50, 699, 809, 545, 41, 333, 552, 5, 290, 642, 803, 5, 751, 448, 592, 668, 882, 588, 219, 192, 545, 519, 330, 169, 261});
  EXPECT_EQ(lst.size(), 84);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create68) {
  s21::list<int> lst({723, 440, 362, 231, 93, 983, 663, 522, 782, 494, 562});
  EXPECT_EQ(lst.size(), 11);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create69) {
  s21::list<int> lst({542, 15, 830, 535, 747, 85, 84, 895, 536, 866, 602, 253, 25, 307, 482, 773, 375, 195, 556, 410, 837, 646, 909, 243, 575, 332, 973, 454, 793, 535, 791, 242, 180, 14, 915, 579, 457, 122, 145, 523, 882, 921, 762, 335, 40, 242, 115, 893, 67, 207, 462, 416, 32, 263, 273, 249, 340, 728, 9, 636, 191, 70, 694, 292, 831, 766, 281, 799, 637, 725, 239, 914, 1, 156, 213});
  EXPECT_EQ(lst.size(), 75);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create70) {
  s21::list<int> lst({367, 40, 430, 207, 554, 382, 156, 864, 924, 833, 814, 485, 997, 948, 962, 800, 911, 271, 169, 964, 702, 836, 533, 707, 522, 183, 88, 490, 277, 143, 19, 467, 507, 237, 238, 678, 146, 220, 526, 983, 566, 586, 72, 437, 780, 946, 2, 39, 350, 645, 782, 944, 781, 9, 139, 649, 289, 924, 303, 582, 138, 580, 282, 701, 307, 676, 82, 724, 299, 394, 675, 335, 175, 348});
  EXPECT_EQ(lst.size(), 74);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create71) {
  s21::list<int> lst({67, 520, 340, 18, 649, 293, 364, 595, 708, 799, 695, 917, 865, 534, 773, 221, 230, 5, 219, 93, 942, 581, 296, 44, 762, 838, 503, 28, 371, 852, 115, 204});
  EXPECT_EQ(lst.size(), 32);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create72) {
  s21::list<int> lst({744, 925, 233, 405, 683, 587, 305, 870, 386, 601, 864, 376, 997, 949, 245, 31, 568, 317, 903, 316, 20, 865, 707, 888, 63, 222, 357, 51, 557, 243, 641, 646, 91, 909, 600, 898, 16, 273, 297, 259, 234, 255, 557, 442, 497, 290, 521, 614, 852, 489, 452, 853, 973, 387, 923, 915, 387, 396, 816, 173, 491, 439, 492, 560, 353, 747, 828, 824, 770, 12, 988, 660, 528, 94, 616, 901, 869, 313, 688, 496, 532, 189, 255, 347});
  EXPECT_EQ(lst.size(), 84);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create73) {
  s21::list<int> lst({44, 196, 11, 563, 43, 658, 739, 440, 486, 968, 593, 266, 862, 17, 934, 218, 583, 760, 272, 336, 898, 59, 91, 476, 83, 259, 521, 671, 704, 971, 312, 308, 668, 569, 358, 602, 754, 615, 915, 315, 193, 909, 431, 866, 356, 371, 812, 523, 522, 791, 888, 648, 153, 854, 626, 884, 638, 618, 245, 136, 958, 990, 826, 477, 490, 425, 744, 835, 60, 93, 128, 470, 839, 287, 576, 665, 916, 944, 384, 647, 749, 744, 946, 416, 297, 470, 925, 839, 880, 132, 240, 408, 862, 204, 197, 186, 842});
  EXPECT_EQ(lst.size(), 97);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create74) {
  s21::list<int> lst({960, 970, 100, 920, 522, 575, 763, 342, 585, 615, 357, 920, 117});
  EXPECT_EQ(lst.size(), 13);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create75) {
  s21::list<int> lst({386, 363, 43, 975, 759, 447, 181, 552, 672, 890, 317, 832, 677, 572, 631, 330, 196, 693, 92, 820, 998, 910, 397, 442, 529, 914, 637, 761, 438, 287, 775, 969, 260, 487, 693, 547, 413, 650, 974, 28, 61, 694, 153, 32, 741, 438, 834, 141, 243, 929, 98, 566, 554, 79, 397, 820, 350, 905, 99, 921, 270, 39, 195, 438, 5, 104, 775, 263, 845, 967, 535, 1, 742, 721, 779, 991, 0, 631, 41, 457, 41, 1, 761, 551, 792, 147, 792, 274, 587, 743, 279, 688, 471});
  EXPECT_EQ(lst.size(), 93);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create76) {
  s21::list<int> lst({661, 638, 418, 298});
  EXPECT_EQ(lst.size(), 4);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create77) {
  s21::list<int> lst({921, 356, 831, 729, 604, 561, 429, 72, 64, 706, 691, 973, 767, 32, 691, 324, 975, 76, 149, 765, 790, 759, 209, 74, 478, 324, 894, 74, 718, 49, 619, 290, 929, 244, 659, 639, 658, 158, 72, 565, 535, 740, 24, 350, 319, 677, 954, 983, 824, 844, 78, 435, 622, 479, 375, 969});
  EXPECT_EQ(lst.size(), 56);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create78) {
  s21::list<int> lst({514, 59, 690, 935, 72, 629, 828, 549, 769, 53, 237, 252, 392, 388, 634, 335, 769, 780, 368, 991, 487, 664, 37, 635, 786, 977, 177, 930, 916, 393, 505, 0, 802, 861, 456, 908, 849, 36, 893, 115, 140, 953, 169, 197});
  EXPECT_EQ(lst.size(), 44);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create79) {
  s21::list<int> lst({559, 918, 601, 663, 286, 325, 28, 155, 911, 144, 739, 213, 405, 367, 861, 162, 583, 892, 628, 709, 107, 506, 70, 705, 648, 746, 469, 550, 628, 761, 421, 319, 222, 135, 819, 185, 445, 779});
  EXPECT_EQ(lst.size(), 38);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create80) {
  s21::list<int> lst({394, 12, 793, 825, 790, 733, 53, 464, 208, 353, 712, 357, 199, 730, 837, 988, 147, 717, 643, 106, 983, 18, 457, 169, 913, 274, 944, 216, 259, 823, 774, 453, 713, 32, 917, 409, 355, 870, 144, 953, 972, 68, 788, 911, 209, 534, 103, 675, 594, 195, 436, 95, 643, 658, 718, 864, 90, 303});
  EXPECT_EQ(lst.size(), 58);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create81) {
  s21::list<int> lst({835, 712, 335, 55, 382, 446, 838, 712, 836, 975, 103, 511, 948, 186, 866, 848, 149, 275, 115, 378, 154, 759, 182, 446, 876, 136, 387, 544, 449, 122, 616, 351, 333, 142, 166, 70, 885, 391, 374, 573, 233, 766, 344, 961, 315, 305, 767, 356, 70, 26, 644, 804, 596, 825, 982, 581, 613, 555, 973, 904, 221, 219, 261, 853, 708, 548, 58, 958, 341, 824, 818, 46, 472, 808, 908, 893, 21, 585, 960, 205, 362, 363, 688, 589, 67, 320});
  EXPECT_EQ(lst.size(), 86);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create82) {
  s21::list<int> lst({289, 410, 954, 642, 924, 331, 938, 655, 720, 146, 175, 726, 605, 137, 252, 896, 896, 136, 188, 349, 130, 210, 615, 804, 123, 55, 929, 559, 812, 710, 636, 614, 789, 131, 223, 631, 702, 962, 433, 465, 220, 432, 332, 252, 688, 450, 590, 132, 456, 331, 750, 345, 205, 7, 111, 616, 312, 542, 891, 902, 71});
  EXPECT_EQ(lst.size(), 61);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create83) {
  s21::list<int> lst({165, 265, 564, 377, 699, 981, 917, 715, 842, 347});
  EXPECT_EQ(lst.size(), 10);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create84) {
  s21::list<int> lst({209, 463, 679, 792, 102, 657, 364, 952, 118, 846, 886, 135, 635, 323, 454, 370, 438, 465, 907, 96, 779, 818});
  EXPECT_EQ(lst.size(), 22);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create85) {
  s21::list<int> lst({534, 220, 147, 271, 913, 230, 613, 714, 135, 497, 151, 338, 602, 938, 169, 699, 932, 239, 877, 9, 900, 460, 295, 18, 247, 886, 877, 449, 764});
  EXPECT_EQ(lst.size(), 29);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create86) {
  s21::list<int> lst({224, 577, 593, 859, 489, 435, 725, 606, 115, 457, 570, 945, 146, 224, 990, 728, 249, 622, 384, 330, 934, 403, 277, 500, 727, 996, 784, 615, 267, 478, 979, 700, 774, 321, 636, 913, 65, 560, 840, 893, 856, 669, 67, 108, 782, 789, 318, 605, 85, 796, 11, 291, 100, 369, 89, 837, 721, 34, 951, 13, 981, 103, 162, 986, 491, 815, 753, 970, 824, 638, 746, 93, 899, 390});
  EXPECT_EQ(lst.size(), 74);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create87) {
  s21::list<int> lst({482, 699, 606, 591, 431, 311, 691, 122, 725, 757, 61, 256, 881, 139, 810, 727, 939, 380, 553, 937, 178, 385, 689, 913, 450, 113, 724, 612, 654, 848, 635, 585, 123, 729, 260, 928, 196, 747, 999, 629, 279, 619, 223, 458, 324, 228, 422, 168, 454, 636, 908, 299, 268, 826, 668, 929, 648, 323, 560, 691, 309, 358, 937, 861, 144, 739, 844, 155, 595, 286, 644, 987, 367, 902, 228, 112, 537, 40, 661, 963, 984, 595, 405, 43, 608, 354, 258, 797, 354, 128, 861, 585});
  EXPECT_EQ(lst.size(), 92);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create88) {
  s21::list<int> lst({592, 710, 634, 906, 429, 250, 728, 8, 374, 852, 671, 352, 796, 128, 601, 941, 799, 83, 609, 759, 531, 751, 318, 883, 335, 107, 563});
  EXPECT_EQ(lst.size(), 27);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create89) {
  s21::list<int> lst({360});
  EXPECT_EQ(lst.size(), 1);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create90) {
  s21::list<int> lst({858, 923, 565, 961, 615, 790, 438, 621, 463, 56, 466, 821, 428, 551, 360, 952, 774, 673, 987, 332, 917, 926, 707, 864, 325, 210, 82, 26, 856, 277, 548, 196, 4, 820, 912, 252, 658, 49, 648, 802, 451, 645, 908, 137, 853, 172, 57, 191, 462, 155, 516, 706, 259, 913, 818, 192, 901, 753, 412, 239, 803, 842, 309, 161, 510, 84, 83, 162, 688, 256, 172, 686, 135, 896, 686, 271, 471, 618, 268, 683, 760, 500, 985, 202, 325, 230, 951, 206, 281, 296, 443, 612});
  EXPECT_EQ(lst.size(), 92);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create91) {
  s21::list<int> lst({960, 120, 633, 832, 766, 852, 343, 103, 188, 215, 675, 523, 138, 898, 563, 856, 777, 191, 142, 102, 883, 473, 505, 791, 265, 986, 593, 762, 156, 317, 379, 579, 672, 624, 407, 421, 157, 326, 495, 379, 514, 849, 783, 364, 891, 169, 391, 937, 637, 948, 310, 590, 866, 397, 748, 125, 367, 612, 338, 649, 205, 974, 470, 981, 190, 783, 112, 176});
  EXPECT_EQ(lst.size(), 68);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create92) {
  s21::list<int> lst({637, 805, 481, 304, 646, 58, 411, 503, 481, 642, 514, 436, 138, 228, 139, 587, 184, 734, 695, 974, 845, 348});
  EXPECT_EQ(lst.size(), 22);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create93) {
  s21::list<int> lst({958, 120, 14, 42, 254, 491, 980, 884, 949, 237, 157, 765, 30, 411, 700, 69, 709, 735, 247, 67, 106, 100, 835, 291, 623, 697, 251, 580, 820, 890, 754, 33, 483, 97, 240, 985, 547, 752, 854, 373, 350, 172, 933, 17, 170, 707});
  EXPECT_EQ(lst.size(), 46);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create94) {
  s21::list<int> lst({411, 632, 72, 533, 584, 506, 665, 456, 292, 16, 732, 131, 378, 906, 782, 958, 830, 258, 619, 906, 573, 917, 854, 376, 51, 874, 94, 630, 306, 637, 26, 790, 425, 688, 580, 238, 707, 408, 4, 466, 302, 794, 408, 119, 695, 787, 135, 541, 689, 708, 0, 644, 324, 9, 807, 729, 375, 297, 240, 230, 996, 152, 868, 835, 616, 14, 647, 56, 797, 854, 661, 505, 330, 889, 694, 854, 12, 579, 798, 398, 379, 92, 305, 739, 980, 82, 901, 697, 235});
  EXPECT_EQ(lst.size(), 89);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create95) {
  s21::list<int> lst({417, 583, 916, 986, 937, 412, 863, 135, 449, 982, 522, 532, 356, 94, 78, 966, 790, 252, 781});
  EXPECT_EQ(lst.size(), 19);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create96) {
  s21::list<int> lst({235, 38, 446, 380});
  EXPECT_EQ(lst.size(), 4);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create97) {
  s21::list<int> lst({434, 350, 996, 955, 125, 128, 591, 601, 354, 710, 611, 661, 973, 271, 295, 908, 704, 253, 541, 179, 873, 89, 850, 965, 141, 516, 961, 162, 287, 862, 562, 210, 674, 651, 96, 850, 257, 775, 638, 132, 869, 731, 24, 397, 444, 962, 361, 886, 308, 732, 937, 176, 615, 216, 177, 725, 32, 536, 759, 536, 555, 741, 729, 184, 827, 92, 548, 765, 639, 491, 386, 499, 60, 956, 883, 372, 199, 358, 22, 642, 292, 834, 642, 525, 697, 484, 745, 571, 24, 394});
  EXPECT_EQ(lst.size(), 90);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create98) {
  s21::list<int> lst({901, 595, 411, 735, 268, 853, 80, 370, 804, 919, 663, 44, 687, 875, 724, 491, 691, 617, 626, 988, 112, 243, 198, 3, 980, 782, 521, 244, 61, 523, 603, 209, 996, 122, 927, 735, 420, 534, 222, 424, 624, 408, 939, 849, 115, 333, 586, 11, 601, 755, 865, 922, 564, 986, 699, 501, 289, 734, 752, 508, 622, 695});
  EXPECT_EQ(lst.size(), 62);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Create99) {
  s21::list<int> lst({105, 436, 29, 363, 799, 667, 978, 462, 790, 310, 963, 652, 720, 846, 990, 975, 307, 296, 376, 931, 508, 350, 114, 153, 811, 349, 392, 541, 43, 458, 521, 699, 548, 993, 682, 594, 78, 130, 131, 929, 964, 406, 608, 995, 551, 913, 0, 666, 289, 523, 432, 37, 282, 716, 120, 866, 229, 467, 799, 246, 13, 643, 960});
  EXPECT_EQ(lst.size(), 63);
  EXPECT_FALSE(lst.empty());
}

TEST(ListTest, Copy0) {
  s21::list<int> lst1({68, 539, 333, 236, 106, 730, 539, 597, 6, 409, 14, 333, 593, 90, 538, 1, 257, 988, 535, 143, 371, 199, 990, 331, 310, 357, 166, 638});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy1) {
  s21::list<int> lst1({395, 527, 753, 347, 323, 801, 421, 612, 903, 410, 903, 542, 346, 345, 957, 493, 183, 940, 978, 425, 69, 172, 231, 621, 645, 901, 601, 940, 345, 612, 275, 885, 773, 950, 18, 369, 702, 912, 757, 630, 216, 104, 553, 298, 994, 689, 850, 691, 679, 611, 409, 536, 157, 334, 568, 560, 108, 702, 939, 323, 339, 981, 710, 733});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy2) {
  s21::list<int> lst1({456, 210, 942, 500, 255, 723, 16, 8, 254, 579, 352, 274, 69, 554, 656, 738, 902, 249, 649, 134, 76, 868, 815, 462, 841, 385, 212, 237, 370, 4, 498, 810, 973, 966, 481, 350, 286, 466, 416, 843, 204, 34, 753, 890, 81, 838, 391, 860, 907, 874, 28, 951, 551, 601, 310, 195, 983, 665, 293, 13, 455, 358, 273, 839, 714, 419, 517, 706, 955, 570, 195, 279, 465});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy3) {
  s21::list<int> lst1({246, 594, 431, 132, 802, 736, 671, 4, 437, 305, 280, 937, 731, 241, 917, 548, 270, 625, 825, 669, 779, 428, 278, 700, 671, 742, 297, 18, 760, 798, 435, 860, 588});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy4) {
  s21::list<int> lst1({526, 114, 947, 708, 380, 641, 127, 150, 647, 528, 453, 802, 82, 261, 581, 225, 937, 118, 689, 606});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy5) {
  s21::list<int> lst1({863, 688, 447, 886, 376, 31, 847, 595, 49});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy6) {
  s21::list<int> lst1({252, 407, 715, 123, 213, 434, 554, 283, 804, 549, 662, 977, 529, 93, 759, 185, 204, 547, 910, 70, 908, 233, 237, 535, 332, 525, 16, 947, 897, 402, 634, 357, 358, 270, 563, 279, 708, 519, 161, 145, 486, 414, 518, 594, 963, 254, 965, 238, 913, 928, 287, 161, 679});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy7) {
  s21::list<int> lst1({233, 966, 279, 490, 542, 575, 456, 485, 731, 529, 30, 770, 301, 935, 956, 21, 652, 65, 241, 393, 391, 396, 836, 142, 323, 234, 587, 923, 696, 881, 412, 41, 782, 97, 1, 216, 618, 135, 427, 313, 139, 158, 901, 224, 303, 508, 439, 911, 840, 606, 867, 812, 571, 759, 672, 506, 73, 402, 713, 515, 15, 122, 562, 974, 42, 904, 559, 225, 106, 988, 146, 558, 966, 272, 577, 521, 297, 226, 517, 709, 279});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy8) {
  s21::list<int> lst1({264, 125, 770, 288, 732, 537, 321, 520, 724, 915, 10, 42, 355, 207, 630, 749, 828, 66, 378, 475, 386, 752, 33, 85, 557, 549, 442, 395, 489, 210, 845, 52, 536, 101, 654, 794, 4, 82, 389, 782, 943, 460, 562, 232, 170, 810, 427, 198, 184, 77, 215, 467, 330, 101, 901, 905, 150, 212, 762, 581, 171, 719, 580, 568, 552, 495, 951, 980, 156, 981, 844, 542, 698, 248, 885, 886, 146, 661, 397, 507, 691});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy9) {
  s21::list<int> lst1({652, 427, 107, 339, 890, 533, 336, 495, 227, 946, 60, 270, 667, 880, 165, 674, 334, 208, 112, 682, 533, 587, 665, 663, 622, 263, 412, 407, 462, 267, 440});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy10) {
  s21::list<int> lst1({573, 244, 412, 183, 778, 85, 705, 719, 557, 318, 527, 116, 306, 0, 350, 267, 703, 802, 251, 848});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy11) {
  s21::list<int> lst1({120, 555, 766, 2, 983, 587, 862, 335, 201, 963, 294, 587, 112, 597, 638, 216, 460, 960, 630, 314, 860, 838, 608, 825, 540, 161, 993, 756, 611, 719, 275, 176, 687, 687, 731, 600, 610, 402, 983, 949, 968, 603, 566, 624, 672, 441, 672, 150, 844, 695, 626, 161, 963, 229, 782, 913, 700, 572, 499, 995, 206, 222, 84, 832, 22, 544, 54, 638, 348, 103, 661, 562, 458, 555, 313, 155, 71, 300, 765, 699, 497, 835, 814, 58, 424});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy12) {
  s21::list<int> lst1({237, 431, 221, 134, 761, 311, 889, 432, 837, 523, 631, 770, 10, 653, 540, 104, 770, 106, 227, 222, 488, 468, 477, 755, 255, 295});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy13) {
  s21::list<int> lst1({151, 262, 120, 565, 666, 797, 917, 903, 566, 875, 541, 863, 220, 230, 501, 697, 705, 926, 394, 201, 613, 261, 348, 741, 995, 783, 294, 754, 218, 321, 943, 930, 328, 370, 338, 985, 986, 372, 534, 542, 890, 568, 920, 89, 925, 830, 747, 478, 602, 50, 204, 556, 761, 122, 826, 927, 903, 589, 522, 360, 70, 453, 402, 64, 949, 769, 710, 103});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy14) {
  s21::list<int> lst1({432, 904, 296, 38, 435, 422, 202, 943, 863, 85, 384, 331, 449, 947, 897, 269, 582, 648, 795, 965, 256, 313, 835, 162, 212, 341, 670, 800});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy15) {
  s21::list<int> lst1({788, 151, 790, 823, 728, 353, 760, 190, 134, 112, 280, 823, 771, 932, 750, 267});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy16) {
  s21::list<int> lst1({544, 249, 991, 156, 517, 638, 767, 858, 36, 843, 122, 742, 173, 713, 809, 245, 9, 429, 518, 579, 411, 496, 517, 531, 695, 379, 505, 634, 160, 305, 421, 719, 868, 163, 868, 478, 43, 775, 593, 870, 396, 181, 327, 169, 229, 205, 350, 977, 33, 604, 418, 607, 95, 414, 6, 731, 101, 36, 458, 724, 38, 756, 83, 12, 674, 116, 737, 568, 171, 700, 997, 673, 436, 548, 389, 647, 457, 618, 938, 337});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy17) {
  s21::list<int> lst1({843, 3, 376, 884, 786, 9, 87, 564, 515, 799, 303, 99, 507, 644, 203, 812, 42, 642, 640, 47, 522, 397, 68, 695, 174, 329, 328, 458, 165, 225, 310, 440, 410, 847, 235, 916, 321, 801, 397, 5, 880, 408, 241, 307, 251, 910, 995, 645, 352, 308, 193, 530, 773, 973, 385, 473, 73, 617, 898, 748, 465, 8, 76, 193, 469, 283, 542, 843, 270, 393, 96, 930, 563, 756, 762, 333, 405, 323, 457, 121, 414, 91, 715, 802, 794, 186, 22, 775, 181, 332, 63, 526, 230, 595, 386});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy18) {
  s21::list<int> lst1({963, 529, 861, 283, 512, 237, 377, 698, 703, 456, 554, 516, 255, 987, 220, 665, 410, 104, 787, 632, 666, 329, 116, 994, 321, 534, 446, 754, 856, 219, 904, 432, 552, 630});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy19) {
  s21::list<int> lst1({460, 789, 775, 754, 857, 611, 609, 676, 519, 155, 786, 929, 69, 210, 558, 958, 429, 733, 262, 563, 244, 898, 275, 559, 15, 349, 359, 213, 969, 289, 547, 666, 634, 906, 674, 673, 550, 76, 428, 493, 511, 899, 193, 96, 972, 633, 822, 979, 725, 245, 535, 676, 796, 904, 18, 600, 36, 465, 384, 673, 356, 201, 81, 9, 470, 407, 205, 539, 669, 26, 702, 520, 988, 169, 350, 883, 498, 350, 375, 500, 379, 933, 590, 138, 701, 474, 378, 985, 159, 839, 259, 537, 726, 272, 36, 669, 837, 210, 965, 796});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy20) {
  s21::list<int> lst1({906, 161, 954, 278, 656, 355, 413, 752, 389, 954, 163, 756, 446, 758, 244, 730, 476, 371, 651, 137, 489, 754, 979, 24, 649, 848, 637, 500, 420, 971, 828, 594, 311, 489, 459, 75, 68, 688, 194, 709, 523, 153, 802, 798, 327, 722, 886, 388, 108});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy21) {
  s21::list<int> lst1({563, 909, 478, 373, 487, 207, 736, 442, 509, 399, 888, 676, 709, 124, 525, 280, 581, 82, 61, 173, 754, 344, 717, 658, 165, 473, 670, 572, 895, 157, 807, 156, 57, 147, 512, 192, 528, 962, 606, 702, 743, 699, 759, 924, 426, 325, 594, 521, 107, 492, 555, 592, 794, 531, 372, 801, 292, 816, 706, 598, 822, 850, 99, 728, 955});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy22) {
  s21::list<int> lst1({684, 531, 43, 337, 998, 186, 69, 324, 861, 615, 373, 261, 577, 580});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy23) {
  s21::list<int> lst1({85, 143, 550, 990, 216, 381, 33, 88, 105, 62, 367, 675, 123, 800, 780, 921, 974, 302, 401, 578, 911, 717, 271, 997, 808, 497, 820, 443, 107, 834, 940, 675, 67, 21, 208, 193, 877, 916, 341, 926, 255, 932, 81, 777, 259, 658, 875, 974, 426, 21, 127, 226, 262, 968, 603, 375, 322, 134, 899, 921, 772, 61, 347, 809, 398, 679, 993, 799, 617, 196, 492, 979, 305, 882});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy24) {
  s21::list<int> lst1({633, 401, 459, 194, 413, 366, 6, 907, 101, 800, 972, 468, 336, 393, 381, 76, 716, 502, 312, 94, 231, 87, 51, 580, 505, 391, 310, 655, 878, 646, 472, 110, 550, 202, 252, 690, 146, 226, 282, 398, 914, 33, 810, 576, 159, 916, 123, 191, 409});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy25) {
  s21::list<int> lst1({210, 789, 817, 760, 545, 784, 653, 41, 120, 491, 263, 591, 849, 83, 941, 265, 154, 810, 111, 673, 322, 639, 772, 947, 999, 954, 757, 988, 438, 902});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy26) {
  s21::list<int> lst1({304, 623, 265, 243, 6, 753, 762, 197, 565, 428, 490, 910, 41, 998, 638, 834, 528, 655, 687, 890, 64, 205, 849, 864, 771, 10, 391, 456, 166, 23, 347, 192, 296, 186, 471, 78, 585, 915, 554, 268, 121, 377, 698, 980, 100, 412, 293, 639, 175, 507, 977, 434, 392, 625, 851, 280, 747, 380, 42, 376, 260});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy27) {
  s21::list<int> lst1({765, 64, 537, 348, 915, 749, 317, 875, 673, 841, 800, 4, 317, 15, 643, 182, 732, 142, 573, 200, 451, 151, 837, 668, 605, 160, 442, 452, 306, 21, 465, 470, 124, 303});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy28) {
  s21::list<int> lst1({814, 975, 914, 725, 57, 138, 637, 845, 871, 279, 380, 689, 770, 336, 53, 454, 858, 506, 522, 299, 486, 739, 633, 137, 262, 473, 443, 218, 761, 29, 928, 146, 354, 197, 816, 734, 914, 465, 417, 521, 342, 176, 773});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy29) {
  s21::list<int> lst1({28, 455, 275, 291, 967, 394, 734, 766, 367, 958, 799, 37, 193, 590, 961, 889, 770, 414, 0, 213, 528, 462, 432, 909, 164, 780, 122, 336, 595, 65, 682, 993, 560, 77, 125, 730, 162, 362, 786, 669, 427, 525, 990, 499, 44, 794, 850, 750, 303, 131, 635, 803, 65, 739, 979, 601, 14, 945, 680, 849, 461, 609, 527, 633, 271});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy30) {
  s21::list<int> lst1({167, 924, 934, 304, 766, 967, 59, 985, 821, 975, 11, 345, 260, 401, 681, 162, 38, 372, 97, 443, 158, 527, 235, 811, 978, 272, 528, 465, 918, 846, 664, 248, 795, 54, 967, 692, 81, 280, 347, 698, 171, 264, 629, 354, 728, 367, 880, 584, 644, 836, 923, 935, 41, 689, 744, 624, 754, 139, 168, 290, 237, 169, 909, 762, 655, 432, 897});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy31) {
  s21::list<int> lst1({412, 372, 873, 88, 743, 252, 830, 65, 420, 918, 87, 656, 636, 905, 663, 201, 421, 939, 121, 90, 949, 456, 558, 583, 713, 73, 459, 176, 275, 312, 267, 291, 923, 494, 751, 832, 247, 945, 284, 201, 103, 527, 14, 683, 48, 897, 593, 274, 488, 659, 42, 276, 952, 670, 544, 589, 434, 502, 456, 793, 828, 758, 191, 574, 469, 430, 52, 309, 96, 978, 75, 405, 691, 922, 634, 273, 153, 810, 92, 569, 499});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy32) {
  s21::list<int> lst1({300, 550, 436, 767, 703, 328, 974, 599, 477, 963, 240, 215, 82, 784, 638, 216, 385, 934, 594, 135, 745, 348, 586, 59, 388, 484, 901, 601, 392, 700, 127, 594, 37, 500, 210, 341, 243, 179, 7, 481, 896, 235, 219, 65, 412, 751, 450, 602, 257, 682, 34, 907, 508, 388, 728, 8, 436, 821, 631, 814, 724, 410, 207, 474, 184, 674, 807, 349, 40, 59, 583, 196, 524, 594, 1, 610, 953, 255, 80, 326, 485, 10, 168, 357, 324, 750, 971, 233, 500, 41, 366, 248});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy33) {
  s21::list<int> lst1({699, 35, 557, 378, 117, 827, 505, 76, 174, 215, 157, 958, 813, 118, 516, 722, 509, 397, 305, 386, 540, 828, 742, 844, 803, 199, 427, 444, 842});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy34) {
  s21::list<int> lst1({567, 466, 626, 45, 139, 975, 780, 188, 992, 228, 42, 639, 216, 451});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy35) {
  s21::list<int> lst1({731, 133});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy36) {
  s21::list<int> lst1({220, 20, 220, 884, 349, 893, 799, 401, 591});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy37) {
  s21::list<int> lst1({950, 974, 869, 906, 17, 212, 961, 570, 763, 609, 800, 802, 837, 652, 213, 739, 352, 963, 538, 321, 903, 377, 386, 167, 795, 47, 513, 421, 919, 634, 474, 171, 310, 653, 88, 320, 207, 300, 367, 848, 591, 314, 431, 385, 849, 980, 195, 596, 568, 710, 767, 650, 711, 142, 789, 896, 719, 275, 86, 256, 666, 561, 353, 889, 673, 724, 285, 97, 612, 576, 184, 464, 748, 239, 857, 633, 507, 875, 927, 268, 153, 324, 997, 796, 404, 638, 211, 640, 22, 203, 339, 914});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy38) {
  s21::list<int> lst1({136, 906, 691, 18, 795, 525, 67, 566, 586, 427, 513, 136, 541, 364, 3, 565, 975, 483, 156, 308, 995, 937, 332, 8, 127, 952, 561, 445, 261, 290, 333, 131, 138, 185, 614, 246, 455, 633, 310, 525, 684, 569, 479, 132, 45, 50, 30, 480, 60, 557, 280, 566, 518, 985, 917, 572, 133, 206, 38, 390, 442, 203, 308, 358, 945, 31, 461, 236, 583, 143, 96, 208, 344, 980, 576, 629, 930, 487, 660, 209, 845, 73, 744, 636, 911, 863, 354});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy39) {
  s21::list<int> lst1({788, 991, 610, 255, 677, 263, 479, 233, 160, 180, 989, 755, 95});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy40) {
  s21::list<int> lst1({226, 77, 159, 237, 473, 999, 762, 15, 703, 50, 68, 930, 655, 542, 930, 676, 740, 2, 901, 184, 782, 826, 344, 20, 360, 152, 102, 929, 559, 16, 664, 39, 377, 759, 272, 81, 49, 148, 208, 807, 489, 291, 126, 648, 107, 998, 374, 913, 261, 271, 216, 774, 136, 580, 21, 803, 896, 443, 786, 259, 347, 641, 523, 613, 933});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy41) {
  s21::list<int> lst1({26, 402, 670, 9, 496, 819, 469, 442, 28, 126, 321, 869, 5, 889, 768});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy42) {
  s21::list<int> lst1({560, 727, 31, 249, 719, 439, 659, 13, 900, 903, 654, 118, 536, 527, 119, 973, 712, 434, 283, 958, 765, 611, 774, 694, 491, 507, 92, 440, 726, 204, 594, 917, 492, 264, 376, 420, 763, 442, 810, 367, 462, 189, 688, 912, 248, 740, 942, 523, 202, 887, 95, 993, 119, 563, 862, 736, 781, 729, 670, 808, 730, 28, 925, 657, 800, 511, 678, 552, 784, 914, 833, 504, 107, 275, 189, 188, 318, 664, 956, 461});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy43) {
  s21::list<int> lst1({659, 496, 631, 332, 853, 160, 839, 627, 314, 811, 82, 841, 599, 430, 10, 383, 591, 678, 17, 447, 652, 954, 796, 93, 54, 716, 289, 73, 166, 878, 550, 776, 592, 635, 212, 29, 296, 821, 778, 196, 972, 739, 63, 248, 944, 10, 137, 394, 106, 974, 289, 424, 678, 155, 709, 371});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy44) {
  s21::list<int> lst1({63, 804, 341, 194, 550, 73, 854, 85});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy45) {
  s21::list<int> lst1({482, 867});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy46) {
  s21::list<int> lst1({911, 473, 907, 940, 457, 323, 172, 571, 970, 402, 920, 231, 884, 61, 884, 659, 581, 865, 180, 969, 847, 509, 979, 497, 382, 651, 713, 457, 831, 30, 38, 123, 637, 652, 659, 62, 868, 273, 896, 882, 622, 770, 310, 51, 619});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy47) {
  s21::list<int> lst1({255, 999, 102, 829, 236, 745, 376, 780, 469, 494, 352, 410, 316, 538, 115, 197, 509, 611, 615, 193, 773, 951, 888, 790, 272, 816, 558, 211, 705, 330, 730, 675, 157, 393, 806, 455, 991, 215, 392, 796, 419, 650, 80, 764, 358, 885, 288, 266, 676, 993, 355, 496, 602, 72, 758, 408, 243, 38, 28, 170, 883, 138, 266});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy48) {
  s21::list<int> lst1({893, 509, 179, 704, 963, 917, 734, 403, 763, 796, 447, 917, 336, 93, 367, 989, 637, 429, 910, 204, 500, 11, 282, 507, 362, 783, 823, 497, 391, 968, 141, 208, 936, 425, 960, 958, 603, 952, 545, 930, 219, 95, 901, 552, 689, 745, 859, 675, 977, 353, 725, 431, 203, 374, 267, 571, 200, 699, 927, 785, 210, 178, 917, 758, 127, 764, 58, 673, 108, 618});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy49) {
  s21::list<int> lst1({532, 228, 480, 466, 456, 617, 262, 496, 908, 803, 190, 392, 736, 828, 835, 667, 825, 384, 247, 261, 627, 747, 252, 684, 817, 590, 312, 541, 238, 109, 312, 909, 195, 374, 649, 30, 920, 36, 371, 141, 928, 107, 65, 782, 274, 949, 373, 506, 962, 363, 16, 512, 119, 400, 199, 685, 168, 873, 162, 546});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy50) {
  s21::list<int> lst1({657, 649, 231, 106, 952, 333, 852, 340, 282, 485, 103, 196, 727, 352, 608, 608, 426, 280, 657, 489, 72, 984, 905, 291, 285, 951, 219, 852, 950, 23, 851, 579, 6, 369, 599, 576, 220, 987, 23, 940, 207, 393, 786, 35, 64, 675, 258, 740, 949, 42, 634, 396, 211, 964, 562, 982, 802, 290, 468, 626, 913, 430, 280, 673, 147, 193, 523, 779, 310, 972, 867, 137, 934, 76, 905, 996, 882, 373, 566, 699, 844, 117, 416, 955, 640, 429, 775, 212, 666, 56, 526, 216, 249, 491, 276});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy51) {
  s21::list<int> lst1({789, 185, 931, 301, 240, 361, 483, 640, 860, 14, 184, 873, 811, 254});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy52) {
  s21::list<int> lst1({940, 5, 445, 975, 31, 450, 963, 178, 523, 831, 3, 854, 821, 416, 233, 78, 994, 828, 759, 668, 668, 958, 463, 649, 690, 779, 157, 758, 398, 575, 908, 138, 384, 262, 785, 750, 775, 19, 835, 844, 421, 346, 617, 2});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy53) {
  s21::list<int> lst1({36});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy54) {
  s21::list<int> lst1({747, 752, 922, 75, 65, 610, 951, 176, 736, 536, 846, 184, 702, 939, 785, 686, 190, 554, 229, 856, 24, 671, 462, 963, 546, 958, 526, 10, 110, 60, 98, 893, 524, 762, 592, 831, 621, 369, 171, 642, 879, 140, 596, 90, 161, 925, 175, 329, 506, 466, 845, 464, 594, 516, 240, 980, 812, 418, 462, 247, 890, 366, 260, 662, 145, 165, 610, 172, 319, 481, 798, 655, 705, 292, 266, 193, 799, 233, 19});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy55) {
  s21::list<int> lst1({978, 40, 491, 411, 337, 891, 28, 694, 72, 345, 682});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy56) {
  s21::list<int> lst1({971, 278, 152, 643, 736, 496, 44, 276, 132, 427, 272, 607, 318, 846, 456, 108, 906, 956, 797, 708, 787, 325, 379, 174, 380, 987, 999, 108, 911, 80, 296, 895, 837, 324, 461, 583, 57, 25, 997, 91, 144, 514, 238, 457, 183, 226, 104, 400, 567, 396, 565, 955, 739, 846, 828, 808, 101, 340, 205, 993, 961, 478, 887, 754, 952, 597, 54, 332, 266, 407, 955, 52, 495, 35, 215, 72, 138, 593, 694});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy57) {
  s21::list<int> lst1({657, 45, 103, 572, 469, 9, 427, 739, 15, 689, 836, 697, 942, 179, 398, 561, 946, 450, 19, 592, 794, 277, 452, 183, 133, 251, 741, 233, 81, 655, 10, 483, 896, 616, 723, 196, 181, 482, 871, 446, 840, 475, 585, 981, 859, 685, 755, 66, 416, 488, 968, 129, 482, 650, 98, 255, 631, 422, 878, 327, 711, 237, 86, 526, 107, 800, 29, 183, 965, 482, 681, 743, 832, 488, 495, 842, 46, 706, 419, 927, 91, 489, 283, 560, 600, 118, 779, 429, 871, 255, 273});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy58) {
  s21::list<int> lst1({127, 382, 553, 538, 725, 646, 387, 816, 520, 254, 999, 703, 58, 669, 69, 749, 285, 799, 90, 436, 662, 357, 818, 602, 482, 22, 375, 92, 90, 375, 12, 394, 324, 50, 607, 593, 252, 110, 550, 394, 843, 456, 754, 425, 853, 408, 56, 471, 326, 247, 253, 858, 708, 557, 463, 24, 784, 205, 610, 803, 514, 222, 927, 455, 665});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy59) {
  s21::list<int> lst1({498});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy60) {
  s21::list<int> lst1({72, 164, 543, 279, 215, 409, 725, 630, 161, 463, 581, 649, 244, 227, 454, 998, 357, 458, 531, 485, 669, 137, 868, 485, 97, 30, 106, 157, 959, 567, 577, 174, 966, 860, 467, 11, 264, 695, 272, 222, 27, 326, 544, 230, 445, 977, 254, 148, 564, 726, 94, 825, 369, 468, 906, 329, 848, 427, 666, 990});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy61) {
  s21::list<int> lst1({75, 849, 450, 68, 970, 656, 35, 389, 467, 269, 167, 829, 68, 454, 515, 20, 177, 681, 434, 797, 933, 53, 255, 637, 80, 244, 754, 952, 11, 17, 963, 489, 570, 205, 841, 265, 768, 322, 824, 734, 700, 573, 878, 263, 494, 851, 84, 719, 312, 664, 576, 614, 907, 710, 550, 585, 516, 686, 461, 792, 705, 160, 324, 886, 197, 340, 949, 191, 978, 393, 260, 358, 479, 821, 795, 17, 358, 228, 816, 258, 719, 965, 639, 955, 232, 64, 221, 411, 712, 872, 325, 527, 305, 719});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy62) {
  s21::list<int> lst1({245, 195, 386, 332, 364, 579, 579, 959, 907, 379, 556, 112, 119, 549, 31, 781, 177, 331, 355, 483, 753, 876, 364, 473, 610, 251, 22, 778, 391, 46, 578, 10, 980, 433, 795, 864});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy63) {
  s21::list<int> lst1({917, 919, 560, 585, 565, 809, 590, 426, 500, 826, 341, 381, 476, 857, 722, 120, 424, 697, 729, 807, 734, 999, 537, 710, 891, 598, 211, 834, 438, 485, 108, 986, 37, 79, 212, 796, 913, 474, 991, 610, 214, 161, 13, 42, 775, 574, 616, 29, 695, 513, 48, 759, 992, 89, 670, 230, 965, 308, 602, 852, 228, 722, 467, 843, 743, 516, 506, 846, 607, 800, 481, 27, 406, 884, 346, 31, 379, 977});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy64) {
  s21::list<int> lst1({681, 283, 28, 473, 141, 12, 484, 352, 737, 621, 928, 265, 70, 597, 915, 873, 959, 281, 478, 219, 620, 125, 700, 823, 871, 507, 821, 199, 428, 516, 266, 592, 460, 771, 123, 350, 84, 221, 260, 628, 68, 132, 24, 563, 44, 865, 804, 290, 486, 367, 650, 748, 765, 597, 64, 69, 104, 971, 75, 978, 471, 674, 29, 465, 880, 827, 266, 736, 108, 9, 210, 669, 999, 331, 369, 732, 690, 284, 728, 11, 125, 492, 385, 153, 585, 793, 283, 461, 444, 498, 930, 843, 402, 712, 896, 206, 230, 723, 460, 650});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy65) {
  s21::list<int> lst1({242, 617, 242, 991, 42, 533, 996, 472, 295, 728, 279, 573, 294, 19, 922, 290, 892, 87, 205, 737, 90, 443, 0, 60, 146, 507, 907, 897, 116, 283, 668, 394, 0, 48, 965, 797, 797, 495, 495, 301, 745, 661, 53, 154, 754, 231, 910, 954, 711, 932, 136});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy66) {
  s21::list<int> lst1({508, 377, 427, 932, 550, 891, 238, 34, 656, 604, 529, 524, 855, 934, 141, 542, 14, 429, 119, 871, 647, 280, 640, 378, 974, 361, 196, 97, 29, 366, 781, 839, 174, 794, 589, 722, 913, 376, 713, 431, 687, 199, 658, 910, 846, 147, 615, 883, 616, 563, 226, 115, 19, 997, 553, 945, 663, 681, 746, 150, 221, 259, 450, 881, 458, 993, 32, 100, 904, 749});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy67) {
  s21::list<int> lst1({927, 893, 836, 165, 279, 316, 315, 435, 539, 300, 803, 189, 267, 205, 459, 649, 698, 464, 876, 210, 251, 298, 397, 723, 814, 167, 441, 117, 208, 443, 978, 216, 429, 948, 501, 145, 46, 702, 300, 813, 44, 47, 684, 531, 456, 860, 852, 105, 833, 528, 478, 20, 739, 404, 211, 489, 182, 774, 575, 895, 843, 461, 972, 794, 919, 472, 436, 457, 26, 67, 785, 528, 557, 47, 17, 77, 644, 698, 425, 870, 763, 695, 573});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy68) {
  s21::list<int> lst1({542, 382, 974, 761, 909, 596, 230, 90, 401, 862, 424, 463, 990, 90, 903, 12, 686, 511, 741, 8, 646, 634, 379, 18, 861, 45, 643, 317, 398, 286, 650, 276, 44, 557, 276, 944, 757, 47, 708});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy69) {
  s21::list<int> lst1({437, 86, 721, 506, 415, 384, 191, 393, 156, 100, 983, 111, 588, 956, 450, 24, 522, 501, 80, 956, 848, 79, 151, 530, 981, 533, 257, 353, 751, 970, 552, 669});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy70) {
  s21::list<int> lst1({603, 825, 388, 137, 583, 324, 999, 653, 733, 602, 866, 47, 209, 848, 922, 549, 960, 48, 698});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy71) {
  s21::list<int> lst1({230, 31, 460, 988, 782, 47, 773, 43, 107, 87, 524, 39, 863, 321, 215, 916, 887, 921, 297, 607, 247, 417, 21, 849, 136, 491, 63, 257, 1, 418, 367, 133, 249, 303, 235, 612, 885, 790, 288, 259, 809});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy72) {
  s21::list<int> lst1({464, 122, 316, 923, 857, 267, 626, 245, 970, 81, 565, 267, 616, 43, 609, 190, 918, 958, 7, 185, 98, 157, 396, 858, 353, 456, 905, 612, 904, 706, 933, 813, 217, 668});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy73) {
  s21::list<int> lst1({52, 598, 191, 584, 862, 455, 487, 999, 166, 194, 110, 981, 34, 658, 946, 426, 307, 297, 904, 744, 412, 38, 357, 396, 825, 503, 253, 746, 764, 206, 279, 604, 843, 202, 291, 665, 17, 169, 79, 737, 766, 537, 719, 838, 620, 674, 336, 954, 62, 960, 755, 298, 710, 240, 890, 547, 356, 66, 441, 611, 466, 252, 808, 674, 415, 8, 555, 542, 653, 998, 379, 946, 337, 579, 153, 268, 981, 468, 887, 880, 199, 985, 610, 549, 230, 42, 497, 548, 476, 235, 77, 432, 902, 58, 752, 844, 401, 160});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy74) {
  s21::list<int> lst1({46, 663, 530, 558, 688, 977, 532, 736, 590, 124, 376, 931, 985, 627, 272, 72, 195, 503, 484, 48, 214, 974, 27, 167, 868});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy75) {
  s21::list<int> lst1({571, 690, 792, 909, 923, 952, 608, 317, 881, 109, 148, 24, 389, 159, 585, 243, 369, 662, 827, 656, 684, 464, 604, 863, 673, 98, 270, 130, 563, 295, 224, 28, 201, 613, 116, 978, 351, 15, 543, 894, 861, 156, 261, 154, 779, 857, 418, 911, 659, 63, 95, 288, 16, 817, 25, 298, 384, 866, 497, 649, 920, 164, 628, 659, 104, 975, 615, 417, 757, 137});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy76) {
  s21::list<int> lst1({518, 286, 107, 7, 968, 86, 639, 659, 927, 930, 318, 824, 772, 644, 278, 645, 369, 100, 661, 989, 696, 369, 809, 637, 832, 266, 281, 204, 446, 979, 393, 731, 948, 622, 942, 886, 459, 675, 247, 346, 674, 907, 641, 483, 523, 636, 124, 536, 415, 602, 462, 270, 728, 467, 846, 133, 823, 864, 213, 18, 788, 647, 260, 458, 243, 734, 269, 176, 415, 115, 792, 190, 654, 847, 171, 515, 639, 362, 859, 293});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy77) {
  s21::list<int> lst1({185, 707, 657, 28, 435, 980, 574, 342, 853, 189, 290, 559, 224, 382, 46, 779, 805, 965, 128, 754, 417, 17, 673, 434, 420, 194, 987, 146, 638, 680, 79, 699, 7, 423, 622, 514, 497, 36, 804, 383, 7, 282, 988, 86, 253, 694, 510, 502, 175, 185, 718, 664, 866, 358, 710, 533, 320, 28, 399, 339, 597, 430, 653, 275, 269, 763, 824, 148, 277, 903, 876, 824, 43, 467, 283, 912, 225, 22, 253, 910, 697, 997, 556, 240, 790, 556, 724, 91, 65, 114, 437, 981, 48, 867, 919, 440});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy78) {
  s21::list<int> lst1({387, 438, 287, 958, 258, 758, 435, 580, 520, 311, 516, 973, 894, 153, 604, 13, 40, 164, 553, 486, 1, 544, 963, 655, 540, 242, 856, 50, 470, 42, 764, 907, 362, 345, 196, 125, 110, 330, 84, 807, 565, 885, 148, 300, 124, 363, 817, 560, 923, 678, 108, 837, 719});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy79) {
  s21::list<int> lst1({645, 643, 700, 33, 574, 50, 349, 67, 347, 180, 399, 128, 777, 761, 880, 163, 214, 514, 725, 836, 818, 827, 686, 68, 302, 962, 655, 652, 102, 673, 247, 970, 196, 126, 951, 668, 522, 359, 845, 869, 750, 626, 507, 409, 577, 105, 488, 839, 706, 618, 565, 914, 408, 94, 497, 171, 673, 474, 656, 508, 428, 844, 866, 188, 368, 445, 250, 157, 708});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy80) {
  s21::list<int> lst1({220, 827, 36, 277, 275, 128, 534, 404, 726, 631, 633, 878, 292, 700, 128, 267, 232, 779, 508, 275, 629, 511, 462, 597, 834, 175, 387, 787, 979});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy81) {
  s21::list<int> lst1({690, 74, 950, 583, 382, 442, 836, 339, 437, 750, 193, 803, 388, 527, 380, 180, 449, 552, 347, 3, 202, 352, 660, 269, 772, 540, 67, 466, 103, 126, 256, 710, 188, 982, 784, 652, 578, 790, 282, 583, 61, 216, 54, 694, 106, 606, 71, 822, 76, 290, 500, 534, 135, 41, 378, 861, 881});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy82) {
  s21::list<int> lst1({933, 478, 535, 684, 47, 618, 277, 922, 550, 509, 71, 580, 811, 430, 12, 249, 398, 736, 193, 762, 776, 382, 471, 7, 596, 181, 474, 981, 898, 840, 838, 251, 637, 280, 210, 224, 174, 273, 179, 70, 687, 577, 78, 712, 193, 304, 377, 265, 973, 483, 119, 298, 472, 606, 983, 332, 652, 220, 218, 356, 961, 579, 779, 689, 434, 745, 189, 795, 445, 905, 100, 891, 128, 948, 370, 626, 246, 476, 29, 857, 489, 482, 219, 347, 955, 571, 669, 258, 626, 227, 382, 594, 459, 62, 915, 570, 989, 593, 841, 912});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy83) {
  s21::list<int> lst1({76, 966, 832, 9, 881, 451, 703, 323, 974, 604, 859, 296, 440, 192, 178, 231, 942, 623, 385, 143});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy84) {
  s21::list<int> lst1({801, 629, 585, 221, 288, 406, 382, 906, 63, 368, 456, 16, 342, 795, 595, 743, 184, 783, 955, 422, 651, 897, 313, 62, 240, 565, 99, 155, 862, 699, 210, 440, 597, 743, 724, 455, 956, 295, 421, 135, 94, 76, 837, 809, 604, 24, 107, 117});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy85) {
  s21::list<int> lst1({26, 931, 305, 651, 295, 259, 977, 303, 651, 32, 150, 941, 460, 636, 124, 433, 54, 180, 905, 204, 899, 780, 680, 604, 287, 447, 1, 673, 111, 133, 149, 633, 730, 3, 255, 610, 389, 892, 681, 606, 450, 128, 35});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy86) {
  s21::list<int> lst1({27, 679, 233, 101, 755, 277, 646, 204, 291, 123, 791, 703, 925, 728, 64});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy87) {
  s21::list<int> lst1({100, 539, 108, 442, 407, 275, 882, 859, 644, 707, 406, 526, 287, 482, 689, 241, 735, 972, 728, 635, 765, 67, 716, 732, 212, 663, 587, 375, 920, 117, 697, 417, 854, 247, 898, 134, 712, 245, 499, 454, 703, 827, 919, 689, 877, 819, 264, 863, 49, 688, 642, 197, 820, 400, 210, 419, 454});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy88) {
  s21::list<int> lst1({728, 164, 622, 30, 405, 390, 17, 597, 899, 692, 461, 41, 741, 781, 368, 847, 260, 570, 836, 217, 797, 655, 363, 231, 923, 60, 55, 484, 652, 417, 939, 505, 627, 844, 260, 945, 827, 656, 530, 775, 204, 125, 204, 553, 749, 336, 516, 918, 773, 452, 651, 58, 558, 117, 989, 679, 941, 838, 898, 541, 721, 525, 987, 484, 589, 777, 549, 958, 867, 736, 747, 243, 262, 414, 943, 947, 775, 821, 339, 789, 366, 494, 595, 138, 954});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy89) {
  s21::list<int> lst1({660, 223, 901, 988, 236, 848, 334, 165, 687, 498, 472, 965, 626, 730, 322, 524, 340, 156, 609, 708, 253, 932, 203, 789, 285, 856, 144, 157, 128, 267, 899});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy90) {
  s21::list<int> lst1({74, 257, 875, 517, 789, 691, 780, 599, 627, 900, 715, 918, 933, 55, 301, 643, 397, 1, 658, 410, 54, 971, 556, 193, 711, 11, 768, 742, 801, 664, 733, 796, 861, 186, 577, 80, 732, 116, 254, 314, 243, 756, 433, 111, 71, 186, 984, 3, 585, 990, 522, 310, 395, 175, 221, 530, 581, 906, 54, 393, 291, 120, 582, 994, 514, 450, 973, 915, 125, 530, 950, 57, 550, 780, 265, 510, 111, 731, 24});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy91) {
  s21::list<int> lst1({727, 221, 426, 898, 348, 890, 757, 328, 501, 213, 48, 65, 66, 517, 585, 555, 480, 25, 349, 465, 885, 18, 160, 938, 327, 586, 34, 811, 806, 48, 770, 173, 807, 480, 178, 321, 902, 26, 594, 860, 996, 933, 847, 541, 401, 249, 66, 940, 103, 867, 842, 90, 526, 449, 655, 595, 478, 705, 949, 714, 145, 327, 185, 863, 999, 547, 307, 32, 56, 601, 201, 317, 603, 93, 574, 72, 39, 809, 436, 875, 954, 132});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy92) {
  s21::list<int> lst1({219, 162, 21, 25, 481, 339, 301, 209, 120, 669, 578, 748, 791, 192, 286, 575, 777, 336, 431, 246, 84, 213, 512, 258, 652, 696, 466, 114, 94, 804, 680, 12, 337, 530, 420, 970, 616, 106, 90, 660, 546, 915, 628, 355, 567, 112, 281, 595, 491, 596, 273, 302, 763, 508, 859, 714, 88, 309, 52, 261, 324, 781, 303, 397, 444});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy93) {
  s21::list<int> lst1({533, 858, 709, 983, 229, 479, 923, 219, 222, 230, 142, 116, 486, 946, 329, 706, 195, 719, 536, 271, 688, 635, 398, 81, 75, 388, 549, 491, 879});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy94) {
  s21::list<int> lst1({864, 333, 941, 819, 751, 697, 769, 239, 901, 158, 135});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy95) {
  s21::list<int> lst1({108, 513, 494, 390, 231, 270, 115, 879, 953, 982, 27, 341, 236, 750, 13, 210, 585, 219, 796, 940, 312, 155, 54, 877, 97, 212, 816, 870, 920, 181, 319, 895, 210, 16, 31, 225, 558, 102, 389, 50, 26, 353, 230, 669, 189, 165, 937, 307, 663, 674, 516, 599, 360, 619, 508, 40, 617, 845, 132, 843, 930, 955, 735, 574, 220, 436, 272, 653, 31, 775, 722, 560, 67, 452, 694, 439, 413, 21, 24, 185, 97, 149, 748, 269, 667, 91, 642, 594, 436, 188, 723, 826, 371, 678, 41});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy96) {
  s21::list<int> lst1({485, 739, 28, 14, 506, 530, 629, 258, 71, 754, 179, 569, 89, 170, 593, 636, 214, 468, 911, 323, 52, 574, 682, 995, 140, 885, 801, 299, 209, 932, 103, 257, 3, 589, 650, 598, 574, 482, 257, 937, 600, 759, 305, 969, 39, 833, 197, 240, 730, 47, 915, 377, 307, 845, 982, 799, 252, 675});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy97) {
  s21::list<int> lst1({557, 157, 505, 815, 196, 368, 368, 832, 487, 102, 819, 407, 148, 125, 731, 627, 451, 240, 573, 647, 306, 54, 748, 867, 455, 46, 582, 577, 534, 729, 63, 219, 352, 11, 563, 811, 868, 669, 212, 21, 313, 545, 865, 56, 326, 84, 684, 473, 100, 976, 339, 180, 103, 806, 420, 800, 995, 240, 975, 964, 856, 210, 221, 540, 455, 48, 895, 526, 199, 155, 440, 783, 50, 97, 997, 169, 893, 911});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy98) {
  s21::list<int> lst1({289, 472, 690, 263, 135, 307, 838, 471, 891, 237, 930, 329, 453, 690, 263, 89, 844, 154, 796, 323, 610, 616, 21, 835, 835, 459, 695, 571, 565, 280, 352, 42, 945, 775, 914, 369, 815, 949, 998, 121, 737, 260, 511, 992, 435, 925, 872, 286, 20, 621, 250, 899, 145, 461, 223, 300, 40, 152, 233, 736, 856, 63, 554, 100, 428, 426, 981});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Copy99) {
  s21::list<int> lst1({503, 919, 613, 510, 212, 452, 724, 50, 0, 994, 970, 195, 14, 628, 800, 542, 724, 723, 583, 86, 505, 831});
  s21::list<int> lst2(lst1);
  EXPECT_EQ(lst1.size(), lst2.size());
  auto it1 = lst1.begin();
  auto it2 = lst2.begin();
  for (; it1 != lst1.end() && it2 != lst2.end(); ++it1, ++it2) {
    EXPECT_EQ(*it1, *it2);
  }
  EXPECT_TRUE(it1 == lst1.end() && it2 == lst2.end());
}

TEST(ListTest, Assign0) {
  s21::list<int> lst1({453, 899, 57, 789, 852, 879, 625, 717, 602, 912, 868, 994, 619, 229, 880, 399, 944, 649, 197, 246, 217, 276, 114, 949, 710, 299, 151, 395, 232, 858, 436, 386, 520, 6, 989, 348, 187, 612, 815});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 39);
}

TEST(ListTest, Assign1) {
  s21::list<int> lst1({600, 834, 709, 269, 540, 252, 652, 349, 408, 428, 93, 517});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 12);
}

TEST(ListTest, Assign2) {
  s21::list<int> lst1({552, 111, 472, 62, 618, 852, 133, 63, 636, 1, 712, 426, 604, 121, 25, 484, 671, 743, 398, 570, 103, 449, 434, 485, 125, 114, 167, 477, 28, 119, 535, 706, 8, 460, 886, 705, 440, 550, 964, 115, 73, 154, 942, 549, 633, 791});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 46);
}

TEST(ListTest, Assign3) {
  s21::list<int> lst1({159, 281, 907, 903, 655, 758, 919, 258, 452, 322, 769, 852, 118, 978, 162, 734, 371, 264, 343, 79, 298, 587, 96, 193});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 24);
}

TEST(ListTest, Assign4) {
  s21::list<int> lst1({28, 908, 184, 349, 894, 447, 794, 415, 278, 543, 829, 137, 864, 864, 524, 151, 708, 812, 788, 274, 244, 203, 699, 718, 908, 513, 702, 680, 172, 996, 974, 521, 362, 172, 212, 364, 110, 760, 568, 637, 485, 941, 190, 777, 721, 916, 302, 207, 202, 12, 400, 605, 706, 567, 877, 135, 633});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 57);
}

TEST(ListTest, Assign5) {
  s21::list<int> lst1({207, 91, 491, 969});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 4);
}

TEST(ListTest, Assign6) {
  s21::list<int> lst1({34, 511, 277, 990, 26, 507, 40, 874, 579, 592, 422, 55, 783, 371, 39, 541, 174, 556, 444, 325, 721, 726, 649, 229, 775, 464, 392, 146, 161, 261, 704, 757, 591, 922, 822, 472, 93, 406, 664, 311});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 40);
}

TEST(ListTest, Assign7) {
  s21::list<int> lst1({332, 984, 849, 907, 604, 828, 828, 907, 363, 460, 689, 399, 267, 213, 267, 870, 540, 856, 275, 708, 78, 198, 964, 437, 45, 479, 866, 439, 961, 576, 984, 793, 795, 970, 92, 609, 202, 928, 371, 551, 436, 686, 841, 682, 498, 853, 76, 591, 458, 96, 233, 102, 290, 836, 416, 323, 726, 282, 85, 151, 185, 184, 326, 562, 344, 3, 298, 820, 484, 466, 304, 93, 790});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 73);
}

TEST(ListTest, Assign8) {
  s21::list<int> lst1({14, 396, 723, 279, 487, 41, 667, 309, 587, 379, 712, 714, 107, 943, 129, 487, 109, 873, 63, 563, 699, 118});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 22);
}

TEST(ListTest, Assign9) {
  s21::list<int> lst1({761, 875, 147, 693, 13, 210, 596, 289, 473, 309, 686, 207, 250, 293, 157, 434, 3, 128, 170, 504, 176, 435, 759, 110, 673, 664, 779, 500, 734, 816, 53, 617, 270, 870, 91, 249, 395, 745, 72, 629, 295, 746, 460, 585, 842, 972, 153, 825, 790, 112, 729, 729, 138});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 53);
}

TEST(ListTest, Assign10) {
  s21::list<int> lst1({161, 512, 776, 278, 14, 874, 144, 655, 399, 682, 40, 27, 878, 104, 56, 952, 859, 189, 743, 906, 266, 870, 332, 560, 454, 671});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 26);
}

TEST(ListTest, Assign11) {
  s21::list<int> lst1({444, 276, 164, 382, 725, 67, 620, 439, 960, 459, 656, 795, 699, 152, 4, 787, 195, 749, 365, 800, 526, 704, 858, 470, 955, 894, 924, 128, 799, 534, 195, 747, 286, 392, 0, 23, 774, 695, 31, 846, 257, 620});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 42);
}

TEST(ListTest, Assign12) {
  s21::list<int> lst1({98, 424, 245, 800, 63, 308, 355, 491, 543, 885, 595, 907, 323, 762});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 14);
}

TEST(ListTest, Assign13) {
  s21::list<int> lst1({589, 196, 772, 476, 469, 613, 592, 567, 963, 14, 145, 450, 914, 267, 188, 656, 605, 162, 714, 496, 677, 142, 75, 623, 997, 83, 149, 946, 913, 817, 775, 897, 388, 188, 561, 505, 301, 926, 658, 19, 480, 650, 612, 395, 617, 399, 62, 693, 663, 664, 957, 209, 512, 555, 341, 515, 818, 18, 536, 789, 956, 681, 562, 564, 847, 198, 780, 229, 757, 586, 820, 405, 434, 481, 664, 718, 541, 565, 353, 850, 636, 272, 990, 805, 741, 484, 778, 470, 44});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 89);
}

TEST(ListTest, Assign14) {
  s21::list<int> lst1({238, 302, 454, 605, 245, 337, 307, 123, 541, 626, 817, 563, 110, 724, 989, 357, 618, 565, 271, 57, 583, 61, 280, 564, 542, 864, 904, 958, 193, 207, 196, 778, 289, 850, 672, 582, 813, 510, 843, 189, 245, 67, 723, 381, 273, 704, 304, 396, 316, 174, 376, 67, 447, 2, 587, 501, 56, 193, 432, 94, 106, 108, 405, 275, 878, 847, 586, 836, 172, 633, 356, 8, 871, 302, 530, 146, 833, 166, 750, 829, 541, 646, 586, 431, 768, 596, 177, 0, 236, 117, 957, 784, 968, 190});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 94);
}

TEST(ListTest, Assign15) {
  s21::list<int> lst1({659, 138, 388, 330, 551, 108, 387, 377, 289, 806, 803, 783, 120, 52, 223, 479, 969, 872, 699, 210, 674, 137, 843, 84, 723, 208, 739, 813, 281, 178, 376, 352, 256, 532, 152, 249, 796, 812, 51, 895, 255, 472, 533, 733, 712, 551, 649, 36, 31, 882, 511, 809, 221, 959, 649, 76, 80, 396, 511, 876, 843, 990, 614, 27, 423, 858, 146, 352, 37, 234, 842, 640, 561, 810, 738, 250, 691, 526, 208, 242, 986, 354, 748, 308, 70, 44});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 86);
}

TEST(ListTest, Assign16) {
  s21::list<int> lst1({507, 124, 786, 598, 241, 430, 420, 421, 890, 65, 158, 151, 638, 831, 285, 724, 928, 336, 545, 370, 273, 39, 443, 657, 456, 920, 939, 553, 827, 390, 649, 984, 489, 622, 557, 675, 603, 824, 436, 246, 999, 766, 788, 603, 275, 327, 846, 619, 574, 704, 606, 224, 734, 9, 88, 65, 29, 592, 239, 612, 58, 331, 567, 441, 484, 502, 825, 74, 860, 691, 36, 311, 722, 868, 893, 391, 205, 139, 985, 500, 869});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 81);
}

TEST(ListTest, Assign17) {
  s21::list<int> lst1({926, 51, 117});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 3);
}

TEST(ListTest, Assign18) {
  s21::list<int> lst1({302, 952, 665, 825, 934, 527, 219, 539, 20, 904, 337, 979, 341, 85, 220, 889, 604, 915, 549, 682, 610, 95, 392, 693, 166, 671, 82, 648, 872, 202, 803, 35, 788, 671, 613, 514, 739, 439, 979, 223, 371, 374, 865, 483, 735, 471, 431, 161, 797, 262, 425, 532, 215, 603, 787, 175, 675, 905, 751, 15, 676, 785, 70, 741, 810, 415, 364, 621, 705, 894, 11, 127, 67, 245, 155, 610, 322, 542, 354, 647, 873, 461, 938, 377, 483, 566, 49, 341, 607, 35, 615});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 91);
}

TEST(ListTest, Assign19) {
  s21::list<int> lst1({28, 676, 680, 75, 708, 793, 495, 530, 751, 517, 169, 277, 950, 120, 879, 237, 728, 774, 269, 605, 75, 593, 375, 841, 361, 650, 276, 88, 714, 313, 940, 489, 494, 54, 917, 906, 285, 681, 978, 641, 152, 574, 352, 977, 612, 80, 826, 690, 428, 946, 820, 20, 924, 32, 269, 619, 334, 421});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 58);
}

TEST(ListTest, Assign20) {
  s21::list<int> lst1({898, 186, 154, 505, 945, 130, 202, 562, 292, 387, 101, 912, 100, 67, 387});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 15);
}

TEST(ListTest, Assign21) {
  s21::list<int> lst1({228, 298, 667, 112, 460, 91, 934, 54, 601, 958, 0, 772, 562, 923, 235, 872, 89, 746, 412, 444, 552, 300, 28, 60, 50, 254, 413, 637, 612, 61, 355, 919, 537, 131, 874, 741, 812, 444, 665, 263, 387, 727, 593, 89, 203, 276, 898, 169, 858, 44, 225, 485, 342, 646, 98, 113, 815, 426, 414, 75, 799, 726, 794, 625, 378, 492, 867, 917, 813, 590});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 70);
}

TEST(ListTest, Assign22) {
  s21::list<int> lst1({710, 898, 195, 44, 95, 96, 794, 443, 941, 599, 729, 293, 209, 445, 747, 517, 717, 915, 499, 507, 929, 176, 195, 103, 825, 502, 932, 728, 710, 244, 419, 130, 632, 846, 7, 213});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 36);
}

TEST(ListTest, Assign23) {
  s21::list<int> lst1({746, 705, 882, 980, 600, 562, 782, 528, 485, 719, 476, 652, 68, 946, 785, 114, 964, 678, 501, 873, 975, 325, 939, 683, 817, 606});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 26);
}

TEST(ListTest, Assign24) {
  s21::list<int> lst1({285, 347, 806, 650, 862, 361, 653, 573, 565, 763, 793, 463, 106, 14, 233, 979, 326, 984, 661, 348, 197, 968, 242, 1, 220, 986, 369, 282, 45, 309, 419, 911, 313, 365, 509, 842, 162, 821, 687, 715, 174, 65, 795, 207, 786, 282, 371, 405, 647, 666, 335, 136, 740, 704, 61, 484, 208, 994, 132, 893, 609, 757, 150, 626, 136, 350, 497, 37, 173, 2, 818, 478, 470});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 73);
}

TEST(ListTest, Assign25) {
  s21::list<int> lst1({831, 921, 954, 102, 373, 904, 318, 422, 36, 683, 146, 766, 938, 580, 731, 90, 632, 388, 563, 966, 712, 252, 141, 277, 146, 999, 508, 833, 38, 364, 984, 762, 394, 761, 278, 453, 195, 721, 80, 710, 847, 538, 121, 161, 190, 841, 666, 420, 798, 626, 762, 498, 939, 835, 799, 60});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 56);
}

TEST(ListTest, Assign26) {
  s21::list<int> lst1({79, 501, 233, 370, 753, 52, 40, 869, 527, 284, 992, 584, 236, 904, 171, 885, 45, 510, 789, 830, 629, 706, 173, 139, 374, 15, 998, 482, 732, 620, 354, 94, 620, 815, 364, 663, 250, 464, 737, 180, 221, 551, 523, 490, 205, 978, 293, 598, 894, 123, 649, 185, 70, 660, 614, 818, 138, 43, 949, 766, 192, 12, 380, 55});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 64);
}

TEST(ListTest, Assign27) {
  s21::list<int> lst1({367, 199, 780, 774, 803, 68, 159, 775, 317, 873, 513, 543, 677, 285, 354, 620, 869, 165, 221, 920, 502, 706, 271, 4, 210});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 25);
}

TEST(ListTest, Assign28) {
  s21::list<int> lst1({692, 974, 584, 96, 381, 293, 223, 406, 942, 910, 739, 940, 827, 688, 991, 428, 649, 264, 232, 292, 774, 519, 774, 919, 265, 839, 180, 71, 907, 827, 501, 267, 860, 432, 670, 69, 504, 906, 854, 575, 169, 34, 191, 590, 103, 57, 530, 957, 956, 652, 828, 47, 758, 507, 852, 72});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 56);
}

TEST(ListTest, Assign29) {
  s21::list<int> lst1({418, 136, 360, 703, 768, 875, 566, 118, 528, 985, 541, 242, 428, 855, 325, 230, 428, 274, 906, 766, 664, 407, 158, 68, 379, 321, 570, 158, 984, 684, 61, 626, 281, 824, 778, 828, 551, 431, 283, 390, 192, 267, 262, 250, 57, 876, 561, 721, 294, 580, 538, 56, 559, 42, 773, 826, 941, 947, 853});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 59);
}

TEST(ListTest, Assign30) {
  s21::list<int> lst1({465, 613, 847, 137, 997, 76, 517, 915, 17, 521, 475, 633, 542, 918, 218, 79, 745, 7, 105, 786, 235, 415, 413, 867, 562, 336, 558, 210, 929, 68, 608, 698, 810, 610, 638, 93, 869, 590, 510, 443, 122, 136, 74, 585, 561, 95, 618, 758, 30, 754, 236, 704, 973, 491, 370, 958, 514, 324, 529, 23, 165, 538, 511, 993, 4, 831, 13, 630, 900, 40, 871, 396, 726, 439, 0, 922, 646, 257, 869, 992, 481, 726, 922, 20, 531, 423, 442, 790, 619, 222});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 90);
}

TEST(ListTest, Assign31) {
  s21::list<int> lst1({254, 964, 437, 88, 766, 153, 203, 940, 222, 592, 890, 751, 192, 685, 379, 352, 259, 379, 413, 759, 422, 845, 463, 363, 631, 624, 182, 815, 702, 628, 514, 559, 274, 652, 890, 48, 810, 993, 31, 549, 704, 539, 277, 588, 544, 399, 53, 891, 200, 51, 419});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 51);
}

TEST(ListTest, Assign32) {
  s21::list<int> lst1({673, 970, 502, 59, 572, 333, 383, 34, 7, 15, 98, 925, 610, 533, 140, 195, 431, 928, 854, 777, 452, 148, 144, 686, 229, 158, 223, 586, 634, 319, 609, 216, 981, 892, 76, 569, 772, 61, 998, 17, 150, 428, 364, 338, 904, 496, 997, 516, 986, 839, 137, 822, 742, 913, 520, 900, 660, 126, 526, 826, 495, 375, 523, 260, 699, 148, 87, 937, 753, 744, 745, 70, 950, 296, 260, 363, 549, 722, 683, 32, 734, 568, 404, 3, 771, 157, 35, 945, 56, 186, 814, 622, 856, 497, 228, 115, 125, 128, 638});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 99);
}

TEST(ListTest, Assign33) {
  s21::list<int> lst1({384, 971, 96, 469, 907, 799, 979, 830, 266, 569, 741, 806, 143});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 13);
}

TEST(ListTest, Assign34) {
  s21::list<int> lst1({812, 669, 237, 48, 952, 968, 645, 68, 411, 959, 308, 551, 192, 752, 363, 453, 108, 871, 596, 48, 266, 668, 233, 802, 34, 433, 961, 90, 334, 483, 678, 95, 224, 754, 786, 930, 400, 624, 535, 285, 880, 507, 271, 578, 760, 680, 90, 200, 478, 594, 466, 930, 669, 186, 163, 952, 565, 583, 825, 952, 76, 414, 636, 89, 580, 356, 900, 397, 947, 432, 815, 265, 126, 25, 998, 525, 938, 325, 95, 174, 791, 765, 662, 205, 703, 521, 170, 509, 37, 924, 918, 860, 347, 542, 586, 704, 182});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 97);
}

TEST(ListTest, Assign35) {
  s21::list<int> lst1({47, 582, 343, 964, 691, 877, 801, 472, 920, 105, 962, 385, 772, 59});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 14);
}

TEST(ListTest, Assign36) {
  s21::list<int> lst1({822, 502, 536, 728, 103, 824, 626, 71, 578, 810, 967, 840, 501, 999, 378, 190, 689, 706, 997, 549, 337, 694, 174, 21, 345, 171, 557, 525, 502, 239, 144, 411, 891, 241, 103, 186, 194, 124, 404, 3, 776, 345, 821, 102, 670, 470, 226, 657, 714, 615, 150});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 51);
}

TEST(ListTest, Assign37) {
  s21::list<int> lst1({930, 898, 289, 246, 567, 194, 314, 460, 718, 461, 219, 938, 611, 518, 114, 664, 734});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 17);
}

TEST(ListTest, Assign38) {
  s21::list<int> lst1({139, 730, 993, 75, 695, 308, 800, 128, 266, 792, 773, 448, 174, 595, 970, 912, 374, 384, 350, 843, 221, 382, 436, 533, 703, 284, 294, 5, 320, 271, 779, 196, 749, 325, 472, 192, 765, 121, 28, 414, 345, 918, 657, 111, 649, 651, 293, 223, 292, 686, 434, 644, 778, 34, 101, 479, 611, 689, 620});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 59);
}

TEST(ListTest, Assign39) {
  s21::list<int> lst1({916, 590, 197, 677, 72, 879, 355, 410, 526, 769, 609, 475, 4, 460, 773, 104, 425, 301, 160, 9, 528, 811, 242, 209, 624, 945, 532, 835, 348, 76, 265, 433, 467, 767, 486, 391, 380, 142, 684, 438, 465, 245, 219, 294, 292, 919, 90, 972, 972, 980, 314, 205, 239, 887, 406, 622, 720, 662, 929, 611, 977, 373, 931, 711, 371, 747, 57, 4, 187, 335, 273, 969, 994, 238, 134, 233, 314, 261, 317, 811, 625, 243, 933, 253, 837, 502, 513, 691});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 88);
}

TEST(ListTest, Assign40) {
  s21::list<int> lst1({14, 582, 258, 69, 45, 270, 469, 231, 761, 732, 797, 212, 47, 778, 635, 633, 797, 726, 327, 801, 515, 592, 10, 570, 404, 306, 794, 12, 481, 122, 515, 324, 843, 651, 761, 689, 16, 993, 321, 795, 578, 943, 450, 739, 920, 266, 505, 157, 906, 582, 994, 599, 56, 379, 639, 884, 489, 663, 34, 395, 652, 295, 388, 551, 169, 55, 66, 332, 208, 198, 864, 212, 519, 545, 12});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 75);
}

TEST(ListTest, Assign41) {
  s21::list<int> lst1({810, 551, 210, 354, 715, 169, 898});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 7);
}

TEST(ListTest, Assign42) {
  s21::list<int> lst1({22, 419, 85, 471, 366, 766, 89, 918, 284, 227, 99});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 11);
}

TEST(ListTest, Assign43) {
  s21::list<int> lst1({426, 637, 290, 150, 426, 929, 456, 134, 798, 97, 932, 160, 576, 835, 374, 783, 270, 102, 800, 759, 389, 22, 418, 308, 682, 563, 366, 563, 191, 539, 81, 480, 871, 443, 273, 48, 998, 949, 159, 98, 573, 52, 536, 676, 800, 62, 793, 569, 665, 422, 865, 654, 681, 181, 161, 213, 195, 635, 37, 237, 322, 648, 106, 766, 601, 687, 785, 409, 813, 783, 918, 768, 415, 658, 646, 885, 609, 661, 940, 937, 250});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 81);
}

TEST(ListTest, Assign44) {
  s21::list<int> lst1({862, 98, 109, 226, 298, 246, 697, 225, 799, 792, 412, 589, 626, 201, 494, 172, 117, 924, 544, 94, 127, 717, 818, 621, 926, 534, 139, 988, 881, 854, 273, 807, 659, 565, 408, 882, 447, 687, 127, 289, 624, 530, 891, 47, 602, 267, 519, 690, 291, 628, 271, 757, 420, 401, 86, 819, 240, 777, 660, 529, 136, 763, 586, 768, 263, 544, 72, 728, 950, 205, 550, 229, 549, 997, 136, 846, 56, 848, 368, 465, 256});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 81);
}

TEST(ListTest, Assign45) {
  s21::list<int> lst1({97, 341, 252, 526, 20, 242, 57, 888, 21, 402, 236, 138, 798, 135, 962, 208, 558, 463, 43, 355, 319, 936, 711, 643, 849, 742, 672, 212, 323, 443, 362, 100, 584, 54, 978, 289, 438, 112, 486, 328, 787, 93, 213});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 43);
}

TEST(ListTest, Assign46) {
  s21::list<int> lst1({400, 779, 538, 512, 169, 13, 33, 846, 578, 147, 388, 929, 909, 174, 245, 310, 199, 496, 320, 767, 48, 418, 142, 918, 85, 634, 20, 43, 868, 864, 81, 949, 882, 256, 127, 514, 465, 539, 738, 690, 698, 352, 239, 111, 681, 417, 312, 127, 159, 512, 167, 359, 560, 751});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 54);
}

TEST(ListTest, Assign47) {
  s21::list<int> lst1({66, 270, 945, 398, 718, 373, 102, 503, 877, 514, 124, 430, 283, 24, 786, 49, 715, 678, 262, 41, 817, 516, 243, 548, 532, 556, 520, 697, 918, 181, 361, 382, 974, 526, 790, 66, 287, 549, 309, 572, 243, 941, 649, 901, 597, 704, 421, 65, 218, 928, 44, 154, 894, 57, 904, 639, 920, 620, 581, 757, 808, 775, 315, 845, 834, 215, 251, 643, 289, 678, 398});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 71);
}

TEST(ListTest, Assign48) {
  s21::list<int> lst1({249, 909, 849, 140, 200, 522, 994, 495, 418, 989, 916, 145, 982, 669, 175, 797, 194, 26, 774, 629, 960, 352, 351, 79, 645, 867, 360, 994, 346, 912, 2, 430, 237, 437, 331, 468, 18, 80, 561, 790, 246, 484, 14, 908, 54, 825, 253, 578, 70, 921, 741, 874, 40, 980, 929, 629, 508, 157, 104, 489, 563, 385, 127, 835, 58, 647, 395, 585, 146, 561, 427, 882, 379, 314});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 74);
}

TEST(ListTest, Assign49) {
  s21::list<int> lst1({764, 880, 918, 132, 848, 505, 222, 938, 277, 633, 500, 645, 711, 829, 376, 449, 255, 673, 974, 86, 847, 894, 818, 624, 710, 666, 817, 760, 519, 336, 545, 927, 589, 323, 654, 14, 804, 269, 325, 629, 867, 825, 509, 376, 999, 367, 572, 33, 973, 496, 638, 587, 416, 389, 123, 863, 545, 969, 364, 239, 569, 136});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 62);
}

TEST(ListTest, Assign50) {
  s21::list<int> lst1({370, 387, 685, 750, 825, 640, 342, 800, 50, 550, 134, 416, 931, 528, 969, 86, 194, 387, 76, 849});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 20);
}

TEST(ListTest, Assign51) {
  s21::list<int> lst1({818, 509, 632, 600, 183, 141, 236, 710, 677, 167, 35, 408, 679, 274, 472, 122, 861, 348, 257, 701, 144, 179, 806, 645, 976, 333, 285, 178, 960, 636, 563, 388, 782, 187, 911, 581, 20, 398, 95, 852, 200, 650, 198, 354, 38, 435, 26});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 47);
}

TEST(ListTest, Assign52) {
  s21::list<int> lst1({861, 24, 494, 217, 982, 623, 110, 569, 871, 696, 333, 930, 961, 614, 988, 238, 472, 928, 264, 236, 605, 796, 97, 957, 781, 365, 515, 56, 515, 809, 830, 105, 917, 120, 185, 772, 179, 339, 178, 191, 240, 425, 99, 563, 449, 310, 949, 959, 397, 532, 431, 552, 766, 995, 650, 446, 377, 949, 303, 429, 828, 83, 158, 616, 757, 39, 862, 538, 652, 517, 740, 448, 269, 644, 424, 819, 746, 864, 635, 99, 76, 251, 817});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 83);
}

TEST(ListTest, Assign53) {
  s21::list<int> lst1({964, 437, 814, 250, 868, 672, 722, 737, 738, 718, 749, 840, 523, 844, 624, 879, 775, 826, 241, 194, 687, 141, 44, 632, 445, 17, 245, 148, 25, 270, 734, 346, 149, 481, 340, 242, 724, 370, 96, 390, 943, 22, 880, 885, 195});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 45);
}

TEST(ListTest, Assign54) {
  s21::list<int> lst1({415, 827, 205, 622, 267, 639, 28, 103, 677, 790, 787, 911, 755, 903, 378, 584, 971, 151, 823, 172, 467, 400, 181, 454, 570, 355, 324, 645, 316, 963, 318, 583, 433, 652, 887, 15, 471, 530, 753, 924, 535, 882, 552, 180, 720, 817, 243});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 47);
}

TEST(ListTest, Assign55) {
  s21::list<int> lst1({750, 607, 290, 525, 522, 839, 34, 135, 185, 319, 76, 573, 477, 361, 679, 744, 780, 917, 766, 989, 373, 624, 244, 160, 457, 248, 876, 31, 165, 646, 808, 677, 346, 968});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 34);
}

TEST(ListTest, Assign56) {
  s21::list<int> lst1({889, 4, 899, 776, 532, 483, 793, 848, 210, 983, 337, 785, 175, 814, 487, 69, 789, 956, 702, 348});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 20);
}

TEST(ListTest, Assign57) {
  s21::list<int> lst1({24, 945, 877, 628, 961, 870, 923, 750, 948, 96, 852, 314, 663, 572, 305, 247, 951, 213, 525, 214, 893, 88, 385, 187, 770, 825, 762, 294, 556, 413, 305, 733, 227, 593, 277, 199, 241, 129, 762, 774, 566, 397, 442, 822, 261, 606, 830, 255, 124, 501, 17, 104, 916, 938, 816, 731, 199, 434, 600, 94, 74, 496, 745, 318, 24, 854, 805, 174, 330, 876, 76});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 71);
}

TEST(ListTest, Assign58) {
  s21::list<int> lst1({832, 916, 964, 490, 921, 713});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 6);
}

TEST(ListTest, Assign59) {
  s21::list<int> lst1({551, 868, 964, 826, 109, 417, 23, 932, 475, 683, 100, 720, 965, 170, 753, 889, 785, 65, 388, 591, 781, 587, 375, 449, 894, 239, 350, 698, 293, 770, 308, 223, 105, 481, 22, 958, 406, 186, 911, 101, 901, 367, 762, 477, 274, 619, 280, 813, 220, 911, 318, 77, 449, 202, 287, 882});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 56);
}

TEST(ListTest, Assign60) {
  s21::list<int> lst1({71, 316, 974, 469, 743, 480, 457, 120, 121, 73, 446, 787, 362, 198, 198, 236, 204, 910, 992, 740, 962, 92, 931, 445, 827, 616, 78, 215, 989, 308, 372, 90, 47, 183, 746, 893, 327, 716, 189, 428, 294, 84, 722, 822, 313, 161, 623, 301, 59, 616, 777, 384, 741, 420, 46, 65, 332, 631, 26, 597, 885, 991, 739, 995, 204, 769, 149, 507, 839, 728, 901, 230, 358, 552, 562, 495, 309, 400, 508, 5, 539, 52, 323});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 83);
}

TEST(ListTest, Assign61) {
  s21::list<int> lst1({230, 873, 685, 606, 655, 478, 24, 822, 504, 501, 772, 753, 831, 476, 15, 458, 500, 726, 296, 180, 314, 174, 936, 713, 583, 856, 803, 80, 620, 651, 189, 649, 840, 639, 518, 284, 599, 371, 356, 513, 195, 8, 780, 383, 77, 280, 309, 563, 582, 827, 94, 764, 892, 710, 991, 393, 596, 362, 413, 356, 482, 304, 189, 436, 184, 114, 404, 776, 430, 410, 611, 968, 704, 163, 821, 370, 580, 798, 414, 64, 774, 993, 409, 208, 907, 590, 986, 721, 896, 73, 612, 80});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 92);
}

TEST(ListTest, Assign62) {
  s21::list<int> lst1({923, 931, 637, 134, 673, 302, 49, 632, 366, 170, 274, 574, 352, 902, 859, 159, 91, 386, 979, 895, 112, 199, 535, 270, 736, 291, 834, 720});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 28);
}

TEST(ListTest, Assign63) {
  s21::list<int> lst1({482, 473, 598, 343, 178, 129, 984, 977, 430, 0, 470, 947, 263, 407, 758, 861, 978, 948, 38, 395, 314, 657, 618, 915, 610, 707, 983, 332, 368, 724, 342, 23, 708, 529, 179, 608, 304, 776, 916, 617, 0, 807, 227, 488, 116, 156, 594, 470, 491, 246, 248, 653, 651, 66, 455, 281, 551, 345, 738, 154, 860, 921, 480, 881, 86, 96, 848, 791, 615, 74});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 70);
}

TEST(ListTest, Assign64) {
  s21::list<int> lst1({576, 910, 849, 361, 441, 368, 609, 723, 338, 822, 827, 240, 39, 353, 505, 229, 392, 681, 34, 979, 424, 374, 20, 83, 148, 174, 154, 237, 348, 899, 903, 982, 444, 898, 154, 548, 353, 247, 0, 828, 304, 320, 699, 997, 145, 378, 232, 171, 63, 461, 484, 212, 588, 398, 843, 118, 595, 980, 692});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 59);
}

TEST(ListTest, Assign65) {
  s21::list<int> lst1({350, 175, 76, 898, 785, 890, 911, 916, 966, 534});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 10);
}

TEST(ListTest, Assign66) {
  s21::list<int> lst1({452, 773, 378, 19, 672, 629, 792, 11, 877, 468, 410, 939, 628, 621, 948, 970, 921, 297, 909, 962, 675, 923, 515, 989, 907, 60, 219, 731, 516, 974, 909, 747, 928, 545, 330, 962, 400, 783, 854, 8, 204, 654, 199, 404, 800, 823, 804, 640, 701, 608, 295, 81, 964, 783, 269, 147, 147, 49, 694, 339, 521, 811, 354, 331, 345, 265, 920, 676, 879, 272, 141, 46, 855, 498, 398, 915, 609, 359, 974});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 79);
}

TEST(ListTest, Assign67) {
  s21::list<int> lst1({769, 214, 728, 100, 809, 930, 867, 63, 159, 568, 913, 270, 701, 569, 108, 137, 525, 818, 253, 698, 772, 897, 713, 873, 502, 492, 954, 457, 603, 213, 83, 955, 700, 665, 135});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 35);
}

TEST(ListTest, Assign68) {
  s21::list<int> lst1({173, 160, 268, 978, 532, 790, 500, 821, 977, 615, 913, 244, 427, 553});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 14);
}

TEST(ListTest, Assign69) {
  s21::list<int> lst1({622, 847, 327, 979, 470, 257, 360, 685, 458, 892, 803, 168, 442, 408, 370, 966, 787, 942, 675, 669, 340, 631, 769, 768, 839, 883, 346, 388, 800, 810, 375, 750, 832, 400, 961, 310, 571, 780, 592, 175, 411, 694, 951, 88, 781, 818, 252, 214, 615, 2, 590, 345, 208, 749, 674, 618, 712, 725, 189, 913, 375, 821, 527, 606, 525, 143, 317, 817, 475, 981, 979, 808, 769, 840, 985, 67, 802, 813, 644, 518});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 80);
}

TEST(ListTest, Assign70) {
  s21::list<int> lst1({488, 617, 9, 690, 464, 392, 405, 470, 721, 133, 592, 727, 228, 471, 915, 787, 947});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 17);
}

TEST(ListTest, Assign71) {
  s21::list<int> lst1({207, 77, 566, 911, 163, 357, 482, 788, 995, 412, 436, 227, 486, 845, 469, 880, 511, 910, 173, 350, 596, 701, 725, 94, 150, 738, 454, 477, 394, 600, 354, 650, 796, 835, 869, 742, 7});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 37);
}

TEST(ListTest, Assign72) {
  s21::list<int> lst1({781, 513, 724, 122, 680, 369, 198, 772, 567, 553, 753, 506, 83, 223, 705, 37, 94, 103, 2, 610, 664, 179, 90});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 23);
}

TEST(ListTest, Assign73) {
  s21::list<int> lst1({334, 481, 32, 897, 340, 10, 605, 728, 711, 221, 123, 462, 558, 793, 172, 654, 849, 696, 446, 323, 163, 997, 811, 930, 963, 683, 477, 780, 510, 216, 963, 472, 193, 299, 35, 897, 872, 558, 912, 13, 973, 724, 688, 336, 936, 251, 757, 137, 659, 299, 109, 22, 697, 672, 664, 61, 239, 644, 455, 147, 659, 194, 904, 510, 912, 945, 672, 166, 178, 78, 26, 345, 844, 978, 370, 589, 654, 285, 189, 937});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 80);
}

TEST(ListTest, Assign74) {
  s21::list<int> lst1({738, 693, 496, 992, 263, 405, 718, 625, 782, 216, 158, 812, 806, 806, 268, 560, 691, 799, 601, 586, 342, 798, 727, 240, 559, 614, 456, 612, 447, 369, 43, 512, 480, 173, 954, 689, 234, 473, 807, 635, 938, 534, 478, 74, 978, 493, 542, 933, 325, 816, 304, 150, 485, 663, 849, 526, 399, 901, 528, 44, 111, 482, 438, 840, 854, 336, 750, 341, 283, 354, 115, 422, 397, 982, 759, 881, 674, 149, 228, 284, 731, 271, 333, 463, 332, 595});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 86);
}

TEST(ListTest, Assign75) {
  s21::list<int> lst1({209, 217, 412, 213, 89, 184, 445, 301, 17, 1, 768, 806, 830, 755, 751, 944, 232, 587, 743, 975, 693, 489, 258, 943, 889, 944, 488, 533, 325, 820, 683, 228, 818, 537, 369, 88, 220, 932, 92, 616, 159, 511, 522, 175, 131, 541, 409, 488, 391, 937, 406, 580, 249, 178, 640, 642, 826, 708, 594, 128, 984, 586, 98, 675, 952, 363, 87, 481, 483, 344, 123, 280, 445, 381, 581, 484, 553, 979, 172, 370, 669, 323, 265, 420, 662, 797, 333, 240, 185, 979, 748, 654, 845, 804, 802});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 95);
}

TEST(ListTest, Assign76) {
  s21::list<int> lst1({488, 519, 870, 915, 25, 58, 901, 98, 810, 236, 104, 213, 225, 337, 305, 108, 742, 532, 413, 166, 66, 464, 961, 119, 278, 827, 734, 46, 931, 172, 728, 408, 395, 751, 511, 886, 787, 13, 160, 842, 576, 773, 335, 134, 314, 973, 608, 745, 74, 470, 464, 246, 45, 402, 113, 0, 718, 6, 858, 828, 671, 423, 215, 85, 710, 611, 977, 808, 653, 542, 118, 650, 118, 595, 243, 402, 937, 417, 631, 171, 212, 724, 600, 31, 493, 90});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 86);
}

TEST(ListTest, Assign77) {
  s21::list<int> lst1({648, 391, 919, 715, 270, 557, 624, 316, 273, 414, 306, 297, 783, 699, 126, 791, 695, 718, 937, 631, 154, 482, 819, 364, 640, 227, 130, 725, 354, 656, 325, 225, 135, 687, 575, 202, 752, 990, 58, 989, 802, 32, 745, 655, 216, 525, 890, 871, 254, 424, 320, 281, 428, 839, 669, 312, 356, 879, 886, 263, 763, 819, 851, 484, 896, 535, 333, 657, 56, 433, 724, 995, 575, 638, 887, 172, 223, 761, 15, 730, 185, 882, 682, 120, 638, 174, 612});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 87);
}

TEST(ListTest, Assign78) {
  s21::list<int> lst1({200, 575, 312, 187, 903, 549, 22, 802, 949, 796, 469, 164, 565, 460, 762, 782, 581, 785, 874, 326, 502, 180, 563, 62});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 24);
}

TEST(ListTest, Assign79) {
  s21::list<int> lst1({803, 916, 104, 455, 65, 254, 747, 690, 622, 203, 27, 283, 270, 574, 836, 737, 500, 257, 5, 73, 321, 285, 585, 548, 170, 706, 280, 92, 269, 584, 427, 276, 534, 964, 488, 487, 23, 789, 672, 957, 795, 124, 33, 988, 661, 359, 200, 509, 326, 648, 898, 351, 459, 118, 298, 786, 595, 387, 700});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 59);
}

TEST(ListTest, Assign80) {
  s21::list<int> lst1({233, 142, 579, 560, 942, 41, 677, 440, 914, 276, 493, 247, 358, 14, 592, 268, 480, 684, 979, 484, 341, 244, 793, 717, 273, 13, 995, 507, 232, 334, 581, 821, 514, 861, 140, 478, 499, 706, 119, 572, 981, 925, 490, 717, 399, 745, 412, 354, 959, 106, 552, 171});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 52);
}

TEST(ListTest, Assign81) {
  s21::list<int> lst1({259, 321, 838, 354, 746, 363, 685, 239, 826, 531, 428, 252, 490, 12, 402, 27, 684, 87, 262, 565, 620, 751, 235, 750, 247, 933, 772, 59, 526, 359, 913, 170, 35, 175, 945, 194, 161, 125, 176, 202, 431, 415, 597, 44, 692, 550, 129, 424, 221, 17, 579, 917, 216, 652, 268, 161, 868, 560, 84, 548, 111, 169, 791, 545, 607, 78, 340});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 67);
}

TEST(ListTest, Assign82) {
  s21::list<int> lst1({323, 4, 437, 799, 757, 582, 272, 200, 930, 586, 871, 499, 471, 744, 682, 314, 347, 693, 771, 129, 897, 261, 944, 511, 757, 805, 434, 210, 184, 556, 167, 543, 150, 601, 348, 452, 485, 930, 715, 680, 646, 380, 683, 188, 177, 314, 137, 49, 252, 958, 344, 704, 178, 492, 325, 610, 15, 485, 131, 879, 361, 936, 655, 481, 128, 836, 190, 158, 115, 867, 981, 258, 205, 882});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 74);
}

TEST(ListTest, Assign83) {
  s21::list<int> lst1({658, 399, 937, 518, 687, 175, 140, 228, 861, 301, 626, 991, 956, 532, 536, 79, 637, 155, 259, 807, 566, 15, 904, 206, 321, 702, 238, 157, 113, 508, 374, 395, 243, 583, 594, 464, 766, 625, 33, 672, 325, 684, 273, 875, 515, 349});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 46);
}

TEST(ListTest, Assign84) {
  s21::list<int> lst1({430, 536, 302, 520, 824, 31, 994, 222, 505, 284, 366, 357, 229, 770, 710, 889, 610, 165, 931, 539, 474, 493, 112, 889, 555, 819, 203, 570, 897, 258, 585, 922, 81, 44, 107, 565});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 36);
}

TEST(ListTest, Assign85) {
  s21::list<int> lst1({123, 49, 795, 263, 310, 52, 128, 275, 274, 316, 294, 998, 558, 376, 647, 965, 818, 317, 733, 664, 424, 943, 938, 550, 527, 811, 60, 21, 110, 614, 366, 778, 680, 788, 305, 868, 338, 62, 476, 211, 86, 933, 823, 941, 594, 987, 260});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 47);
}

TEST(ListTest, Assign86) {
  s21::list<int> lst1({658, 203, 797, 921, 739, 798, 46, 631, 780, 637, 847, 331, 507, 673, 955, 107, 115, 237, 243, 272, 14, 508, 72, 594, 116, 903, 923, 585, 835, 344, 482, 53, 749});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 33);
}

TEST(ListTest, Assign87) {
  s21::list<int> lst1({864, 730, 237, 242, 744, 861, 244, 787, 988, 351, 693, 773, 573, 26});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 14);
}

TEST(ListTest, Assign88) {
  s21::list<int> lst1({364, 734, 166, 219, 663, 534, 845, 400, 296, 45, 592, 68, 270, 45, 501, 268, 929, 195, 366, 62, 236, 489, 755, 913, 589, 917, 530, 725, 789, 575, 685, 87, 545, 644, 362, 342, 118, 704, 822, 178, 803, 768, 766, 203, 395, 634, 603, 447, 556, 5, 893, 498, 552, 563, 673, 664, 387, 705, 326, 627, 877, 875, 151, 723});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 64);
}

TEST(ListTest, Assign89) {
  s21::list<int> lst1({455, 220, 750, 423, 401, 201, 900, 514, 791, 607, 953, 465, 899, 208, 180, 328, 572, 992, 385, 627, 861, 39, 78, 42, 130, 809, 855, 591, 231, 328, 194, 967, 822, 373, 18, 519, 817, 151, 360, 586, 175});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 41);
}

TEST(ListTest, Assign90) {
  s21::list<int> lst1({60, 446, 664, 171, 222, 872, 627, 308, 602, 571, 810, 979, 142, 176, 463, 249, 620, 430, 354, 989, 805, 61, 455, 497, 298, 868, 145, 781, 786, 595, 690, 539, 567, 46, 906, 198, 763, 124, 285, 988});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 40);
}

TEST(ListTest, Assign91) {
  s21::list<int> lst1({731, 531, 130, 903, 828, 342, 549, 582, 783, 20, 208, 785, 84, 977, 442, 972, 313, 492, 36, 637, 509, 905, 576, 127, 268, 22, 942, 519, 143, 232, 464, 242, 848, 195, 768, 883, 663, 275, 803, 180, 984, 148, 297, 972, 320, 376, 947, 463, 553, 859, 306, 184, 975, 930, 17, 395, 839, 658, 781, 987, 287, 284, 595, 63, 390, 115, 780, 292, 688, 371, 497, 451, 473, 839, 793, 744, 791, 794, 572});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 79);
}

TEST(ListTest, Assign92) {
  s21::list<int> lst1({117, 615, 481, 465, 421, 57, 133, 167, 711, 178, 414, 851, 389, 918, 358, 523, 778, 667, 403, 854, 413, 34, 766, 988, 318, 238, 258, 13, 125, 452, 527, 214, 161, 125, 994, 266, 699, 620, 434, 922, 679, 672, 304, 206, 597, 116, 876, 407, 258, 73, 329, 972, 437, 448, 371, 577, 728, 394, 823, 350, 284, 691, 558, 898, 675, 399, 753, 740, 2, 280, 500, 961, 869, 404, 98, 847, 864, 567, 654, 557, 455, 71, 16, 310, 502, 291, 16, 79, 722, 109, 35, 635, 352, 960, 909, 368, 403, 729, 510, 233});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 100);
}

TEST(ListTest, Assign93) {
  s21::list<int> lst1({623, 195, 70, 784, 718, 363, 553, 27, 809, 408, 120, 708, 720, 274, 845, 146, 964, 952, 352, 426, 175, 11, 810, 665, 440, 898, 341, 247, 981, 55, 302, 21, 739, 2, 987, 316, 9, 390, 208, 793, 286, 588, 806, 692, 55, 192, 108, 50});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 48);
}

TEST(ListTest, Assign94) {
  s21::list<int> lst1({121, 107, 369, 653, 37, 741, 408, 861, 591, 438, 220, 95, 303, 409, 369, 770, 229, 409, 428, 325, 24, 711, 197, 459, 223, 400, 265, 984, 951, 262, 752, 528, 813});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 33);
}

TEST(ListTest, Assign95) {
  s21::list<int> lst1({840, 512, 200, 665, 453, 67, 731, 202, 730, 58, 746, 619, 627, 92, 318, 880, 743, 850, 490, 535, 215, 415, 208, 111, 444, 61, 920, 523, 219, 771, 516, 957, 648, 343, 358, 543, 205, 604, 682, 573, 504, 769, 353, 128, 68});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 45);
}

TEST(ListTest, Assign96) {
  s21::list<int> lst1({605, 491, 376, 487, 93, 42, 772, 773, 106, 120, 137, 806, 31, 775, 193, 586, 257, 627, 589, 293, 267, 925, 329, 137, 223, 639, 278, 515, 621, 95, 734, 824, 904, 18, 864, 937, 682, 944, 178, 107, 599, 420});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 42);
}

TEST(ListTest, Assign97) {
  s21::list<int> lst1({28, 765, 904, 578, 881, 272, 373});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 7);
}

TEST(ListTest, Assign98) {
  s21::list<int> lst1({652, 513, 48, 375, 102, 123, 10, 889, 56, 661, 11, 104, 520, 616, 246, 713, 280, 267, 832, 268, 915, 224, 845, 617, 714, 494, 623, 778, 872, 746, 775, 244, 430, 469, 35, 84, 478, 997, 812, 662, 870, 585, 268, 560, 50, 579, 844, 159, 935, 716, 949, 767, 474, 655, 530, 191, 590, 219, 43, 806, 289, 172, 951, 397, 437, 511, 304, 637, 571, 613, 521, 420, 239});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 73);
}

TEST(ListTest, Assign99) {
  s21::list<int> lst1({327, 543});
  s21::list<int> lst2;
  lst2 = std::move(lst1);
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 2);
}

TEST(ListTest, Move0) {
  s21::list<int> lst1({445, 163, 849, 337, 463, 47, 435, 242, 439, 644, 80, 561, 963, 543, 548, 797, 416, 778, 519, 681, 709, 821, 51, 60, 535, 654, 913, 736, 955, 206, 350, 119, 820, 419, 963, 886, 49, 306, 585, 237, 505, 836, 228, 716, 496, 358, 688});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 47);
}

TEST(ListTest, Move1) {
  s21::list<int> lst1({578, 849, 15, 303, 753, 617, 350, 965, 394, 581, 283, 22, 125, 164, 157, 412, 413, 539, 62, 853, 211, 358, 800, 32, 848, 93, 840, 115, 252, 207, 835, 117, 659, 267, 128, 310, 803, 931, 183, 718, 110, 47, 297, 782, 986, 491, 558, 478, 315, 451, 68, 259, 517, 975, 257, 24, 712, 612, 495, 839, 567, 15, 248, 676, 928, 416, 775, 732, 270, 233, 446, 107, 325, 784, 730, 249, 561, 878, 398, 741, 138, 767, 201, 326, 604, 304, 252, 710, 480, 805, 683, 619, 880, 91, 361, 900, 501});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 97);
}

TEST(ListTest, Move2) {
  s21::list<int> lst1({42, 913, 497, 32, 861, 848, 747, 111, 282, 24, 702});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 11);
}

TEST(ListTest, Move3) {
  s21::list<int> lst1({738, 521, 164, 334, 559, 140, 659, 385, 36, 104, 296, 270, 631, 179, 434, 858, 416, 369, 619, 320, 765, 824, 228, 267, 636, 273, 560, 569, 381, 139, 318, 383, 82, 752, 16, 788, 968, 505, 351, 74, 51, 53, 824, 290, 430, 511, 184, 784, 859, 615, 728, 541, 620, 702, 852, 253, 160, 693, 58, 711, 412, 914, 835, 564, 33, 924, 775, 419, 567, 468, 275, 360, 780, 812, 919});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 75);
}

TEST(ListTest, Move4) {
  s21::list<int> lst1({525, 619, 204, 524, 162, 119, 668, 114, 624, 593, 60, 580, 169, 805, 193, 325, 522, 608, 358, 418, 133, 912, 547, 545, 907, 790, 130, 514, 248, 439});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 30);
}

TEST(ListTest, Move5) {
  s21::list<int> lst1({107, 17, 753, 110, 567, 418, 595, 172, 612, 250, 203, 108, 540, 510, 807, 476, 243, 559, 617, 985, 731, 39, 776, 414, 765, 521, 499});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 27);
}

TEST(ListTest, Move6) {
  s21::list<int> lst1({961, 235, 187, 46, 849, 543, 652, 103, 832, 81, 700, 631, 840, 396, 255, 322, 899, 554, 765, 828, 391, 24, 804, 297, 233, 99, 102, 532, 819, 113, 518, 320, 387, 917, 255, 976, 375, 851, 338, 81, 700, 699, 322, 464, 593, 294, 334, 433});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 48);
}

TEST(ListTest, Move7) {
  s21::list<int> lst1({423, 233, 12});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 3);
}

TEST(ListTest, Move8) {
  s21::list<int> lst1({152, 41, 164, 870, 923, 913, 989, 836, 981, 155, 901, 833, 87, 847, 720, 510, 481, 640, 738, 941, 677, 278, 561, 434, 656, 50, 554, 955, 210, 96, 574, 423, 209, 697, 526, 435, 232, 307, 916, 15, 413, 889, 872, 383, 989, 780, 28, 109, 268, 286, 790, 470, 185, 796, 446, 950, 597, 733, 199, 697, 860, 423, 921, 519, 603, 17, 195, 836, 50, 670, 372, 518, 839, 350, 630, 111, 370, 678, 403, 159, 489, 281, 470, 530, 92, 203, 935, 568, 823, 284, 994, 978, 570, 874, 507, 460});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 96);
}

TEST(ListTest, Move9) {
  s21::list<int> lst1({702, 44, 212, 805, 32, 720, 128, 899, 486, 79, 926, 48, 229, 891, 823, 450, 571, 805, 410, 834, 268, 394, 480, 437, 213, 159, 414, 975, 956, 637, 616, 887, 781, 985, 126, 854, 777, 394, 685, 616, 643, 405, 824, 855, 609, 202, 75, 747, 948, 27, 42, 776, 318, 758, 947, 275, 641, 724, 140, 709, 12, 611, 242, 106, 209, 635, 889, 298, 912, 454, 999, 403, 164, 610, 592, 23, 756, 28, 161, 571, 165, 686});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 82);
}

TEST(ListTest, Move10) {
  s21::list<int> lst1({291, 625, 190, 692, 203, 918, 366, 952, 146, 369, 240, 570, 931, 517, 137, 585, 397, 111, 769, 225, 413, 637, 629, 813, 307, 787, 485, 202, 561, 112, 400});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 31);
}

TEST(ListTest, Move11) {
  s21::list<int> lst1({293, 725, 274, 667, 745, 619, 337, 373, 895, 266, 248, 30, 227, 417});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 14);
}

TEST(ListTest, Move12) {
  s21::list<int> lst1({247, 366, 402, 63, 498, 484, 13, 149, 825, 122, 204, 383, 852, 440, 262, 356, 964, 873, 206, 934, 492, 269, 865, 924});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 24);
}

TEST(ListTest, Move13) {
  s21::list<int> lst1({840, 492, 674, 979, 740, 88, 729, 775, 289, 897, 990, 813, 994, 631, 756, 79, 262, 351, 772, 242, 783, 724, 243, 494, 11, 308, 876, 293, 87, 877, 420, 326, 686});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 33);
}

TEST(ListTest, Move14) {
  s21::list<int> lst1({209, 817, 23, 921, 211, 593, 919, 448, 619, 185, 231, 591, 894});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 13);
}

TEST(ListTest, Move15) {
  s21::list<int> lst1({11, 484, 56, 398, 558, 485, 551, 116, 203, 307, 782, 968, 194, 736});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 14);
}

TEST(ListTest, Move16) {
  s21::list<int> lst1({624, 151, 346, 366, 476, 471, 877, 516, 241, 889, 66, 332, 501, 45, 113, 421, 375, 634, 610, 683, 994, 767, 547, 562, 7, 72, 351, 900, 523, 484, 48, 691, 571, 617, 245, 243, 167, 105, 701, 875, 893, 9, 43, 350, 311});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 45);
}

TEST(ListTest, Move17) {
  s21::list<int> lst1({57, 225, 473, 243, 854, 971, 98, 713, 999, 6, 591, 926, 198, 683, 76, 213, 754, 990, 747, 294, 239, 212, 163, 415, 312, 258, 667, 139, 651, 582, 806, 993, 850, 757, 557, 366, 670, 919, 764, 846, 394, 962, 614, 683, 217, 251, 797, 456, 273, 564, 324, 706, 481});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 53);
}

TEST(ListTest, Move18) {
  s21::list<int> lst1({392, 420, 923, 968, 929, 861, 83, 147, 896, 350, 301, 496, 720, 58, 36, 736, 285, 665, 842, 601, 474, 871, 5, 922, 634, 225, 497, 997, 201, 943, 454, 664, 136, 472, 290});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 35);
}

TEST(ListTest, Move19) {
  s21::list<int> lst1({263});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 1);
}

TEST(ListTest, Move20) {
  s21::list<int> lst1({846, 88, 71, 461, 163, 487, 131, 11, 886, 353, 315, 871, 236, 752});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 14);
}

TEST(ListTest, Move21) {
  s21::list<int> lst1({747, 540, 304, 419, 284, 219, 303, 844, 539, 299, 734, 114, 610, 369, 171, 787, 281, 615, 48, 954, 807, 688, 747, 496, 608, 51, 101, 457, 936, 250, 335, 245, 17, 698, 11, 363, 326, 387, 547, 23, 18, 263, 828, 2, 509, 314, 674, 547, 515, 211, 140, 117, 17, 368, 497, 527, 808, 452, 539, 952, 138, 813, 252, 165, 232, 686});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 66);
}

TEST(ListTest, Move22) {
  s21::list<int> lst1({397, 361, 167, 336, 760, 399, 98, 926, 580, 227, 725, 607, 694, 543, 379, 448, 161, 701, 721, 627, 89, 67, 462, 682, 31, 97, 822, 134, 217, 561, 481, 758, 959});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 33);
}

TEST(ListTest, Move23) {
  s21::list<int> lst1({379, 874, 992, 323, 869, 974, 324, 576, 35, 402, 991, 371, 234, 281, 770, 886, 929, 338, 410, 288, 366, 387, 762, 772, 83, 877, 105, 721, 514, 430, 323, 498, 36, 113, 460, 83, 926, 647, 215, 846, 540, 572, 572, 443, 516, 718, 162, 937, 243, 526, 124, 523, 691, 717, 589, 873, 199, 671, 17, 40, 8, 174, 969, 388, 432, 998, 368, 182, 455, 393, 88, 922, 281, 462, 197, 416, 0, 463});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 78);
}

TEST(ListTest, Move24) {
  s21::list<int> lst1({468, 574, 809, 147, 497});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 5);
}

TEST(ListTest, Move25) {
  s21::list<int> lst1({369, 473, 334, 449, 554, 66, 349, 144, 397, 789, 284, 473, 41, 624, 639, 642, 377, 936, 647, 456, 965, 605, 880, 15, 186, 262, 299, 800, 76, 615, 973, 439, 85, 258, 84, 2, 600, 529, 799, 341, 610, 210, 697, 338, 10, 315});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 46);
}

TEST(ListTest, Move26) {
  s21::list<int> lst1({277});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 1);
}

TEST(ListTest, Move27) {
  s21::list<int> lst1({871, 958, 596, 296, 220, 470, 58, 110, 439, 100, 145, 37, 689, 902, 772, 560, 559});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 17);
}

TEST(ListTest, Move28) {
  s21::list<int> lst1({745, 917, 395, 70, 115, 377, 302, 391, 841, 328, 492, 462, 338, 652, 383, 959, 877, 663, 87, 612, 978, 835, 39, 942, 646, 615, 313, 233, 873, 471, 919, 746, 523, 756, 606, 128, 33, 131, 873, 21, 623, 989, 56, 384, 988, 551, 643, 539, 942, 87, 188, 593, 742, 359});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 54);
}

TEST(ListTest, Move29) {
  s21::list<int> lst1({77, 76, 801, 693, 993, 916, 870, 455, 928, 546, 873, 457, 931, 370, 869, 544, 128, 674, 651, 239});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 20);
}

TEST(ListTest, Move30) {
  s21::list<int> lst1({720, 50, 157, 753, 349, 336, 139, 415, 404, 451, 236, 254, 964, 139, 126, 466, 716, 146, 609, 446, 517, 319, 979, 820, 624, 250, 115, 432, 463, 676, 743, 429, 296, 510, 322, 769, 684, 209, 933, 154, 492, 337, 617, 123, 602, 128, 171, 721, 297, 345, 702, 781, 671, 69, 479, 830, 790, 279, 726, 345, 478, 981, 837, 530, 231, 638, 233, 168, 105, 787, 406, 419, 523, 951, 685, 782, 56, 831, 312, 353, 970, 602, 754, 781, 148, 303, 802, 530, 173, 99, 710, 577, 262, 714, 926, 658, 94, 824, 537, 352});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 100);
}

TEST(ListTest, Move31) {
  s21::list<int> lst1({22, 247, 395, 467, 498, 282, 797, 549, 777, 126, 218, 200, 107, 770, 991, 425, 7, 762, 82, 390, 176, 765, 507, 387});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 24);
}

TEST(ListTest, Move32) {
  s21::list<int> lst1({72, 896, 910, 370, 894, 538, 91, 736, 594, 712});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 10);
}

TEST(ListTest, Move33) {
  s21::list<int> lst1({701, 960, 529, 165, 991, 561, 437, 765, 373, 749, 402, 257, 182, 511, 886, 701, 527, 217, 791});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 19);
}

TEST(ListTest, Move34) {
  s21::list<int> lst1({930, 882, 342, 339, 661, 637, 309, 682, 653, 905, 204, 262, 58, 433, 726, 930, 162, 939, 452, 492, 619, 392, 679, 362, 940, 788, 690, 850, 293, 920, 551, 937, 538, 155, 765, 359, 390, 750, 28, 28, 619, 359, 10, 467, 681, 78, 398, 72, 760, 731, 922, 893, 88, 565, 362, 124, 534, 430, 456, 261, 178, 42, 722, 527, 390, 124, 197, 958, 980, 135, 926, 662, 50, 443, 722});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 75);
}

TEST(ListTest, Move35) {
  s21::list<int> lst1({452, 583, 297, 645, 172, 637, 78, 345, 682, 23, 461, 785, 674, 508, 210, 350, 227, 636, 768, 123, 237, 261, 850, 403, 130, 204, 759, 64, 37, 65, 36, 881, 703, 225, 272, 270, 105, 755, 768, 716, 730, 984, 32, 447, 572, 945, 250, 850, 77, 829, 468, 102, 382, 655, 894, 883, 48, 103, 337, 649, 374, 777, 172, 193, 117, 197, 125, 483, 407, 562, 884, 156});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 72);
}

TEST(ListTest, Move36) {
  s21::list<int> lst1({277, 599, 254, 535, 979, 938, 65, 257, 19, 702, 330, 413, 287, 222, 803, 559, 761, 632, 680, 969, 693, 254, 26, 951, 943, 167, 491, 791, 295, 591, 932, 874, 395, 861, 809, 560, 557, 894, 314, 980, 852, 905, 896, 216, 157, 187, 156, 478, 981, 236, 707, 270, 867, 608, 100, 344, 169, 806, 222, 686, 564, 480});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 62);
}

TEST(ListTest, Move37) {
  s21::list<int> lst1({217, 777, 48, 784, 935, 190, 845, 413, 999, 973, 568, 916, 480, 505, 382, 717, 922, 243});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 18);
}

TEST(ListTest, Move38) {
  s21::list<int> lst1({737, 902, 29, 508, 354, 675, 665, 84, 220, 288, 36, 184, 775, 27, 785, 581, 744, 732, 95, 908, 623, 431, 685, 45, 718, 421, 199, 549, 283, 108, 112, 557, 900, 118, 585, 999, 830, 548, 261, 372, 477, 972, 769, 346, 59, 48, 18, 358, 0, 667, 210, 0, 944, 817, 769, 527, 732, 66, 420, 57, 810, 342, 721, 623, 360, 479, 122, 775, 58, 336, 292, 113, 806, 83, 9, 538, 609, 693, 646, 441, 617, 693, 71, 97, 468, 11, 53, 571, 27, 930, 364, 328, 33});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 93);
}

TEST(ListTest, Move39) {
  s21::list<int> lst1({968, 874, 27, 200, 694, 583, 201, 543, 455, 9, 853, 936, 514, 778, 359, 763, 729, 308, 129, 545, 118, 531, 716, 795, 603, 480, 758, 626, 356, 363, 844, 703, 926, 155, 453, 493, 961, 665, 61, 558, 903, 577, 55, 768, 169, 433, 524, 736, 484, 997, 478, 197, 259, 90, 608, 418});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 56);
}

TEST(ListTest, Move40) {
  s21::list<int> lst1({506, 60, 354, 590, 699, 100, 131, 35, 413, 617, 503, 899, 741, 28, 483, 67, 812, 434, 339, 762, 738, 875, 820, 966, 99, 961, 921, 149, 82});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 29);
}

TEST(ListTest, Move41) {
  s21::list<int> lst1({78, 917, 127, 702, 581, 121, 545, 20, 353, 863, 788, 57});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 12);
}

TEST(ListTest, Move42) {
  s21::list<int> lst1({417, 903, 759, 984, 276, 971, 323, 685, 78, 38, 203, 833, 94, 992, 25, 611, 787, 863, 449, 815, 539, 929, 73, 331, 927, 139, 859, 166, 95, 357, 272, 890, 339, 313, 8, 998, 559, 493, 828});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 39);
}

TEST(ListTest, Move43) {
  s21::list<int> lst1({140});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 1);
}

TEST(ListTest, Move44) {
  s21::list<int> lst1({674, 895, 770, 852, 933, 458, 648, 606, 218, 731, 214, 545, 312, 785, 565, 937, 99, 671, 435, 764, 770, 712, 364, 326, 622, 121, 930, 12, 831, 985, 966, 364, 988, 286, 884, 186, 526, 211, 554, 943, 197, 193, 188, 458, 838, 981, 28, 513, 495, 895, 542, 841, 162, 0, 862, 872, 337, 69, 923, 895, 884, 341, 784, 730, 908, 467, 14, 537, 829, 393, 95, 813, 20, 923, 422, 889, 318, 540});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 78);
}

TEST(ListTest, Move45) {
  s21::list<int> lst1({24, 922, 471, 182, 357, 103, 597, 547, 478, 584, 493, 44, 769, 262, 48, 45, 682, 624, 407, 987, 993, 421, 812, 517, 598, 186, 343, 877, 881, 572, 794});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 31);
}

TEST(ListTest, Move46) {
  s21::list<int> lst1({809, 183, 741, 621, 221, 716, 384, 978, 638, 385, 444, 408, 579, 787, 642, 838, 763, 368, 442, 679, 549, 922, 898, 324, 512, 688, 6, 94, 183, 160, 171, 38, 174, 835, 201, 415, 657, 362, 940, 8, 348, 696, 346, 257, 270, 227, 241, 900, 545, 838, 873, 495, 403, 910, 944, 212, 18, 859, 462, 72, 726, 786, 693, 467, 136, 618, 862, 59, 127, 147});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 70);
}

TEST(ListTest, Move47) {
  s21::list<int> lst1({428, 526, 126, 115, 222, 360, 732, 296, 151, 847, 301, 297, 49, 754, 266, 297, 976, 741, 253, 325, 542, 77, 96, 118, 686, 819, 910, 245, 242, 266, 378});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 31);
}

TEST(ListTest, Move48) {
  s21::list<int> lst1({273, 690, 395, 242, 835, 643, 518, 455, 552, 940, 597, 676, 364, 748, 644, 43, 139, 30, 84, 209, 776, 940, 611, 234, 520, 504, 4, 525, 286, 710, 878, 574, 60, 858, 721, 703, 127, 600, 365, 472, 33, 562, 55, 295, 122, 472, 476, 348, 939, 222, 25, 884, 139, 824, 853, 290, 599, 17, 770, 3, 297, 354, 380, 359});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 64);
}

TEST(ListTest, Move49) {
  s21::list<int> lst1({81, 83, 920, 568, 610, 864, 752, 679, 919, 673, 30, 848, 410, 450, 611, 623, 952, 363, 331, 942});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 20);
}

TEST(ListTest, Move50) {
  s21::list<int> lst1({882, 856, 529, 552, 933, 498, 479, 939, 235, 46, 735, 415, 658, 575, 29, 391, 922, 985, 145, 700, 370, 355, 757, 513, 50, 9, 350, 724, 561, 422, 811, 936, 52, 351, 953, 715, 549, 294, 771, 393, 242, 199, 719});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 43);
}

TEST(ListTest, Move51) {
  s21::list<int> lst1({855, 343, 150, 398, 257, 740, 867, 252, 204, 879, 963, 533, 182, 450, 100, 278, 66, 590, 60, 876, 521, 336, 791, 155, 410, 549, 242, 695, 816, 471, 566, 729, 534, 59, 60, 812, 917, 909, 533, 411, 751, 237, 770, 633, 955, 74});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 46);
}

TEST(ListTest, Move52) {
  s21::list<int> lst1({764, 302, 436, 923, 163, 39, 175, 221, 947, 475, 875, 346, 916, 304, 433, 29, 338, 526, 463, 455, 407, 213, 760, 645, 160, 128, 415, 1, 441, 523, 273, 357, 15, 225, 615, 46, 599, 581, 240, 394, 125, 167, 701, 175, 646, 134, 971, 597, 336, 833, 596, 882, 216, 979, 206, 498, 172, 458, 671, 983, 53, 923, 834, 429, 184, 134, 740, 454, 321, 868});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 70);
}

TEST(ListTest, Move53) {
  s21::list<int> lst1({954, 187, 60, 75, 782, 489, 269, 527, 89, 287, 202, 91, 38, 824, 109, 607, 323, 52, 55, 587, 156, 50, 436, 170, 591, 572, 113, 301, 178, 873, 639, 773, 497, 190, 677, 698, 580, 556, 826, 590, 520, 826, 783, 651, 276, 76, 901, 210, 138, 52, 78, 304, 526, 567, 523, 699, 202, 434, 372, 702, 242, 56, 28, 619, 448, 135, 743, 103, 544, 141, 209, 112, 978, 636, 989, 932, 177, 176, 190, 161, 334, 957, 316, 869, 138});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 85);
}

TEST(ListTest, Move54) {
  s21::list<int> lst1({661, 168, 857, 426, 597, 346, 842, 730, 418, 484, 719, 176, 434, 695, 661, 599, 454, 228, 814, 482, 622, 683, 785, 292, 557, 633, 45, 594, 228, 493, 935, 168, 672, 153, 306, 900, 943, 475, 402, 327, 514, 546, 982, 627, 134, 975, 889, 694, 384, 74, 37, 887, 447, 645, 388, 716, 478, 62, 881, 681, 20, 209, 810, 982, 841, 256, 709, 604, 874, 606, 124, 740, 836, 616, 755, 583, 302, 312, 546, 833, 714, 80, 541, 617, 722, 435, 819, 601, 557, 145, 760, 450, 899, 168, 510, 564, 213});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 97);
}

TEST(ListTest, Move55) {
  s21::list<int> lst1({613, 469, 695, 592, 902, 571, 354, 269, 365, 250, 988, 689, 10, 75, 784, 442, 618, 42, 224, 232, 130, 289, 408, 90, 54, 174, 972, 523, 749, 90, 867});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 31);
}

TEST(ListTest, Move56) {
  s21::list<int> lst1({638, 660, 186, 580, 360, 195, 948, 520, 547, 684, 362, 786, 917, 818, 71, 172, 286, 135, 231, 665, 145, 858, 575, 631, 998, 99, 627, 569, 870, 798, 584, 796, 258, 329, 171, 812, 430, 340, 243, 712, 394, 778, 276, 152, 111, 562, 892, 700, 524, 172, 352, 61, 52, 450, 572, 113});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 56);
}

TEST(ListTest, Move57) {
  s21::list<int> lst1({248, 160, 78, 945, 145, 864, 206, 474, 786, 421, 50, 335, 298, 922, 851, 107, 212, 636, 131, 483, 13, 881, 405, 9, 171, 534, 837, 913, 502, 514, 991, 509, 637, 734});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 34);
}

TEST(ListTest, Move58) {
  s21::list<int> lst1({440, 584, 997, 291, 196, 45, 697, 989, 545, 364, 537, 886, 789, 76, 485, 791, 148, 179, 980, 366, 84, 216, 896, 972, 195, 951, 578, 380, 520, 164, 728, 328, 341, 517, 854, 603, 457, 701, 870, 343, 533, 976, 573, 625, 415, 305, 244, 112, 19, 180, 621, 481, 517, 786, 160, 696, 42, 390, 17, 549, 975, 805, 170, 894, 342, 969, 955, 683, 279, 595, 783, 996, 164, 618, 753, 221, 431, 612, 985, 245, 628, 588, 505, 72, 259, 248, 604, 132, 153, 872, 266});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 91);
}

TEST(ListTest, Move59) {
  s21::list<int> lst1({95, 943, 584, 110, 605, 277, 939, 961, 851, 301, 317, 739, 263, 135, 640, 208, 131, 345, 826, 554, 227, 217, 900, 656, 858, 457, 797, 446, 328, 312, 542, 53, 299, 507, 120, 654, 550, 807, 585, 941, 701, 714, 20, 40, 664, 184, 317, 213, 314, 481, 698, 951, 876, 265, 597, 23, 225, 51, 639, 251, 601, 820, 660, 225, 693, 158, 639, 506, 166, 858, 367, 101, 840, 272});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 74);
}

TEST(ListTest, Move60) {
  s21::list<int> lst1({775, 499, 479, 511, 361});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 5);
}

TEST(ListTest, Move61) {
  s21::list<int> lst1({627, 613, 516, 447, 944, 253, 920, 487, 628, 766, 879, 169, 800, 913, 641, 854, 547, 525, 266, 322, 391, 75, 822, 675, 72, 742, 162, 14, 984, 336, 496, 801, 928, 854, 546, 771, 28, 497, 918, 603, 11, 515, 256, 848, 78, 721, 766, 949, 359, 809, 284, 457, 171, 715, 288, 432, 987, 238, 596, 995, 660, 47, 237, 800, 494, 705, 813, 197, 932, 566, 719, 721, 631, 751, 894, 342, 282, 28, 512, 883, 385, 790, 433, 814, 884, 944, 37, 791, 610});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 89);
}

TEST(ListTest, Move62) {
  s21::list<int> lst1({312, 830, 303, 669, 105, 767, 488, 599, 705, 313, 982, 676, 385, 493, 584, 581, 982, 11, 909, 949, 235, 925, 639, 127, 558, 866, 940, 976, 483, 434, 140, 235, 623, 202, 617, 846, 564, 97, 334, 892, 144, 800, 423, 696, 763, 221, 9, 721, 901, 412, 420, 8, 275, 173, 374, 197, 725, 658, 34, 210, 599, 469, 876, 898, 712});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 65);
}

TEST(ListTest, Move63) {
  s21::list<int> lst1({516, 149, 170, 926, 452, 424, 179});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 7);
}

TEST(ListTest, Move64) {
  s21::list<int> lst1({437, 590, 378, 236, 807, 429, 332, 940, 345, 494, 605, 478, 146, 165, 917, 880, 530, 260, 885, 260, 972, 402, 423, 905, 469, 532, 3, 39, 458, 612, 505, 108, 381, 1, 61, 489, 115, 834, 135, 789, 783, 75, 774, 37, 346, 394, 480, 859, 238, 807, 151, 336, 225, 948, 284, 565, 645, 696, 969});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 59);
}

TEST(ListTest, Move65) {
  s21::list<int> lst1({454, 382, 412, 437, 519, 153, 243, 6, 104, 907, 115, 107, 245, 845, 240, 308, 980, 414, 166, 431, 82, 977, 200, 334, 623, 725, 9, 250, 997, 991, 818, 973, 59, 151, 467, 24, 8});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 37);
}

TEST(ListTest, Move66) {
  s21::list<int> lst1({495, 115, 969, 355, 31, 904, 797, 103, 669, 216, 143, 771, 154, 276, 563, 356, 358, 764, 407, 604, 975, 716, 467, 978, 745, 538, 947, 969, 220, 417, 157, 616, 938, 888, 911, 353, 567, 108, 581, 122, 349, 988, 137, 552, 262, 849, 467, 284, 259, 549});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 50);
}

TEST(ListTest, Move67) {
  s21::list<int> lst1({954, 337, 350, 788, 926, 12, 538, 729, 860, 131, 831, 741, 943, 836, 835, 732, 174, 800, 358, 549, 576, 956, 998, 855, 913, 52, 875, 629, 286, 840, 845, 463, 266, 18, 259, 443, 336, 179, 262, 124, 53, 925, 397, 936, 976, 480, 498, 988, 907, 593, 424, 10, 388, 845, 151, 379, 883, 849, 411, 557, 515, 849, 179, 550, 92, 141, 888, 767, 838, 215, 704, 482, 933, 244, 230, 453, 66, 612, 285, 794, 724, 788, 686, 202, 818, 447, 289, 979, 120, 188});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 90);
}

TEST(ListTest, Move68) {
  s21::list<int> lst1({844, 803, 850, 352, 727, 299, 923, 15, 331, 549, 683, 928, 541, 792, 761, 39, 971, 583, 248, 930, 330, 541, 42, 166, 27, 267, 873, 717, 77, 406, 819, 627, 791, 794, 632, 72, 246, 220, 999, 933, 394, 675, 304, 762, 777, 513, 4, 620, 934, 673, 614, 50, 572, 280, 429, 393, 140, 447, 155, 763, 444, 742, 33, 894, 653, 767, 798, 928, 788, 852, 680, 137, 746, 6, 925});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 75);
}

TEST(ListTest, Move69) {
  s21::list<int> lst1({705, 960, 886, 517, 779, 235, 852, 209, 132, 576, 285, 369, 773, 942, 817, 415, 235, 886, 736, 226, 874, 907, 357, 876, 461, 252, 873, 561, 950, 263, 435, 612, 716, 156, 879, 605, 872, 853, 498, 691, 933, 980, 666, 273, 86, 907, 247, 148});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 48);
}

TEST(ListTest, Move70) {
  s21::list<int> lst1({195, 496, 747, 988, 458, 427, 691, 514, 234, 443, 929, 793, 366, 201, 954, 436, 157, 672, 746, 112, 3, 801, 173, 391, 723, 425, 579, 54, 148, 743, 519, 324, 892, 521, 867, 618, 337, 116, 747, 724, 244, 310, 982, 64, 212, 627, 419, 100, 338, 357, 767, 206, 109, 856, 679, 662, 716, 223, 877, 779, 771, 407, 290, 950, 861, 51, 419, 21, 747, 171, 212, 871, 602, 28, 710, 364, 202, 508, 942, 731, 486, 419, 430, 77, 511, 511});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 86);
}

TEST(ListTest, Move71) {
  s21::list<int> lst1({78, 783, 790, 30, 345, 40, 436, 157, 163, 999, 516, 524, 256, 500, 346});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 15);
}

TEST(ListTest, Move72) {
  s21::list<int> lst1({501, 418, 127, 815, 266, 542, 684, 480, 465, 949, 356, 589, 880, 879, 88, 173, 299, 858, 182, 298, 879, 104, 761, 110, 376, 109, 409, 370, 725, 19, 370, 619, 283, 569, 215, 701, 956, 983, 260, 370, 50, 289, 713, 822, 914, 685, 396, 753, 712, 973, 750, 433, 785, 135, 454, 504, 633, 537, 442, 768, 584, 765, 184, 795, 805, 676, 327, 10, 230, 339, 343, 760, 76, 162, 265, 211, 571, 328, 69});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 79);
}

TEST(ListTest, Move73) {
  s21::list<int> lst1({631, 756, 732, 802, 403, 62, 947, 386, 892, 633, 680, 195, 451, 453, 853, 845, 733, 933, 537, 695, 765, 770, 637, 737, 779});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 25);
}

TEST(ListTest, Move74) {
  s21::list<int> lst1({848, 3, 586, 635, 780, 745, 633, 435, 968});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 9);
}

TEST(ListTest, Move75) {
  s21::list<int> lst1({253, 592, 239, 850, 742, 503, 482, 61, 255, 626, 147, 27, 339, 20, 255, 474, 303, 157, 26, 180, 404, 748, 850, 171, 497, 913, 951, 699, 876, 212, 101, 473, 811, 814, 576, 645, 376, 802, 716, 868, 691, 200, 305, 873, 995, 373, 274, 156, 105, 230, 516, 199, 776, 855, 993, 59, 380, 57, 370, 636, 105, 742, 171, 183, 678, 896, 618, 977, 197, 286, 905, 600, 66, 54, 571, 899, 713, 903, 374, 330, 204, 363, 276, 112, 532, 436, 831, 215, 490, 312, 819, 682, 55, 150, 643, 173, 34, 603, 365, 880});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 100);
}

TEST(ListTest, Move76) {
  s21::list<int> lst1({505, 945, 259, 32, 958, 675, 985, 442, 337, 601, 410, 436, 909, 202, 266, 739, 736, 618, 925, 319, 35, 589, 411, 188, 469, 782, 982, 638, 733, 899, 567, 897, 11, 531, 483, 568, 215, 74, 417, 465, 49, 751, 264, 795, 996, 61, 116, 360, 267, 171});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 50);
}

TEST(ListTest, Move77) {
  s21::list<int> lst1({449, 206, 630, 720, 591, 593, 655, 73, 318, 791, 857, 276, 959, 535, 535, 746, 404, 786, 746, 921, 800, 821, 530, 341, 749, 164, 220, 560, 474, 749, 151, 564, 516, 367, 498, 862, 371, 134, 815, 68, 395, 724, 821, 790, 510, 880, 284, 324, 205, 197, 129, 292, 164});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 53);
}

TEST(ListTest, Move78) {
  s21::list<int> lst1({401, 448, 779, 812, 186, 433, 744, 238, 481, 790, 806, 470, 661, 942, 216, 284, 874, 158, 878, 674, 2, 11, 738, 547});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 24);
}

TEST(ListTest, Move79) {
  s21::list<int> lst1({281, 210, 179, 501, 92, 581, 264, 337, 895, 354, 663, 735, 656, 870, 9, 142, 246, 766, 375, 175, 891, 446, 524, 42, 67, 398, 827, 548, 97});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 29);
}

TEST(ListTest, Move80) {
  s21::list<int> lst1({219, 837, 763, 159, 711, 537, 375, 693, 252, 326, 527, 560, 600, 164, 672, 620, 386, 788, 41, 656, 133, 562, 125, 421, 115, 122, 676, 17, 57, 959, 854, 757, 968, 996, 671, 599, 329, 309, 631, 889, 72, 381, 123, 350, 134, 801, 432, 482, 45, 203});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 50);
}

TEST(ListTest, Move81) {
  s21::list<int> lst1({245, 366, 236, 11, 892, 446, 653, 350, 830, 638, 292, 655, 775});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 13);
}

TEST(ListTest, Move82) {
  s21::list<int> lst1({915, 912, 232, 33, 247, 457, 633, 319, 179, 959, 61, 973, 697, 847, 157, 734, 630, 450, 860, 75, 160, 344, 703, 739, 802, 801, 881, 488, 49, 46, 244, 619, 601, 812, 74, 303, 852, 104, 15, 300, 903, 81, 351, 221, 951, 983, 352, 297, 402, 472, 11, 433, 631, 915, 740, 890, 383, 101, 308, 117, 262, 55, 338, 974, 979, 390, 18, 589, 238, 993, 917, 499, 648, 586, 587, 835, 737, 765, 794, 350, 222});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 81);
}

TEST(ListTest, Move83) {
  s21::list<int> lst1({170, 324, 956, 513, 159, 218, 311, 277, 63, 625, 102, 681, 502, 289, 843, 864, 741, 307, 673, 947, 59, 991, 745, 952, 444, 183, 954, 731, 611, 585, 993, 903, 223, 260, 221, 508, 713, 441, 864, 968, 127, 238, 470, 564, 526, 40, 532, 797, 855, 518, 31, 454, 846, 850, 939, 346, 119, 557, 771, 845, 597, 757, 720, 232, 134, 67, 483, 901, 925, 639, 620, 865, 852, 321, 174, 345, 115, 817, 974, 601, 384, 612, 537, 522, 549, 529, 417, 71, 618, 535, 195, 499, 499, 446});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 94);
}

TEST(ListTest, Move84) {
  s21::list<int> lst1({530, 925, 748, 47, 770, 981, 515, 79, 492, 217, 797, 972, 771, 607, 956, 873, 307, 522, 975, 632, 512, 449, 37, 842, 843, 618, 914, 964, 249, 888, 506, 778, 831, 558, 552, 876, 899, 802, 210, 351, 459, 196, 331, 259, 275, 499, 539, 218, 371, 259, 481, 266, 320, 748, 329, 659, 1, 768, 156, 625, 268, 705, 295, 844, 484, 298, 845, 156, 878, 63, 72, 474, 228, 821, 467, 486, 739, 41, 157, 621, 854, 536, 702, 792, 308, 822, 740, 125, 612, 570, 198, 501, 931});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 93);
}

TEST(ListTest, Move85) {
  s21::list<int> lst1({404, 739, 685, 607, 776, 900, 204, 735, 796, 115, 447, 568, 169, 336, 756, 193, 688, 348, 280, 232, 217, 787, 596, 965, 380, 349, 542, 693, 244, 428, 871, 133, 297, 75, 494, 589, 677, 155, 620, 175, 939, 294, 897, 172, 743, 348, 878, 982, 416, 100, 580, 382, 253, 345, 554, 73, 201, 717, 737, 201, 354, 654, 993, 888, 709, 578, 555, 553});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 68);
}

TEST(ListTest, Move86) {
  s21::list<int> lst1({991, 20, 324, 783, 969, 774, 440, 193, 900, 430, 733, 854, 789, 409, 652, 67, 948, 208, 643, 834, 773, 47, 1, 95, 939, 819, 421, 534, 84, 918, 576, 747, 201, 212, 1, 220, 778, 655, 953, 153, 178, 58, 799, 834, 883, 682, 742, 992, 662, 813, 747});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 51);
}

TEST(ListTest, Move87) {
  s21::list<int> lst1({586, 296, 688, 18, 144, 177, 69, 275, 980, 588, 197, 176, 466, 858, 558, 521, 892, 959, 975, 816, 288, 705, 775, 348, 787, 189, 637, 196, 534, 727, 753, 155, 717, 667, 618, 13, 167, 817, 139, 479, 700, 30, 890, 652, 143, 47, 478, 192, 41, 674, 976, 435, 833, 90, 238, 759, 940, 539, 916, 74, 706, 916, 209, 828, 17, 3, 424, 962, 135, 345, 764, 224, 833, 231, 569, 685, 568, 550, 934, 144, 144, 814, 54, 487, 716});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 85);
}

TEST(ListTest, Move88) {
  s21::list<int> lst1({391, 817, 13, 915, 856, 83, 289, 388, 262, 633, 990, 6, 363, 939, 839, 180, 171, 881, 424, 668, 75, 349, 815, 805, 140, 257, 800, 92});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 28);
}

TEST(ListTest, Move89) {
  s21::list<int> lst1({862, 177, 648, 749, 201, 404, 350, 378, 509, 393, 643, 447, 161, 961, 929, 366, 96, 235, 188, 814, 812, 838, 911, 836, 182, 528, 299, 162, 22, 201, 966, 783, 780, 840, 304, 462, 280, 285, 647, 75, 485, 634, 217, 847, 453, 458, 93, 944, 531, 238, 787, 494, 745, 699, 352, 714, 885, 54, 346, 438, 952, 425, 523, 311, 204, 676, 740, 334, 939, 15, 373, 610, 885, 355, 137, 154, 735, 736, 136, 905, 282, 931, 310, 423, 66, 533, 158, 74, 934, 484, 84, 420, 557, 867, 399, 795, 582, 171, 986});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 99);
}

TEST(ListTest, Move90) {
  s21::list<int> lst1({737, 234, 868, 424, 828, 971, 582, 361, 46, 718, 549, 19, 251, 304, 236, 567, 183, 342, 877, 899, 95, 136, 515, 9, 485, 268, 656, 234, 990, 142, 997, 665, 376, 735, 291, 879, 324, 541, 870, 996, 526, 833, 565, 142, 745, 820, 525, 132, 538, 948, 220, 671, 99, 742, 811, 750, 814, 381, 689, 380, 817, 300, 149, 875, 257, 971, 326, 372, 102, 926, 701, 406, 470, 999, 494, 205, 101, 995, 58, 482, 948, 77, 546, 493, 234, 694, 648, 872, 415, 987, 686});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 91);
}

TEST(ListTest, Move91) {
  s21::list<int> lst1({138, 262, 982, 547, 435, 372, 763});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 7);
}

TEST(ListTest, Move92) {
  s21::list<int> lst1({513, 502, 594, 447, 249, 165, 331, 714, 928, 346, 562, 239, 262, 830, 18, 486, 844, 784, 691, 975, 654, 273, 872, 558, 535, 824, 273, 755, 516, 622, 519, 96, 209, 223, 873, 137, 444, 942, 793, 245, 277, 47, 852, 64, 745, 169, 323, 166});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 48);
}

TEST(ListTest, Move93) {
  s21::list<int> lst1({217, 139, 573, 975, 446, 321, 202, 443, 124, 576, 597, 389, 293, 623, 225, 728, 312, 195, 30, 913, 89, 360, 206, 114, 654, 549, 731, 246, 503, 881, 18, 697, 558, 116, 229, 251, 647, 119, 128, 857, 232, 316, 455, 926, 410, 764, 55, 176, 267, 309, 490, 999, 55, 2, 367, 694, 662, 965, 756, 976, 785, 806, 332, 454, 124, 616, 789, 696, 847, 591, 497, 749, 897, 314, 195, 629, 176, 629, 847, 372, 227, 0, 829, 307, 887, 417, 350, 349, 555});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 89);
}

TEST(ListTest, Move94) {
  s21::list<int> lst1({119, 852, 636, 714, 892, 158, 619, 669, 720, 734, 774, 133, 140, 132, 406, 430, 980, 331, 22, 426, 481, 6, 666, 813, 539, 895, 40, 27, 935, 109, 830, 311, 621, 730, 800, 906, 343, 640, 109, 849, 887, 732, 923, 116, 674, 135, 490, 264, 791, 905, 360, 965, 38, 332, 60, 691, 479, 469, 608, 570, 957, 459, 68, 517, 156, 491, 151, 930, 821, 959, 666, 538, 677});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 73);
}

TEST(ListTest, Move95) {
  s21::list<int> lst1({432, 233, 810, 948, 535, 399, 931});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 7);
}

TEST(ListTest, Move96) {
  s21::list<int> lst1({951, 675, 108, 24, 866, 295, 569, 473, 192, 483, 194, 420, 616, 998, 762, 913, 920, 812, 528, 633, 10, 184, 731, 497, 854, 336, 962, 70, 789, 410, 479, 314, 532, 811, 490, 327, 742, 423, 769, 158, 278, 64, 677, 621, 688, 95, 888, 576, 114, 307, 706, 798, 791, 388, 838, 771, 557, 688, 664, 415, 929, 341, 684, 139, 107, 357, 431, 601, 819, 585, 984, 461, 381, 102});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 74);
}

TEST(ListTest, Move97) {
  s21::list<int> lst1({274, 669, 130, 333, 299, 541, 42, 86, 790, 547, 919, 769, 562, 758, 687, 261, 888, 307, 9, 654});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 20);
}

TEST(ListTest, Move98) {
  s21::list<int> lst1({692, 90, 889, 336, 143, 707, 938, 326, 11, 350, 874, 608, 32, 415, 431, 595, 621, 931, 110, 443, 775, 104, 65, 989});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 24);
}

TEST(ListTest, Move99) {
  s21::list<int> lst1({928, 591, 604, 937, 900, 383, 314, 190, 625, 746, 153, 785, 358, 692, 702, 680, 644, 326, 595, 449, 188, 453, 882, 378, 731, 106, 459, 263, 3, 542, 310, 239, 109, 432, 996, 323, 375, 815, 424, 797, 101, 37, 466, 825, 610, 201, 93, 310, 750, 163, 980, 175});
  s21::list<int> lst2(std::move(lst1));
  EXPECT_EQ(lst1.size(), 0);
  EXPECT_EQ(lst2.size(), 52);
}

TEST(ListTest, Sort0) {
  s21::list<int> lst({424, 945, 280, 608, 389, 349, 235, 81, 892, 432, 81, 130, 243, 303, 835, 104, 660, 883, 242, 13, 768, 158, 680, 959, 802, 411, 943, 909, 414, 587, 916, 787, 392, 822, 528, 244, 217, 301, 347, 212, 27, 826, 14, 33, 618, 230, 507, 813, 716, 825, 169, 286, 211, 187, 33, 569, 448, 545, 389, 307, 537, 493, 199, 42, 697, 888, 610, 587, 632, 967, 300, 881, 532, 974, 393, 7, 426, 197, 978, 468, 805, 723, 920, 38, 303, 196, 15, 129, 434, 157, 346, 659, 980, 776, 567, 452});
  s21::list<int> res({7, 13, 14, 15, 27, 33, 33, 38, 42, 81, 81, 104, 129, 130, 157, 158, 169, 187, 196, 197, 199, 211, 212, 217, 230, 235, 242, 243, 244, 280, 286, 300, 301, 303, 303, 307, 346, 347, 349, 389, 389, 392, 393, 411, 414, 424, 426, 432, 434, 448, 452, 468, 493, 507, 528, 532, 537, 545, 567, 569, 587, 587, 608, 610, 618, 632, 659, 660, 680, 697, 716, 723, 768, 776, 787, 802, 805, 813, 822, 825, 826, 835, 881, 883, 888, 892, 909, 916, 920, 943, 945, 959, 967, 974, 978, 980});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort1) {
  s21::list<int> lst({885, 684, 111, 236, 294, 454, 698, 726, 938, 301, 850, 786, 83, 843, 338, 779, 30, 998, 852, 576, 387, 960, 261, 414, 889, 82, 315, 30, 744, 811, 949, 111, 847, 121, 717, 947, 578, 114, 20, 643, 241, 287, 384, 720, 781, 871, 603, 188, 544, 802, 892, 227, 933, 102, 19, 308, 477, 560, 581, 469, 787, 176, 88, 467});
  s21::list<int> res({19, 20, 30, 30, 82, 83, 88, 102, 111, 111, 114, 121, 176, 188, 227, 236, 241, 261, 287, 294, 301, 308, 315, 338, 384, 387, 414, 454, 467, 469, 477, 544, 560, 576, 578, 581, 603, 643, 684, 698, 717, 720, 726, 744, 779, 781, 786, 787, 802, 811, 843, 847, 850, 852, 871, 885, 889, 892, 933, 938, 947, 949, 960, 998});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort2) {
  s21::list<int> lst({826, 567, 591, 947, 309, 209, 718, 402, 384, 839, 163, 122, 960, 958, 47, 378, 447, 50, 437, 707, 215, 838, 84, 903, 771, 122, 474, 284, 38, 97, 246, 257, 102, 538, 981, 718, 306, 550, 988, 477, 676, 512, 141, 913, 863, 611, 439, 493, 892, 151, 120, 354, 340, 394, 521, 548, 246, 208, 426, 463, 305, 8, 798, 142, 806, 168, 50, 694, 450, 635, 900, 925, 66, 170, 455, 14, 651, 248, 83, 496, 721, 304});
  s21::list<int> res({8, 14, 38, 47, 50, 50, 66, 83, 84, 97, 102, 120, 122, 122, 141, 142, 151, 163, 168, 170, 208, 209, 215, 246, 246, 248, 257, 284, 304, 305, 306, 309, 340, 354, 378, 384, 394, 402, 426, 437, 439, 447, 450, 455, 463, 474, 477, 493, 496, 512, 521, 538, 548, 550, 567, 591, 611, 635, 651, 676, 694, 707, 718, 718, 721, 771, 798, 806, 826, 838, 839, 863, 892, 900, 903, 913, 925, 947, 958, 960, 981, 988});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort3) {
  s21::list<int> lst({619, 428, 984, 339, 132, 44, 617, 577, 240, 690, 842, 497, 320, 788, 240, 247, 258, 796, 995, 252, 739, 834});
  s21::list<int> res({44, 132, 240, 240, 247, 252, 258, 320, 339, 428, 497, 577, 617, 619, 690, 739, 788, 796, 834, 842, 984, 995});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort4) {
  s21::list<int> lst({110, 399, 903, 83, 504, 265, 37, 290, 697, 674, 491, 859, 624, 153, 132, 701, 849, 177, 743, 35, 710, 984, 417, 593, 968, 208, 983, 802, 623, 442});
  s21::list<int> res({35, 37, 83, 110, 132, 153, 177, 208, 265, 290, 399, 417, 442, 491, 504, 593, 623, 624, 674, 697, 701, 710, 743, 802, 849, 859, 903, 968, 983, 984});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort5) {
  s21::list<int> lst({949, 294, 514, 100, 876, 755, 246, 552, 26, 460, 783, 535, 972, 140, 533, 469, 110, 505, 36, 654, 249, 699, 895, 906, 788, 552, 705, 287, 914, 722, 632, 415, 727, 818, 327, 612, 202, 199, 858, 324, 978, 779, 948, 259, 848, 7, 222, 837, 735, 86, 664, 393, 933, 502, 207, 141, 798, 770, 826, 93, 617, 71, 477, 592, 556, 838, 265, 242, 402, 788, 625, 984, 124, 311, 397, 112, 138, 744, 999, 482, 601, 148, 454, 699, 776, 62, 936, 194, 588, 871, 303, 943, 621, 194, 47, 190, 726});
  s21::list<int> res({7, 26, 36, 47, 62, 71, 86, 93, 100, 110, 112, 124, 138, 140, 141, 148, 190, 194, 194, 199, 202, 207, 222, 242, 246, 249, 259, 265, 287, 294, 303, 311, 324, 327, 393, 397, 402, 415, 454, 460, 469, 477, 482, 502, 505, 514, 533, 535, 552, 552, 556, 588, 592, 601, 612, 617, 621, 625, 632, 654, 664, 699, 699, 705, 722, 726, 727, 735, 744, 755, 770, 776, 779, 783, 788, 788, 798, 818, 826, 837, 838, 848, 858, 871, 876, 895, 906, 914, 933, 936, 943, 948, 949, 972, 978, 984, 999});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort6) {
  s21::list<int> lst({806, 53, 463, 522, 681, 583, 686, 939, 146, 440, 490, 384, 632, 318, 75, 953, 960, 305, 779, 41, 611, 952, 404, 345, 762, 160, 157, 37, 404, 650, 812, 43, 59, 77, 252, 711, 682, 813, 279, 38, 243, 627, 643, 325, 742, 678, 44, 129, 623, 392, 219, 689, 47, 329, 632, 484, 629, 572, 22, 500, 959, 243, 933, 406, 143, 791, 349, 180, 369, 971, 171, 630, 423, 110, 549, 898, 54, 387, 683, 856, 525, 334, 726, 513, 968, 760, 30, 643, 686, 363, 400, 710});
  s21::list<int> res({22, 30, 37, 38, 41, 43, 44, 47, 53, 54, 59, 75, 77, 110, 129, 143, 146, 157, 160, 171, 180, 219, 243, 243, 252, 279, 305, 318, 325, 329, 334, 345, 349, 363, 369, 384, 387, 392, 400, 404, 404, 406, 423, 440, 463, 484, 490, 500, 513, 522, 525, 549, 572, 583, 611, 623, 627, 629, 630, 632, 632, 643, 643, 650, 678, 681, 682, 683, 686, 686, 689, 710, 711, 726, 742, 760, 762, 779, 791, 806, 812, 813, 856, 898, 933, 939, 952, 953, 959, 960, 968, 971});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort7) {
  s21::list<int> lst({231, 598, 613, 45, 248, 833, 666, 544, 366, 10, 124, 185, 578, 383, 302, 973, 124, 737, 867, 137, 465, 231, 329, 614, 554, 506, 65, 690, 525, 957, 768, 556, 88, 692, 218, 26, 951, 385, 268, 832, 519});
  s21::list<int> res({10, 26, 45, 65, 88, 124, 124, 137, 185, 218, 231, 231, 248, 268, 302, 329, 366, 383, 385, 465, 506, 519, 525, 544, 554, 556, 578, 598, 613, 614, 666, 690, 692, 737, 768, 832, 833, 867, 951, 957, 973});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort8) {
  s21::list<int> lst({129, 52, 871, 188, 613, 268, 920, 327, 508, 826, 987, 437, 5, 614, 51, 462, 676, 834, 372, 975, 433, 739, 202, 167, 727, 923, 777, 424, 906, 41, 210, 736, 460, 376, 250, 475, 102, 793, 470, 988, 799, 550, 42, 80, 189, 855, 355, 557, 665, 769, 703, 128, 421, 34, 474, 998, 303, 344, 804, 315, 939, 103, 318, 26, 281, 990, 335, 533});
  s21::list<int> res({5, 26, 34, 41, 42, 51, 52, 80, 102, 103, 128, 129, 167, 188, 189, 202, 210, 250, 268, 281, 303, 315, 318, 327, 335, 344, 355, 372, 376, 421, 424, 433, 437, 460, 462, 470, 474, 475, 508, 533, 550, 557, 613, 614, 665, 676, 703, 727, 736, 739, 769, 777, 793, 799, 804, 826, 834, 855, 871, 906, 920, 923, 939, 975, 987, 988, 990, 998});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort9) {
  s21::list<int> lst({385, 293, 600, 530, 575, 815, 560, 950, 383, 944, 155, 20, 416, 955, 127, 342, 576, 395, 63, 78, 470, 672, 899, 671, 798, 932, 89, 64, 101, 478, 783, 701, 393, 327, 494, 924, 553, 910, 530, 901, 433, 728, 470, 569, 755, 941, 732, 637, 994, 586});
  s21::list<int> res({20, 63, 64, 78, 89, 101, 127, 155, 293, 327, 342, 383, 385, 393, 395, 416, 433, 470, 470, 478, 494, 530, 530, 553, 560, 569, 575, 576, 586, 600, 637, 671, 672, 701, 728, 732, 755, 783, 798, 815, 899, 901, 910, 924, 932, 941, 944, 950, 955, 994});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort10) {
  s21::list<int> lst({906, 249, 314, 962, 774, 460, 750, 123, 218, 375, 169, 649, 541, 569, 789, 478, 894, 716, 211, 199, 438, 553, 190, 599, 664, 819, 753, 563, 804, 195, 148, 167, 485, 623, 464, 651, 586, 113, 814, 843, 616, 235, 42, 372, 627, 740, 92, 741, 837, 417, 806, 598, 366, 620, 745, 117, 795, 456, 567, 250, 774, 573});
  s21::list<int> res({42, 92, 113, 117, 123, 148, 167, 169, 190, 195, 199, 211, 218, 235, 249, 250, 314, 366, 372, 375, 417, 438, 456, 460, 464, 478, 485, 541, 553, 563, 567, 569, 573, 586, 598, 599, 616, 620, 623, 627, 649, 651, 664, 716, 740, 741, 745, 750, 753, 774, 774, 789, 795, 804, 806, 814, 819, 837, 843, 894, 906, 962});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort11) {
  s21::list<int> lst({605, 522, 550, 699, 715, 207, 420, 136, 779, 153, 544, 175, 732, 115, 211, 792, 248, 521, 122, 172, 633, 761, 269, 85, 959, 398, 299, 86, 80, 644, 471, 83, 942, 150});
  s21::list<int> res({80, 83, 85, 86, 115, 122, 136, 150, 153, 172, 175, 207, 211, 248, 269, 299, 398, 420, 471, 521, 522, 544, 550, 605, 633, 644, 699, 715, 732, 761, 779, 792, 942, 959});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort12) {
  s21::list<int> lst({67, 876, 193, 945, 195, 402, 906, 265, 117, 276, 197, 985, 205, 111, 588, 891, 484, 60, 157, 662, 365, 428, 642, 786, 514, 328, 391, 898, 166, 243, 912, 411, 705, 860, 636, 663, 761, 742, 747, 716, 979, 155, 38, 6, 789, 128, 41, 130, 594, 6, 243, 200, 906, 0, 895, 163, 124, 549, 779, 274, 464, 222, 121, 158, 342, 788, 154, 394, 508, 325, 942, 143, 561});
  s21::list<int> res({0, 6, 6, 38, 41, 60, 67, 111, 117, 121, 124, 128, 130, 143, 154, 155, 157, 158, 163, 166, 193, 195, 197, 200, 205, 222, 243, 243, 265, 274, 276, 325, 328, 342, 365, 391, 394, 402, 411, 428, 464, 484, 508, 514, 549, 561, 588, 594, 636, 642, 662, 663, 705, 716, 742, 747, 761, 779, 786, 788, 789, 860, 876, 891, 895, 898, 906, 906, 912, 942, 945, 979, 985});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort13) {
  s21::list<int> lst({570, 249, 751, 398, 589, 684, 233, 306, 696, 96, 698, 544, 326, 614, 410, 534, 571, 972, 934, 106, 301, 289, 169, 568, 618, 813, 837, 74, 788, 346, 978, 535, 26, 953, 741, 544, 790, 812, 38, 29, 946, 44, 128, 697, 289, 357, 923, 418, 912, 502, 905, 105, 942, 226, 898, 634, 45, 89, 239, 424, 833, 744, 395, 699, 565, 729, 294, 71, 487, 404, 208, 160, 186, 358, 768, 443, 899, 338, 347, 694, 604, 644, 995, 250, 242, 178, 555, 323, 317, 601});
  s21::list<int> res({26, 29, 38, 44, 45, 71, 74, 89, 96, 105, 106, 128, 160, 169, 178, 186, 208, 226, 233, 239, 242, 249, 250, 289, 289, 294, 301, 306, 317, 323, 326, 338, 346, 347, 357, 358, 395, 398, 404, 410, 418, 424, 443, 487, 502, 534, 535, 544, 544, 555, 565, 568, 570, 571, 589, 601, 604, 614, 618, 634, 644, 684, 694, 696, 697, 698, 699, 729, 741, 744, 751, 768, 788, 790, 812, 813, 833, 837, 898, 899, 905, 912, 923, 934, 942, 946, 953, 972, 978, 995});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort14) {
  s21::list<int> lst({652, 429, 662, 455, 929, 524, 61, 729, 921, 485, 543, 514, 12, 753, 363, 439, 644, 218, 689, 343, 616, 579, 710, 402, 846, 4, 20, 666, 113, 404, 665, 760, 611, 687, 143, 22, 609, 897, 934, 786, 383, 332, 688, 458, 615, 432, 103, 679, 721, 292, 60, 533, 764, 964, 795});
  s21::list<int> res({4, 12, 20, 22, 60, 61, 103, 113, 143, 218, 292, 332, 343, 363, 383, 402, 404, 429, 432, 439, 455, 458, 485, 514, 524, 533, 543, 579, 609, 611, 615, 616, 644, 652, 662, 665, 666, 679, 687, 688, 689, 710, 721, 729, 753, 760, 764, 786, 795, 846, 897, 921, 929, 934, 964});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort15) {
  s21::list<int> lst({121, 576, 303, 53, 95, 124, 345, 39, 878, 307, 850, 828, 503, 366, 447, 441, 43, 989, 65, 977, 930, 33, 423, 152, 907, 805, 142, 7, 526, 851, 994, 652, 397, 381, 715});
  s21::list<int> res({7, 33, 39, 43, 53, 65, 95, 121, 124, 142, 152, 303, 307, 345, 366, 381, 397, 423, 441, 447, 503, 526, 576, 652, 715, 805, 828, 850, 851, 878, 907, 930, 977, 989, 994});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort16) {
  s21::list<int> lst({306, 329});
  s21::list<int> res({306, 329});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort17) {
  s21::list<int> lst({872, 116, 650, 729, 444, 684, 373, 972, 487, 400, 284, 606, 921, 807, 331, 148, 483, 665, 10, 964});
  s21::list<int> res({10, 116, 148, 284, 331, 373, 400, 444, 483, 487, 606, 650, 665, 684, 729, 807, 872, 921, 964, 972});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort18) {
  s21::list<int> lst({229, 88, 738, 114, 705, 668, 547, 76, 409, 616, 259, 809, 271, 537, 694, 213, 779, 876, 319});
  s21::list<int> res({76, 88, 114, 213, 229, 259, 271, 319, 409, 537, 547, 616, 668, 694, 705, 738, 779, 809, 876});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort19) {
  s21::list<int> lst({989, 996, 762, 942, 18, 361, 917, 259, 96, 174, 222, 796, 738, 473, 196, 912, 590, 511, 831, 729, 435, 243, 812, 700, 382, 693, 889, 198, 32, 365, 989, 62, 578, 714, 823, 854, 54, 90, 761, 852, 346, 688, 618, 883, 567, 488, 340, 570, 985, 755, 886, 0, 183, 326, 503, 847, 962, 638, 436, 790, 490, 919, 734, 725, 685, 517, 469, 10, 985, 803, 10, 217, 545, 129, 187, 612, 130, 436, 337, 288, 175, 874, 949, 553, 270, 268, 234, 454, 128, 275, 528, 751, 412, 586, 477});
  s21::list<int> res({0, 10, 10, 18, 32, 54, 62, 90, 96, 128, 129, 130, 174, 175, 183, 187, 196, 198, 217, 222, 234, 243, 259, 268, 270, 275, 288, 326, 337, 340, 346, 361, 365, 382, 412, 435, 436, 436, 454, 469, 473, 477, 488, 490, 503, 511, 517, 528, 545, 553, 567, 570, 578, 586, 590, 612, 618, 638, 685, 688, 693, 700, 714, 725, 729, 734, 738, 751, 755, 761, 762, 790, 796, 803, 812, 823, 831, 847, 852, 854, 874, 883, 886, 889, 912, 917, 919, 942, 949, 962, 985, 985, 989, 989, 996});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort20) {
  s21::list<int> lst({810, 880, 899, 825, 357, 222, 613, 799, 880, 843, 709, 964, 506, 677, 794, 639, 782, 537, 816, 883, 708, 970, 122, 714, 719, 250, 669, 194, 392, 426, 85, 957, 170, 778, 415, 85, 259, 624, 752, 195, 49, 487, 486, 713, 819, 664, 8, 61, 6, 239, 278});
  s21::list<int> res({6, 8, 49, 61, 85, 85, 122, 170, 194, 195, 222, 239, 250, 259, 278, 357, 392, 415, 426, 486, 487, 506, 537, 613, 624, 639, 664, 669, 677, 708, 709, 713, 714, 719, 752, 778, 782, 794, 799, 810, 816, 819, 825, 843, 880, 880, 883, 899, 957, 964, 970});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort21) {
  s21::list<int> lst({304, 256, 276, 349, 859, 819, 405, 667, 121, 231, 401, 919, 805, 893, 458, 238, 470, 623, 574, 167, 149, 209, 10, 216, 87, 500, 882, 697, 966, 810, 638, 399, 441, 637, 955});
  s21::list<int> res({10, 87, 121, 149, 167, 209, 216, 231, 238, 256, 276, 304, 349, 399, 401, 405, 441, 458, 470, 500, 574, 623, 637, 638, 667, 697, 805, 810, 819, 859, 882, 893, 919, 955, 966});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort22) {
  s21::list<int> lst({450, 579, 608, 382, 421, 855, 776, 137, 260, 328, 420, 59, 353, 407, 333, 762, 614, 836, 556, 279, 812, 487, 932, 663, 155, 428, 628, 679, 517, 243, 773, 956, 274, 992, 869, 999, 882, 763, 561, 425, 909, 825, 797, 955, 228, 867, 156, 679, 722, 143, 357, 940, 966, 23, 1, 720, 424, 983, 181, 921, 424, 364, 695, 118, 466, 467, 336, 17, 943, 693, 394, 378, 114, 115, 440, 733, 955, 893, 613, 362, 979, 958, 865, 245, 837, 118, 139, 17, 555, 968, 159});
  s21::list<int> res({1, 17, 17, 23, 59, 114, 115, 118, 118, 137, 139, 143, 155, 156, 159, 181, 228, 243, 245, 260, 274, 279, 328, 333, 336, 353, 357, 362, 364, 378, 382, 394, 407, 420, 421, 424, 424, 425, 428, 440, 450, 466, 467, 487, 517, 555, 556, 561, 579, 608, 613, 614, 628, 663, 679, 679, 693, 695, 720, 722, 733, 762, 763, 773, 776, 797, 812, 825, 836, 837, 855, 865, 867, 869, 882, 893, 909, 921, 932, 940, 943, 955, 955, 956, 958, 966, 968, 979, 983, 992, 999});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort23) {
  s21::list<int> lst({806, 474, 717, 884, 421, 158, 627, 709, 738, 217, 777, 398, 190});
  s21::list<int> res({158, 190, 217, 398, 421, 474, 627, 709, 717, 738, 777, 806, 884});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort24) {
  s21::list<int> lst({505, 57, 106, 238, 351, 764, 836, 422, 291, 884, 835});
  s21::list<int> res({57, 106, 238, 291, 351, 422, 505, 764, 835, 836, 884});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort25) {
  s21::list<int> lst({823, 441, 305, 546, 5, 84, 394, 851, 418, 961, 799, 799, 284, 382, 719, 70, 130, 826, 348, 932, 972, 601, 554, 453, 182, 95, 421, 960, 52, 480, 124, 9, 688, 267, 249, 714, 9, 152, 313, 354, 818, 43, 52, 444, 874, 697, 925, 816, 320, 427, 965, 356, 220, 720, 286, 359, 659, 595, 689});
  s21::list<int> res({5, 9, 9, 43, 52, 52, 70, 84, 95, 124, 130, 152, 182, 220, 249, 267, 284, 286, 305, 313, 320, 348, 354, 356, 359, 382, 394, 418, 421, 427, 441, 444, 453, 480, 546, 554, 595, 601, 659, 688, 689, 697, 714, 719, 720, 799, 799, 816, 818, 823, 826, 851, 874, 925, 932, 960, 961, 965, 972});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort26) {
  s21::list<int> lst({116, 966, 402, 7, 431, 531, 467, 80, 602, 897, 790, 677, 943, 772, 607, 631, 644, 14, 586, 202, 586, 875, 312, 849, 730, 687, 70, 544, 866, 882, 833, 336, 310, 133, 138, 84, 841, 826, 539, 409, 770});
  s21::list<int> res({7, 14, 70, 80, 84, 116, 133, 138, 202, 310, 312, 336, 402, 409, 431, 467, 531, 539, 544, 586, 586, 602, 607, 631, 644, 677, 687, 730, 770, 772, 790, 826, 833, 841, 849, 866, 875, 882, 897, 943, 966});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort27) {
  s21::list<int> lst({627, 111, 485, 716, 783, 177, 314, 509, 139, 741, 370, 593, 3, 456, 924, 560, 520, 458, 949, 276, 380, 144, 882, 437, 815, 298, 251});
  s21::list<int> res({3, 111, 139, 144, 177, 251, 276, 298, 314, 370, 380, 437, 456, 458, 485, 509, 520, 560, 593, 627, 716, 741, 783, 815, 882, 924, 949});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort28) {
  s21::list<int> lst({849, 974, 801, 88, 592, 552});
  s21::list<int> res({88, 552, 592, 801, 849, 974});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort29) {
  s21::list<int> lst({609, 28, 387, 183, 332, 946, 242, 762, 977, 906, 108, 90, 614, 589, 753, 263, 942, 58, 573, 234, 684, 756, 95, 754, 902, 642, 271, 161, 495, 698, 400, 602, 153, 660, 559, 387, 572, 333, 190, 802, 484, 101, 91, 515, 188, 222, 38, 848, 628, 530, 857, 611, 48, 667, 69, 131, 865});
  s21::list<int> res({28, 38, 48, 58, 69, 90, 91, 95, 101, 108, 131, 153, 161, 183, 188, 190, 222, 234, 242, 263, 271, 332, 333, 387, 387, 400, 484, 495, 515, 530, 559, 572, 573, 589, 602, 609, 611, 614, 628, 642, 660, 667, 684, 698, 753, 754, 756, 762, 802, 848, 857, 865, 902, 906, 942, 946, 977});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort30) {
  s21::list<int> lst({180, 418, 860, 773, 971, 502, 873, 625, 25, 149, 887, 559, 455, 706, 994, 379, 606, 784, 894, 23, 865, 830, 609, 290, 978, 988, 385, 132, 271, 524, 644, 392, 637, 893, 507, 676, 453, 0, 533, 668, 571, 273, 153, 594, 383});
  s21::list<int> res({0, 23, 25, 132, 149, 153, 180, 271, 273, 290, 379, 383, 385, 392, 418, 453, 455, 502, 507, 524, 533, 559, 571, 594, 606, 609, 625, 637, 644, 668, 676, 706, 773, 784, 830, 860, 865, 873, 887, 893, 894, 971, 978, 988, 994});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort31) {
  s21::list<int> lst({175, 812, 900, 219, 473, 523, 446, 443, 876, 913, 951, 227, 899, 255, 439, 197, 650, 621, 539, 43, 539, 338, 298, 7, 97, 269, 812, 573, 958, 161, 936, 119, 223, 4, 562, 814, 684, 608, 200, 498, 393, 885, 660, 510, 264, 883, 324, 176, 814, 561, 759, 240, 667, 824, 112, 714, 437, 123, 748, 642, 619, 64, 645, 257, 814, 26, 834, 62, 728, 824, 725, 105, 159, 756, 173, 746, 183, 1, 432, 822, 577, 566});
  s21::list<int> res({1, 4, 7, 26, 43, 62, 64, 97, 105, 112, 119, 123, 159, 161, 173, 175, 176, 183, 197, 200, 219, 223, 227, 240, 255, 257, 264, 269, 298, 324, 338, 393, 432, 437, 439, 443, 446, 473, 498, 510, 523, 539, 539, 561, 562, 566, 573, 577, 608, 619, 621, 642, 645, 650, 660, 667, 684, 714, 725, 728, 746, 748, 756, 759, 812, 812, 814, 814, 814, 822, 824, 824, 834, 876, 883, 885, 899, 900, 913, 936, 951, 958});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort32) {
  s21::list<int> lst({540, 194, 231});
  s21::list<int> res({194, 231, 540});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort33) {
  s21::list<int> lst({961, 100, 137, 739, 796, 107, 266});
  s21::list<int> res({100, 107, 137, 266, 739, 796, 961});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort34) {
  s21::list<int> lst({221, 817, 336, 436, 751, 521, 295, 838, 969, 494, 564, 365, 397, 499, 878, 887, 121, 862, 49, 182, 342, 691, 444, 234, 395, 514, 671, 644, 77, 836, 664, 584, 649, 690, 874, 283, 307, 764, 449, 197, 259, 352, 557, 516, 706, 142, 302, 830, 908, 998, 880, 654, 816, 354, 443, 145, 386, 14, 230, 856, 353, 366, 837, 561, 40, 498, 931, 631, 338, 185, 833, 793, 68, 507, 586});
  s21::list<int> res({14, 40, 49, 68, 77, 121, 142, 145, 182, 185, 197, 221, 230, 234, 259, 283, 295, 302, 307, 336, 338, 342, 352, 353, 354, 365, 366, 386, 395, 397, 436, 443, 444, 449, 494, 498, 499, 507, 514, 516, 521, 557, 561, 564, 584, 586, 631, 644, 649, 654, 664, 671, 690, 691, 706, 751, 764, 793, 816, 817, 830, 833, 836, 837, 838, 856, 862, 874, 878, 880, 887, 908, 931, 969, 998});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort35) {
  s21::list<int> lst({60, 683, 378, 987, 792, 722, 245, 298, 569, 118, 968, 292, 20, 900, 480, 464, 237, 67, 746, 401, 656, 934, 222, 425, 259, 379, 943, 401, 26, 368, 445, 398, 563, 626, 965, 853, 183, 271, 762, 939, 272, 116, 229, 22, 392, 516, 926, 706, 781, 392, 52, 177, 162, 208, 43, 938, 265, 853, 281, 546, 66, 323, 272, 369, 616, 641, 582, 181});
  s21::list<int> res({20, 22, 26, 43, 52, 60, 66, 67, 116, 118, 162, 177, 181, 183, 208, 222, 229, 237, 245, 259, 265, 271, 272, 272, 281, 292, 298, 323, 368, 369, 378, 379, 392, 392, 398, 401, 401, 425, 445, 464, 480, 516, 546, 563, 569, 582, 616, 626, 641, 656, 683, 706, 722, 746, 762, 781, 792, 853, 853, 900, 926, 934, 938, 939, 943, 965, 968, 987});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort36) {
  s21::list<int> lst({672, 52, 620, 614, 441, 156, 312, 869, 941, 624, 761, 495, 378, 298, 997, 194, 331, 474, 3, 170, 935, 323, 873, 360, 70, 374, 729, 781, 610, 201, 467, 95, 934, 537, 808, 180, 737, 816, 709, 686, 478, 797, 723, 468, 114, 647, 326, 971, 676, 554, 587, 383, 47, 998, 620, 763, 861, 983, 134, 693, 554, 885, 96, 834, 386, 968, 794, 543});
  s21::list<int> res({3, 47, 52, 70, 95, 96, 114, 134, 156, 170, 180, 194, 201, 298, 312, 323, 326, 331, 360, 374, 378, 383, 386, 441, 467, 468, 474, 478, 495, 537, 543, 554, 554, 587, 610, 614, 620, 620, 624, 647, 672, 676, 686, 693, 709, 723, 729, 737, 761, 763, 781, 794, 797, 808, 816, 834, 861, 869, 873, 885, 934, 935, 941, 968, 971, 983, 997, 998});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort37) {
  s21::list<int> lst({706, 399, 377, 462, 779, 676, 815, 710, 959, 738, 821, 558, 513, 375, 806, 736, 981, 105, 932, 811, 686, 865, 931, 910, 324, 186, 693, 562, 122, 979, 401, 224, 212, 584, 99, 708, 542, 686, 838, 294, 850, 425, 917, 264, 273, 95, 936, 665, 453, 976, 492, 201, 758, 80, 939, 300, 988, 147, 849, 608, 77, 942, 800, 303, 867, 178, 664, 305, 515, 417, 861, 917, 318, 19, 720, 329, 507, 987, 253, 621, 549, 687, 315, 971, 539, 790, 329, 22, 276, 612, 718, 525, 274, 917, 980, 377, 623, 93});
  s21::list<int> res({19, 22, 77, 80, 93, 95, 99, 105, 122, 147, 178, 186, 201, 212, 224, 253, 264, 273, 274, 276, 294, 300, 303, 305, 315, 318, 324, 329, 329, 375, 377, 377, 399, 401, 417, 425, 453, 462, 492, 507, 513, 515, 525, 539, 542, 549, 558, 562, 584, 608, 612, 621, 623, 664, 665, 676, 686, 686, 687, 693, 706, 708, 710, 718, 720, 736, 738, 758, 779, 790, 800, 806, 811, 815, 821, 838, 849, 850, 861, 865, 867, 910, 917, 917, 917, 931, 932, 936, 939, 942, 959, 971, 976, 979, 980, 981, 987, 988});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort38) {
  s21::list<int> lst({738, 620, 674, 587, 857, 376, 645, 63, 869, 99, 393, 69, 903, 542, 785, 688});
  s21::list<int> res({63, 69, 99, 376, 393, 542, 587, 620, 645, 674, 688, 738, 785, 857, 869, 903});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort39) {
  s21::list<int> lst({151, 963, 612, 817, 205, 470, 79, 946, 34, 551, 246, 234, 941, 509, 820, 148, 64, 99, 479, 357, 93, 70, 130, 722, 907, 360, 191, 628, 615, 803, 671, 145, 720, 583, 696, 395, 488, 578, 89, 804, 941, 636, 811, 997, 626});
  s21::list<int> res({34, 64, 70, 79, 89, 93, 99, 130, 145, 148, 151, 191, 205, 234, 246, 357, 360, 395, 470, 479, 488, 509, 551, 578, 583, 612, 615, 626, 628, 636, 671, 696, 720, 722, 803, 804, 811, 817, 820, 907, 941, 941, 946, 963, 997});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort40) {
  s21::list<int> lst({586, 678, 744, 104, 207, 117, 263, 562, 935, 920, 69, 528, 497, 996, 63, 73, 618, 986, 866, 14, 306, 28, 970, 190, 215, 176, 855, 100, 785, 371, 835, 731, 572, 220, 978, 29});
  s21::list<int> res({14, 28, 29, 63, 69, 73, 100, 104, 117, 176, 190, 207, 215, 220, 263, 306, 371, 497, 528, 562, 572, 586, 618, 678, 731, 744, 785, 835, 855, 866, 920, 935, 970, 978, 986, 996});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort41) {
  s21::list<int> lst({236, 350, 894, 484, 355, 617, 549, 859, 460, 84, 713, 647, 392, 217, 288});
  s21::list<int> res({84, 217, 236, 288, 350, 355, 392, 460, 484, 549, 617, 647, 713, 859, 894});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort42) {
  s21::list<int> lst({562, 565, 270, 135, 520, 869, 293, 243, 335, 60, 32, 211, 157, 370, 44, 488, 28, 381, 212, 219, 216, 785, 269, 331, 872, 796, 656, 626, 150, 161, 983, 793, 697, 501, 955, 121});
  s21::list<int> res({28, 32, 44, 60, 121, 135, 150, 157, 161, 211, 212, 216, 219, 243, 269, 270, 293, 331, 335, 370, 381, 488, 501, 520, 562, 565, 626, 656, 697, 785, 793, 796, 869, 872, 955, 983});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort43) {
  s21::list<int> lst({628, 285, 927, 69, 555, 714, 666, 388, 339, 513, 955, 8, 44, 618, 758, 346, 575, 442, 344, 675, 31, 170, 301, 900, 244, 910, 920, 574, 420, 899, 246, 973, 886, 788, 737, 938, 970, 723, 383, 279, 627, 684, 926, 443, 979, 758, 726, 512, 65, 180, 662, 804, 46, 135, 631, 270, 682, 327, 897, 626, 885, 471, 458});
  s21::list<int> res({8, 31, 44, 46, 65, 69, 135, 170, 180, 244, 246, 270, 279, 285, 301, 327, 339, 344, 346, 383, 388, 420, 442, 443, 458, 471, 512, 513, 555, 574, 575, 618, 626, 627, 628, 631, 662, 666, 675, 682, 684, 714, 723, 726, 737, 758, 758, 788, 804, 885, 886, 897, 899, 900, 910, 920, 926, 927, 938, 955, 970, 973, 979});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort44) {
  s21::list<int> lst({131, 338, 422, 40, 206, 686, 327, 430, 869, 349, 831, 438, 701, 429, 870, 482, 25, 517, 818, 114, 390, 470, 116, 66, 917, 461, 495, 702, 308, 629, 575, 288, 605, 631, 872, 889, 507, 678, 23, 345, 724, 590, 435, 570, 327, 637, 818, 106, 469, 422, 692, 995, 699, 179, 497, 198, 835, 158, 875, 674, 144, 631, 171, 961, 255, 814, 230, 115, 82, 88, 180, 206, 833, 910, 140, 972, 110, 955, 666, 757});
  s21::list<int> res({23, 25, 40, 66, 82, 88, 106, 110, 114, 115, 116, 131, 140, 144, 158, 171, 179, 180, 198, 206, 206, 230, 255, 288, 308, 327, 327, 338, 345, 349, 390, 422, 422, 429, 430, 435, 438, 461, 469, 470, 482, 495, 497, 507, 517, 570, 575, 590, 605, 629, 631, 631, 637, 666, 674, 678, 686, 692, 699, 701, 702, 724, 757, 814, 818, 818, 831, 833, 835, 869, 870, 872, 875, 889, 910, 917, 955, 961, 972, 995});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort45) {
  s21::list<int> lst({108, 485, 702, 290, 104, 952, 132, 730, 440, 812, 647, 722, 44, 202, 932, 840, 437, 711, 330, 884, 222, 586, 779, 858, 564, 56, 70, 258, 474, 2, 190, 395, 99, 116, 10, 731, 110, 359, 153, 458, 999, 441, 865, 212, 776, 400, 294, 46, 127, 719, 966, 616, 607, 776, 109});
  s21::list<int> res({2, 10, 44, 46, 56, 70, 99, 104, 108, 109, 110, 116, 127, 132, 153, 190, 202, 212, 222, 258, 290, 294, 330, 359, 395, 400, 437, 440, 441, 458, 474, 485, 564, 586, 607, 616, 647, 702, 711, 719, 722, 730, 731, 776, 776, 779, 812, 840, 858, 865, 884, 932, 952, 966, 999});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort46) {
  s21::list<int> lst({465, 459, 283, 37, 781, 124, 482, 621, 711, 678, 526, 356, 69, 156, 93, 795, 226, 695, 238, 832, 549, 639, 121, 493, 266, 545, 463, 847, 282, 893, 723, 80, 537, 871, 243, 987, 378, 428, 662, 315, 307, 81, 715, 893, 77, 618, 553, 667, 970, 771, 860, 543, 497, 720, 28, 696, 333, 466, 122, 94, 136, 403, 671, 853, 741, 342, 554, 457, 672, 223, 587, 363, 996, 280, 899, 603, 121, 335, 600, 103, 526, 444, 628, 766, 116, 429, 529, 569});
  s21::list<int> res({28, 37, 69, 77, 80, 81, 93, 94, 103, 116, 121, 121, 122, 124, 136, 156, 223, 226, 238, 243, 266, 280, 282, 283, 307, 315, 333, 335, 342, 356, 363, 378, 403, 428, 429, 444, 457, 459, 463, 465, 466, 482, 493, 497, 526, 526, 529, 537, 543, 545, 549, 553, 554, 569, 587, 600, 603, 618, 621, 628, 639, 662, 667, 671, 672, 678, 695, 696, 711, 715, 720, 723, 741, 766, 771, 781, 795, 832, 847, 853, 860, 871, 893, 893, 899, 970, 987, 996});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort47) {
  s21::list<int> lst({471, 280, 848, 200, 535, 348, 128, 567, 797, 890, 73, 362, 342, 637, 318, 550, 266, 223, 898, 235, 507, 21, 717, 190, 700, 432, 899, 316, 611, 85, 324, 327, 355, 305, 758, 627, 209, 630, 848, 754, 770, 959, 205, 338, 597, 110, 946, 618, 981, 165, 879, 326, 803, 501, 996, 602, 750, 79, 299, 151, 475, 612, 455, 53, 65, 600, 415, 983, 372, 621, 172, 524, 754, 615, 375, 13, 245, 19, 631, 990, 911, 657, 285, 43, 151, 939, 47, 631, 92, 241, 877, 437, 693, 614});
  s21::list<int> res({13, 19, 21, 43, 47, 53, 65, 73, 79, 85, 92, 110, 128, 151, 151, 165, 172, 190, 200, 205, 209, 223, 235, 241, 245, 266, 280, 285, 299, 305, 316, 318, 324, 326, 327, 338, 342, 348, 355, 362, 372, 375, 415, 432, 437, 455, 471, 475, 501, 507, 524, 535, 550, 567, 597, 600, 602, 611, 612, 614, 615, 618, 621, 627, 630, 631, 631, 637, 657, 693, 700, 717, 750, 754, 754, 758, 770, 797, 803, 848, 848, 877, 879, 890, 898, 899, 911, 939, 946, 959, 981, 983, 990, 996});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort48) {
  s21::list<int> lst({442, 923, 229, 771, 628, 420, 931, 941, 862, 8, 442, 386, 258});
  s21::list<int> res({8, 229, 258, 386, 420, 442, 442, 628, 771, 862, 923, 931, 941});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort49) {
  s21::list<int> lst({506, 692, 209, 935, 574, 738, 476, 377});
  s21::list<int> res({209, 377, 476, 506, 574, 692, 738, 935});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort50) {
  s21::list<int> lst({629, 280, 310, 343, 815, 212, 388, 59, 785, 974});
  s21::list<int> res({59, 212, 280, 310, 343, 388, 629, 785, 815, 974});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort51) {
  s21::list<int> lst({680, 684, 343, 134, 928, 798, 566, 354, 870, 581, 338, 331, 928, 817, 281, 205});
  s21::list<int> res({134, 205, 281, 331, 338, 343, 354, 566, 581, 680, 684, 798, 817, 870, 928, 928});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort52) {
  s21::list<int> lst({352, 796, 44, 745, 323, 425, 205});
  s21::list<int> res({44, 205, 323, 352, 425, 745, 796});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort53) {
  s21::list<int> lst({795, 329, 257, 592, 528, 914, 795, 656, 496, 263, 809, 685, 700, 255, 573, 361, 481, 36, 959, 421, 159, 578, 423, 472, 753, 296, 337, 52, 884, 681, 274, 481, 481, 868, 424, 534, 295, 895, 265, 177, 484, 598, 944, 863, 377, 119, 620, 173, 366, 804, 50, 373, 921, 203, 833, 268, 390});
  s21::list<int> res({36, 50, 52, 119, 159, 173, 177, 203, 255, 257, 263, 265, 268, 274, 295, 296, 329, 337, 361, 366, 373, 377, 390, 421, 423, 424, 472, 481, 481, 481, 484, 496, 528, 534, 573, 578, 592, 598, 620, 656, 681, 685, 700, 753, 795, 795, 804, 809, 833, 863, 868, 884, 895, 914, 921, 944, 959});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort54) {
  s21::list<int> lst({81, 725, 245, 108, 159, 370, 649, 43, 56, 232, 481, 375, 326, 225, 141, 228, 544, 249, 862, 595, 416, 533, 885, 859, 673, 670, 688, 274, 118, 619, 641, 672, 441, 389, 774, 225, 762, 865, 137, 546, 17, 257, 577, 73, 108, 319, 516, 875, 567, 977, 482, 186, 667, 218, 233, 21, 78, 827, 921, 42, 801, 432, 445, 632, 677, 999, 906, 100, 248, 977, 387, 588, 898, 72, 644, 58, 614, 886, 184, 727, 284, 20, 634, 735, 139, 385});
  s21::list<int> res({17, 20, 21, 42, 43, 56, 58, 72, 73, 78, 81, 100, 108, 108, 118, 137, 139, 141, 159, 184, 186, 218, 225, 225, 228, 232, 233, 245, 248, 249, 257, 274, 284, 319, 326, 370, 375, 385, 387, 389, 416, 432, 441, 445, 481, 482, 516, 533, 544, 546, 567, 577, 588, 595, 614, 619, 632, 634, 641, 644, 649, 667, 670, 672, 673, 677, 688, 725, 727, 735, 762, 774, 801, 827, 859, 862, 865, 875, 885, 886, 898, 906, 921, 977, 977, 999});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort55) {
  s21::list<int> lst({388, 406, 876, 586, 996, 306, 785, 458, 188, 43, 164, 420, 635, 376, 573, 766, 484, 126, 885, 839, 925, 846, 645, 124, 218, 517, 338, 286, 279, 515, 299, 901, 950, 963, 116, 530, 774, 382, 521, 552, 127, 485, 46, 875, 832, 404, 146, 663, 464, 610, 755, 172, 256, 806, 864, 843, 844, 532, 100, 182, 513, 434, 339, 817, 818, 685, 713, 884, 166, 587, 758, 16, 17, 634, 944, 677, 76, 4, 55, 411});
  s21::list<int> res({4, 16, 17, 43, 46, 55, 76, 100, 116, 124, 126, 127, 146, 164, 166, 172, 182, 188, 218, 256, 279, 286, 299, 306, 338, 339, 376, 382, 388, 404, 406, 411, 420, 434, 458, 464, 484, 485, 513, 515, 517, 521, 530, 532, 552, 573, 586, 587, 610, 634, 635, 645, 663, 677, 685, 713, 755, 758, 766, 774, 785, 806, 817, 818, 832, 839, 843, 844, 846, 864, 875, 876, 884, 885, 901, 925, 944, 950, 963, 996});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort56) {
  s21::list<int> lst({496, 665, 794, 163, 40, 660, 51, 382, 491, 465, 936, 370, 43, 418, 224, 894, 197, 263, 85, 434, 419, 663, 54, 333, 235, 347, 421, 482, 743, 55, 447});
  s21::list<int> res({40, 43, 51, 54, 55, 85, 163, 197, 224, 235, 263, 333, 347, 370, 382, 418, 419, 421, 434, 447, 465, 482, 491, 496, 660, 663, 665, 743, 794, 894, 936});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort57) {
  s21::list<int> lst({447, 128, 60, 340, 326, 844, 118, 31, 213, 144, 903, 214, 812, 401, 275, 301, 770, 829, 417, 420, 982, 145, 484, 238, 59, 651, 708, 910, 545, 114, 275, 347, 142, 422, 831, 328, 289, 63, 611, 625, 30, 276, 812, 471, 372, 178, 204, 59, 266, 18, 646, 232, 600, 374, 183, 748, 550, 72, 521, 893, 414, 258, 923, 107, 554, 253, 193, 322, 362});
  s21::list<int> res({18, 30, 31, 59, 59, 60, 63, 72, 107, 114, 118, 128, 142, 144, 145, 178, 183, 193, 204, 213, 214, 232, 238, 253, 258, 266, 275, 275, 276, 289, 301, 322, 326, 328, 340, 347, 362, 372, 374, 401, 414, 417, 420, 422, 447, 471, 484, 521, 545, 550, 554, 600, 611, 625, 646, 651, 708, 748, 770, 812, 812, 829, 831, 844, 893, 903, 910, 923, 982});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort58) {
  s21::list<int> lst({488, 963, 872});
  s21::list<int> res({488, 872, 963});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort59) {
  s21::list<int> lst({912, 878, 409, 466, 196, 163, 326, 153, 807, 27, 8, 520, 201, 274, 138, 663, 56, 184, 169, 857, 943, 878, 659, 218, 150, 631, 7, 361, 513, 990, 15, 903, 477});
  s21::list<int> res({7, 8, 15, 27, 56, 138, 150, 153, 163, 169, 184, 196, 201, 218, 274, 326, 361, 409, 466, 477, 513, 520, 631, 659, 663, 807, 857, 878, 878, 903, 912, 943, 990});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort60) {
  s21::list<int> lst({721, 915, 682, 62, 443, 1, 124, 285, 634, 452, 521, 101, 675, 493, 756, 489, 642, 579, 590, 594, 807, 128, 230, 943, 258, 921, 902, 269, 354, 369, 319, 291, 203, 199, 783, 296, 777, 100, 244, 831, 49, 614, 841, 699, 852, 836, 96, 609, 367, 497, 409, 269, 743, 713, 378, 934, 656, 652, 478, 552, 299, 418, 218, 603, 650, 350, 601, 960, 897, 106, 755, 577, 377, 666, 632, 759, 728, 448, 8, 59, 945, 384, 327, 968, 676, 80, 328, 39, 157, 701, 449, 397, 311, 921, 624, 230, 629, 538, 341});
  s21::list<int> res({1, 8, 39, 49, 59, 62, 80, 96, 100, 101, 106, 124, 128, 157, 199, 203, 218, 230, 230, 244, 258, 269, 269, 285, 291, 296, 299, 311, 319, 327, 328, 341, 350, 354, 367, 369, 377, 378, 384, 397, 409, 418, 443, 448, 449, 452, 478, 489, 493, 497, 521, 538, 552, 577, 579, 590, 594, 601, 603, 609, 614, 624, 629, 632, 634, 642, 650, 652, 656, 666, 675, 676, 682, 699, 701, 713, 721, 728, 743, 755, 756, 759, 777, 783, 807, 831, 836, 841, 852, 897, 902, 915, 921, 921, 934, 943, 945, 960, 968});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort61) {
  s21::list<int> lst({307, 335, 404, 31, 911, 512, 997, 580, 442, 3, 597, 164, 873, 806, 479, 830, 374, 88, 493, 786, 730, 340, 28, 996, 717, 944, 439, 485, 616, 67, 773, 297, 975, 122, 78, 537, 800, 448, 333, 509, 491, 898, 86, 583, 420, 88, 575, 206, 905, 995, 855, 170, 910, 74, 851, 92, 862, 776, 827, 915, 431, 588, 928, 516, 289, 903, 507, 328, 470, 151, 931, 930, 716, 289, 235, 770, 638, 757, 55, 635, 3, 122, 546, 428, 332, 69, 563, 330, 733, 975, 963, 223, 221, 411, 20});
  s21::list<int> res({3, 3, 20, 28, 31, 55, 67, 69, 74, 78, 86, 88, 88, 92, 122, 122, 151, 164, 170, 206, 221, 223, 235, 289, 289, 297, 307, 328, 330, 332, 333, 335, 340, 374, 404, 411, 420, 428, 431, 439, 442, 448, 470, 479, 485, 491, 493, 507, 509, 512, 516, 537, 546, 563, 575, 580, 583, 588, 597, 616, 635, 638, 716, 717, 730, 733, 757, 770, 773, 776, 786, 800, 806, 827, 830, 851, 855, 862, 873, 898, 903, 905, 910, 911, 915, 928, 930, 931, 944, 963, 975, 975, 995, 996, 997});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort62) {
  s21::list<int> lst({343, 701, 348, 85, 927, 757, 520, 725, 636, 579, 745, 713, 662, 616, 346, 694, 955, 430, 637, 406, 147, 837, 478, 632, 513, 926, 37, 859, 369, 506, 825, 679, 320, 197, 789, 401, 91, 53, 670, 838, 412, 288, 892, 685, 946, 809, 82, 515, 703, 963, 832, 878});
  s21::list<int> res({37, 53, 82, 85, 91, 147, 197, 288, 320, 343, 346, 348, 369, 401, 406, 412, 430, 478, 506, 513, 515, 520, 579, 616, 632, 636, 637, 662, 670, 679, 685, 694, 701, 703, 713, 725, 745, 757, 789, 809, 825, 832, 837, 838, 859, 878, 892, 926, 927, 946, 955, 963});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort63) {
  s21::list<int> lst({338, 100, 339, 513, 358, 459, 391, 768, 167, 450, 895, 903, 185, 824, 444, 854, 281, 414, 907, 380, 782, 532, 0, 478, 871, 534, 752, 43, 697, 366, 104, 166, 507, 332, 106, 480, 833, 595, 633, 150, 435, 343, 116, 411, 216, 918, 391, 703, 422, 942, 172, 678, 448, 802, 730, 263, 543, 315, 623, 721, 337, 17, 989, 318, 164, 440, 469, 552, 39, 60, 83, 918, 598, 352, 806, 447, 128, 121, 340, 52, 343, 835, 334, 578, 56, 930, 755, 876, 11, 629, 96, 610, 272, 84, 580, 921, 283, 337, 375});
  s21::list<int> res({0, 11, 17, 39, 43, 52, 56, 60, 83, 84, 96, 100, 104, 106, 116, 121, 128, 150, 164, 166, 167, 172, 185, 216, 263, 272, 281, 283, 315, 318, 332, 334, 337, 337, 338, 339, 340, 343, 343, 352, 358, 366, 375, 380, 391, 391, 411, 414, 422, 435, 440, 444, 447, 448, 450, 459, 469, 478, 480, 507, 513, 532, 534, 543, 552, 578, 580, 595, 598, 610, 623, 629, 633, 678, 697, 703, 721, 730, 752, 755, 768, 782, 802, 806, 824, 833, 835, 854, 871, 876, 895, 903, 907, 918, 918, 921, 930, 942, 989});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort64) {
  s21::list<int> lst({130, 687, 197, 106, 878, 7, 523, 203, 7, 852, 180, 219, 781, 359, 419, 684, 769, 832, 977, 302, 434, 31, 840, 166, 839, 189, 212, 444, 802, 682, 83, 876, 515, 782, 74, 309, 230, 316, 862, 960, 771, 272, 966, 770, 186, 216, 354, 893, 703, 700, 214, 928, 242, 228, 43, 341, 943, 104, 420, 633, 735, 811, 767, 297, 570, 947, 225, 414, 979, 556, 812, 512, 559, 417, 82, 814, 463, 778, 250, 334, 153, 294, 813, 94, 634, 537, 390, 585, 840, 308, 89, 897, 697, 765});
  s21::list<int> res({7, 7, 31, 43, 74, 82, 83, 89, 94, 104, 106, 130, 153, 166, 180, 186, 189, 197, 203, 212, 214, 216, 219, 225, 228, 230, 242, 250, 272, 294, 297, 302, 308, 309, 316, 334, 341, 354, 359, 390, 414, 417, 419, 420, 434, 444, 463, 512, 515, 523, 537, 556, 559, 570, 585, 633, 634, 682, 684, 687, 697, 700, 703, 735, 765, 767, 769, 770, 771, 778, 781, 782, 802, 811, 812, 813, 814, 832, 839, 840, 840, 852, 862, 876, 878, 893, 897, 928, 943, 947, 960, 966, 977, 979});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort65) {
  s21::list<int> lst({455, 108, 41, 115, 785, 27, 36, 486, 129, 165, 76, 981, 232, 366, 218, 8, 63, 170, 837, 865, 90, 744, 710, 512, 525, 105, 211, 891, 173, 669, 493, 59, 488, 356, 239, 510, 139, 28, 419, 704, 727, 607, 232, 730, 401, 709, 223, 187, 557, 317, 872, 429, 587, 128, 789, 324, 275, 267, 272, 688, 239, 895, 868, 337, 149, 782, 491, 794, 638, 905, 417, 548, 58, 32, 718, 790, 834, 255, 394, 893, 402, 728, 991, 72, 682, 202, 652});
  s21::list<int> res({8, 27, 28, 32, 36, 41, 58, 59, 63, 72, 76, 90, 105, 108, 115, 128, 129, 139, 149, 165, 170, 173, 187, 202, 211, 218, 223, 232, 232, 239, 239, 255, 267, 272, 275, 317, 324, 337, 356, 366, 394, 401, 402, 417, 419, 429, 455, 486, 488, 491, 493, 510, 512, 525, 548, 557, 587, 607, 638, 652, 669, 682, 688, 704, 709, 710, 718, 727, 728, 730, 744, 782, 785, 789, 790, 794, 834, 837, 865, 868, 872, 891, 893, 895, 905, 981, 991});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort66) {
  s21::list<int> lst({882, 291, 28, 160, 857, 667, 4, 879, 735, 127, 807, 68, 848, 619, 585, 127, 58, 564, 216, 929, 480, 526, 938, 602, 360, 747, 630, 193, 727, 872, 875, 336, 980, 630, 649, 665, 229, 359, 790, 78, 670, 947, 751, 725, 438, 226});
  s21::list<int> res({4, 28, 58, 68, 78, 127, 127, 160, 193, 216, 226, 229, 291, 336, 359, 360, 438, 480, 526, 564, 585, 602, 619, 630, 630, 649, 665, 667, 670, 725, 727, 735, 747, 751, 790, 807, 848, 857, 872, 875, 879, 882, 929, 938, 947, 980});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort67) {
  s21::list<int> lst({66, 887, 692, 66, 570, 302, 706, 306, 338, 520, 483, 938, 485, 52, 64, 211, 465, 968, 944, 248, 177, 874, 959, 75, 446, 360, 145, 46, 20, 877, 180});
  s21::list<int> res({20, 46, 52, 64, 66, 66, 75, 145, 177, 180, 211, 248, 302, 306, 338, 360, 446, 465, 483, 485, 520, 570, 692, 706, 874, 877, 887, 938, 944, 959, 968});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort68) {
  s21::list<int> lst({835, 649, 552, 242, 358, 196, 383, 861, 632, 892, 499, 221, 654, 422, 49, 251, 119, 635, 851, 278, 188, 475, 818, 970, 446, 914, 779, 713, 318, 728, 369, 819, 613, 861, 872, 375, 903, 393, 946, 538, 638, 352, 985, 729, 306, 985, 519});
  s21::list<int> res({49, 119, 188, 196, 221, 242, 251, 278, 306, 318, 352, 358, 369, 375, 383, 393, 422, 446, 475, 499, 519, 538, 552, 613, 632, 635, 638, 649, 654, 713, 728, 729, 779, 818, 819, 835, 851, 861, 861, 872, 892, 903, 914, 946, 970, 985, 985});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort69) {
  s21::list<int> lst({522, 721, 641, 523, 885, 851, 405, 191, 950, 616, 537, 855, 200, 785, 395, 441, 643, 948, 80, 60, 825, 334, 916, 510, 643, 977, 13, 681, 887, 266, 984, 443, 899, 343, 324, 25, 692, 59, 984, 792, 660, 125, 759, 618, 831, 742, 931, 88, 879, 425});
  s21::list<int> res({13, 25, 59, 60, 80, 88, 125, 191, 200, 266, 324, 334, 343, 395, 405, 425, 441, 443, 510, 522, 523, 537, 616, 618, 641, 643, 643, 660, 681, 692, 721, 742, 759, 785, 792, 825, 831, 851, 855, 879, 885, 887, 899, 916, 931, 948, 950, 977, 984, 984});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort70) {
  s21::list<int> lst({592, 604, 709, 681, 146, 354, 942, 613, 467, 412, 635, 245});
  s21::list<int> res({146, 245, 354, 412, 467, 592, 604, 613, 635, 681, 709, 942});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort71) {
  s21::list<int> lst({495, 975, 361, 772, 493, 553, 713, 789, 450, 795, 609, 179, 260, 394, 654, 506, 235, 315, 315, 602, 826, 824, 557, 665, 970, 657, 80, 795, 104, 155, 818, 2, 396, 724, 317, 778, 349, 219, 779, 638, 896, 417, 602, 427, 519, 523, 345, 856, 143, 209, 907, 715, 155, 234, 203, 531, 141, 350, 136, 622, 508});
  s21::list<int> res({2, 80, 104, 136, 141, 143, 155, 155, 179, 203, 209, 219, 234, 235, 260, 315, 315, 317, 345, 349, 350, 361, 394, 396, 417, 427, 450, 493, 495, 506, 508, 519, 523, 531, 553, 557, 602, 602, 609, 622, 638, 654, 657, 665, 713, 715, 724, 772, 778, 779, 789, 795, 795, 818, 824, 826, 856, 896, 907, 970, 975});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort72) {
  s21::list<int> lst({929, 728, 391, 805, 742, 698, 399, 573, 552, 972, 910, 468, 355, 781, 670, 358, 523, 198, 609, 131, 435, 198, 710, 851, 792, 591, 11, 57, 351, 681, 154, 90, 513, 364, 919, 353, 440, 279, 392, 237, 861, 193, 859, 371, 364, 3, 505, 485, 211, 468, 936, 623, 5, 302, 363, 877, 381, 158, 212, 737, 875, 721, 626, 573, 2, 490, 218, 301, 446, 290, 939, 633, 153, 364, 939, 744, 567, 713, 85});
  s21::list<int> res({2, 3, 5, 11, 57, 85, 90, 131, 153, 154, 158, 193, 198, 198, 211, 212, 218, 237, 279, 290, 301, 302, 351, 353, 355, 358, 363, 364, 364, 364, 371, 381, 391, 392, 399, 435, 440, 446, 468, 468, 485, 490, 505, 513, 523, 552, 567, 573, 573, 591, 609, 623, 626, 633, 670, 681, 698, 710, 713, 721, 728, 737, 742, 744, 781, 792, 805, 851, 859, 861, 875, 877, 910, 919, 929, 936, 939, 939, 972});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort73) {
  s21::list<int> lst({454, 30, 135, 237, 923, 312, 84, 706, 756, 444, 581, 579, 475, 659, 93, 563, 371, 644, 84, 931, 431, 502, 725, 665, 177, 541, 83, 457, 299, 331, 807, 154, 19, 403, 290, 840, 273});
  s21::list<int> res({19, 30, 83, 84, 84, 93, 135, 154, 177, 237, 273, 290, 299, 312, 331, 371, 403, 431, 444, 454, 457, 475, 502, 541, 563, 579, 581, 644, 659, 665, 706, 725, 756, 807, 840, 923, 931});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort74) {
  s21::list<int> lst({496, 923, 540, 470, 264, 384, 543, 971, 679, 696, 943, 561, 277, 216, 92, 731, 514, 87, 941, 166, 442, 954, 852, 943, 844, 49, 669, 972, 975, 21, 144, 975, 49, 973, 227, 79, 165, 72, 31, 892, 696, 554, 868, 381, 110, 765, 717, 81, 124, 669, 791, 888, 702, 316, 699, 91, 392, 49, 52, 342, 498, 254, 457, 846, 114, 299, 234, 465, 389, 976, 893, 148, 284, 111, 290, 516});
  s21::list<int> res({21, 31, 49, 49, 49, 52, 72, 79, 81, 87, 91, 92, 110, 111, 114, 124, 144, 148, 165, 166, 216, 227, 234, 254, 264, 277, 284, 290, 299, 316, 342, 381, 384, 389, 392, 442, 457, 465, 470, 496, 498, 514, 516, 540, 543, 554, 561, 669, 669, 679, 696, 696, 699, 702, 717, 731, 765, 791, 844, 846, 852, 868, 888, 892, 893, 923, 941, 943, 943, 954, 971, 972, 973, 975, 975, 976});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort75) {
  s21::list<int> lst({739, 500, 145, 90, 389, 87, 283, 641, 775, 167, 347, 555, 492, 455, 685, 565, 403, 161, 947, 323, 656, 501, 571, 325, 894, 327, 522, 877, 42, 472, 508, 275, 514, 404, 84, 415, 31, 913, 846, 400});
  s21::list<int> res({31, 42, 84, 87, 90, 145, 161, 167, 275, 283, 323, 325, 327, 347, 389, 400, 403, 404, 415, 455, 472, 492, 500, 501, 508, 514, 522, 555, 565, 571, 641, 656, 685, 739, 775, 846, 877, 894, 913, 947});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort76) {
  s21::list<int> lst({553, 629, 61, 255, 511, 557, 767, 387, 48, 756, 924, 637, 492, 934, 966, 525, 328, 249, 669, 931, 566, 647, 118, 381, 744, 640, 646, 233, 446, 89});
  s21::list<int> res({48, 61, 89, 118, 233, 249, 255, 328, 381, 387, 446, 492, 511, 525, 553, 557, 566, 629, 637, 640, 646, 647, 669, 744, 756, 767, 924, 931, 934, 966});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort77) {
  s21::list<int> lst({706, 276, 889, 87, 614, 670, 401, 386, 886, 822, 163, 546, 616, 482, 2, 847, 262, 536, 442, 658, 648, 173, 866, 865, 935, 724, 234, 612, 368, 956, 702, 534, 216, 525, 853, 774, 47, 891, 304, 996, 989, 317, 652, 185, 971, 849, 938, 208, 940, 252, 440, 800, 167, 909, 109, 114, 650, 808, 172, 520, 72, 695, 781, 678, 113, 153, 907, 128, 612, 359, 912, 196, 800, 958, 172, 566, 444, 633, 362, 927, 170});
  s21::list<int> res({2, 47, 72, 87, 109, 113, 114, 128, 153, 163, 167, 170, 172, 172, 173, 185, 196, 208, 216, 234, 252, 262, 276, 304, 317, 359, 362, 368, 386, 401, 440, 442, 444, 482, 520, 525, 534, 536, 546, 566, 612, 612, 614, 616, 633, 648, 650, 652, 658, 670, 678, 695, 702, 706, 724, 774, 781, 800, 800, 808, 822, 847, 849, 853, 865, 866, 886, 889, 891, 907, 909, 912, 927, 935, 938, 940, 956, 958, 971, 989, 996});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort78) {
  s21::list<int> lst({325, 560, 153, 510, 698, 396, 843, 482, 349, 76, 556, 21, 978, 193, 455, 333, 679, 60, 29, 255, 585, 578, 291, 892, 22, 252});
  s21::list<int> res({21, 22, 29, 60, 76, 153, 193, 252, 255, 291, 325, 333, 349, 396, 455, 482, 510, 556, 560, 578, 585, 679, 698, 843, 892, 978});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort79) {
  s21::list<int> lst({742, 451, 573, 253, 89, 528, 645, 293, 826, 669, 610, 855, 322, 10, 231, 121, 198, 701, 298, 605, 430, 191, 918, 683, 871, 754, 47, 347, 839, 98, 174, 502, 964, 89, 148, 72, 361, 37, 794, 483, 295, 897, 972, 892, 838, 201, 911});
  s21::list<int> res({10, 37, 47, 72, 89, 89, 98, 121, 148, 174, 191, 198, 201, 231, 253, 293, 295, 298, 322, 347, 361, 430, 451, 483, 502, 528, 573, 605, 610, 645, 669, 683, 701, 742, 754, 794, 826, 838, 839, 855, 871, 892, 897, 911, 918, 964, 972});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort80) {
  s21::list<int> lst({740, 258, 783, 345, 702, 138, 584, 431, 924, 364, 967, 192, 597, 751, 443, 88, 152, 551, 910, 434, 726, 391, 4});
  s21::list<int> res({4, 88, 138, 152, 192, 258, 345, 364, 391, 431, 434, 443, 551, 584, 597, 702, 726, 740, 751, 783, 910, 924, 967});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort81) {
  s21::list<int> lst({31, 254, 530, 291, 988, 65, 525, 681});
  s21::list<int> res({31, 65, 254, 291, 525, 530, 681, 988});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort82) {
  s21::list<int> lst({467, 380, 404, 652, 237, 422, 682, 58, 976, 607, 765, 979, 675, 231, 566, 295, 986, 611, 549, 590, 18, 787, 222, 620, 325, 112, 944, 678, 829, 621, 642, 951, 417, 708, 999, 342, 722, 746, 205, 751, 733, 190, 37, 49, 774, 306, 611, 683, 764, 841, 950, 62, 178, 588, 919, 762, 129, 709, 721, 857, 162, 673, 78, 955, 874, 294, 848, 227, 305, 692, 752, 311, 502, 438, 708, 958, 72, 404, 606, 560, 105, 713, 771, 774, 31, 388, 351, 100, 701, 11, 930, 477, 827, 800, 168, 520, 955, 729, 705});
  s21::list<int> res({11, 18, 31, 37, 49, 58, 62, 72, 78, 100, 105, 112, 129, 162, 168, 178, 190, 205, 222, 227, 231, 237, 294, 295, 305, 306, 311, 325, 342, 351, 380, 388, 404, 404, 417, 422, 438, 467, 477, 502, 520, 549, 560, 566, 588, 590, 606, 607, 611, 611, 620, 621, 642, 652, 673, 675, 678, 682, 683, 692, 701, 705, 708, 708, 709, 713, 721, 722, 729, 733, 746, 751, 752, 762, 764, 765, 771, 774, 774, 787, 800, 827, 829, 841, 848, 857, 874, 919, 930, 944, 950, 951, 955, 955, 958, 976, 979, 986, 999});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort83) {
  s21::list<int> lst({41, 641, 474, 171, 943, 929, 225, 504, 777, 32, 668, 716, 796, 381, 321, 805, 986, 964, 46, 456, 742, 887, 45, 139, 637, 226, 870, 375, 958, 518, 860, 264, 235, 878, 400, 675, 692, 308, 748, 245, 404, 400, 174, 180, 363, 490, 352, 876, 182, 277, 493, 532, 58, 907, 42, 892, 699, 163, 236, 62, 977, 815, 544, 917, 990, 711, 311, 953, 832, 291, 513, 878, 31, 213, 276, 606, 789, 464, 607, 332, 33, 894, 780, 961, 419, 749, 167, 200, 980, 188, 461, 750, 722, 917, 253});
  s21::list<int> res({31, 32, 33, 41, 42, 45, 46, 58, 62, 139, 163, 167, 171, 174, 180, 182, 188, 200, 213, 225, 226, 235, 236, 245, 253, 264, 276, 277, 291, 308, 311, 321, 332, 352, 363, 375, 381, 400, 400, 404, 419, 456, 461, 464, 474, 490, 493, 504, 513, 518, 532, 544, 606, 607, 637, 641, 668, 675, 692, 699, 711, 716, 722, 742, 748, 749, 750, 777, 780, 789, 796, 805, 815, 832, 860, 870, 876, 878, 878, 887, 892, 894, 907, 917, 917, 929, 943, 953, 958, 961, 964, 977, 980, 986, 990});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort84) {
  s21::list<int> lst({221, 493, 982, 73, 820, 221, 905, 750, 353, 531, 693, 567, 106, 978, 873, 136, 327, 427, 275, 294, 672, 88, 466, 864, 682, 637, 925, 327, 757, 635, 663, 273, 512, 32, 961, 337, 640, 95, 965, 60, 736, 81, 397, 521, 575, 720, 94, 53, 925, 265, 214, 273, 766, 106, 760, 482, 745, 864, 389, 518, 252, 33, 134, 43, 389, 139, 424, 7, 58, 346, 391, 781, 922, 93, 925, 889, 595, 974, 159, 1, 493, 974, 708, 297, 343});
  s21::list<int> res({1, 7, 32, 33, 43, 53, 58, 60, 73, 81, 88, 93, 94, 95, 106, 106, 134, 136, 139, 159, 214, 221, 221, 252, 265, 273, 273, 275, 294, 297, 327, 327, 337, 343, 346, 353, 389, 389, 391, 397, 424, 427, 466, 482, 493, 493, 512, 518, 521, 531, 567, 575, 595, 635, 637, 640, 663, 672, 682, 693, 708, 720, 736, 745, 750, 757, 760, 766, 781, 820, 864, 864, 873, 889, 905, 922, 925, 925, 925, 961, 965, 974, 974, 978, 982});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort85) {
  s21::list<int> lst({35, 73, 683, 19, 349, 76, 372, 979, 665, 685, 594, 137, 929, 649, 106, 686, 147, 870, 72, 722, 241, 764, 108, 389, 295, 121, 966, 954, 469, 160, 985, 789, 883, 909, 596, 268, 582});
  s21::list<int> res({19, 35, 72, 73, 76, 106, 108, 121, 137, 147, 160, 241, 268, 295, 349, 372, 389, 469, 582, 594, 596, 649, 665, 683, 685, 686, 722, 764, 789, 870, 883, 909, 929, 954, 966, 979, 985});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort86) {
  s21::list<int> lst({437, 866, 76, 347, 562, 920, 869, 938, 626, 254, 27, 443, 899, 385, 666, 209, 749, 435, 782, 323, 876, 155, 656, 947, 908, 133, 74, 760, 779, 776, 736, 20, 823, 672, 423, 224, 50, 672, 534, 877, 664, 124, 416, 803, 328, 147, 839, 180, 173, 532, 931, 481, 433, 67, 321, 371, 833, 51});
  s21::list<int> res({20, 27, 50, 51, 67, 74, 76, 124, 133, 147, 155, 173, 180, 209, 224, 254, 321, 323, 328, 347, 371, 385, 416, 423, 433, 435, 437, 443, 481, 532, 534, 562, 626, 656, 664, 666, 672, 672, 736, 749, 760, 776, 779, 782, 803, 823, 833, 839, 866, 869, 876, 877, 899, 908, 920, 931, 938, 947});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort87) {
  s21::list<int> lst({763, 30, 55, 303, 804, 490, 493, 901, 591, 28, 93, 32, 625, 740, 66, 975, 472, 576, 410, 587, 352, 612, 429, 593, 142, 279, 10, 966, 110, 150, 768, 776, 326, 84, 158, 972, 731, 23, 315, 549, 193, 408, 551, 295, 670, 447, 752, 674, 300, 34, 786, 919, 159, 627, 124, 378, 799, 988, 698, 771, 530, 561, 69, 7, 962, 623, 736, 861, 488, 696, 186, 106, 489, 215, 380, 209, 211, 663, 119, 61, 431, 80, 914, 476, 433, 619, 907, 791});
  s21::list<int> res({7, 10, 23, 28, 30, 32, 34, 55, 61, 66, 69, 80, 84, 93, 106, 110, 119, 124, 142, 150, 158, 159, 186, 193, 209, 211, 215, 279, 295, 300, 303, 315, 326, 352, 378, 380, 408, 410, 429, 431, 433, 447, 472, 476, 488, 489, 490, 493, 530, 549, 551, 561, 576, 587, 591, 593, 612, 619, 623, 625, 627, 663, 670, 674, 696, 698, 731, 736, 740, 752, 763, 768, 771, 776, 786, 791, 799, 804, 861, 901, 907, 914, 919, 962, 966, 972, 975, 988});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort88) {
  s21::list<int> lst({711, 728, 130, 560, 862, 980, 509, 20, 953, 915, 290, 331, 263, 276, 495, 393, 628, 422, 787, 845, 430, 622, 651, 652, 210, 399, 726, 357, 891, 291, 522, 978, 157, 757, 557, 515, 504, 473, 845, 358, 156, 541, 590, 287, 653, 466, 490, 442, 74, 11, 929, 338, 418, 423, 332, 44, 765, 435, 599, 518, 251, 209, 849, 973, 130, 67, 236, 827, 230, 150, 170, 264, 276, 557, 682, 418, 916, 64, 744, 384, 164, 798, 414, 950, 398, 1, 152, 459, 654, 65, 965});
  s21::list<int> res({1, 11, 20, 44, 64, 65, 67, 74, 130, 130, 150, 152, 156, 157, 164, 170, 209, 210, 230, 236, 251, 263, 264, 276, 276, 287, 290, 291, 331, 332, 338, 357, 358, 384, 393, 398, 399, 414, 418, 418, 422, 423, 430, 435, 442, 459, 466, 473, 490, 495, 504, 509, 515, 518, 522, 541, 557, 557, 560, 590, 599, 622, 628, 651, 652, 653, 654, 682, 711, 726, 728, 744, 757, 765, 787, 798, 827, 845, 845, 849, 862, 891, 915, 916, 929, 950, 953, 965, 973, 978, 980});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort89) {
  s21::list<int> lst({385, 31, 73, 672, 319, 87, 524, 122, 65, 136, 695, 645, 468, 370, 684, 997, 731, 17, 922, 576, 718, 333, 229, 953, 494, 835, 704, 132, 359, 53, 346, 952, 269, 787, 204});
  s21::list<int> res({17, 31, 53, 65, 73, 87, 122, 132, 136, 204, 229, 269, 319, 333, 346, 359, 370, 385, 468, 494, 524, 576, 645, 672, 684, 695, 704, 718, 731, 787, 835, 922, 952, 953, 997});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort90) {
  s21::list<int> lst({313, 593, 567, 257, 875, 938, 476, 548, 215, 705, 357, 212, 89, 124, 851, 89, 809, 654, 559, 280, 796, 907, 350, 264, 564, 874, 236, 723, 344, 103, 622, 839, 986, 501});
  s21::list<int> res({89, 89, 103, 124, 212, 215, 236, 257, 264, 280, 313, 344, 350, 357, 476, 501, 548, 559, 564, 567, 593, 622, 654, 705, 723, 796, 809, 839, 851, 874, 875, 907, 938, 986});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort91) {
  s21::list<int> lst({685, 988, 811, 838, 916, 322});
  s21::list<int> res({322, 685, 811, 838, 916, 988});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort92) {
  s21::list<int> lst({797, 496, 283, 15, 411, 830, 457, 158, 119, 580, 123, 241, 61, 848, 386, 964, 414, 752, 521, 510, 834, 320, 212, 590, 745, 829, 497, 864, 160, 311, 919, 806, 998});
  s21::list<int> res({15, 61, 119, 123, 158, 160, 212, 241, 283, 311, 320, 386, 411, 414, 457, 496, 497, 510, 521, 580, 590, 745, 752, 797, 806, 829, 830, 834, 848, 864, 919, 964, 998});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort93) {
  s21::list<int> lst({667, 581, 471, 819, 786, 614, 983, 706, 87, 823, 595, 807, 713, 639, 163, 526, 208, 556, 631, 863, 511, 954, 410, 608, 82, 7, 299, 76, 793, 601, 399, 528, 384, 677, 674, 193, 746, 596, 879, 672, 964, 325, 151, 712, 198, 269, 262, 895, 752, 405, 416, 814, 185, 504, 496, 269, 760, 279, 755, 514, 432, 940, 507, 137, 263, 108, 163, 538, 461, 705, 916, 4, 324, 512, 346, 631, 60, 614, 6, 620, 480, 573, 893, 329, 819, 252, 548, 384, 166, 313, 632, 608, 979, 543, 109, 367, 965, 601, 920});
  s21::list<int> res({4, 6, 7, 60, 76, 82, 87, 108, 109, 137, 151, 163, 163, 166, 185, 193, 198, 208, 252, 262, 263, 269, 269, 279, 299, 313, 324, 325, 329, 346, 367, 384, 384, 399, 405, 410, 416, 432, 461, 471, 480, 496, 504, 507, 511, 512, 514, 526, 528, 538, 543, 548, 556, 573, 581, 595, 596, 601, 601, 608, 608, 614, 614, 620, 631, 631, 632, 639, 667, 672, 674, 677, 705, 706, 712, 713, 746, 752, 755, 760, 786, 793, 807, 814, 819, 819, 823, 863, 879, 893, 895, 916, 920, 940, 954, 964, 965, 979, 983});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort94) {
  s21::list<int> lst({669, 147, 51, 150, 398, 808, 378, 213, 401, 244, 456, 782, 757, 57, 559, 898, 546, 171, 887, 211, 828, 502, 697, 529, 399, 185, 662, 548, 411, 70, 639, 29, 135, 998, 472, 413, 329, 85, 671, 567, 778});
  s21::list<int> res({29, 51, 57, 70, 85, 135, 147, 150, 171, 185, 211, 213, 244, 329, 378, 398, 399, 401, 411, 413, 456, 472, 502, 529, 546, 548, 559, 567, 639, 662, 669, 671, 697, 757, 778, 782, 808, 828, 887, 898, 998});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort95) {
  s21::list<int> lst({81, 186, 964, 353, 207, 0, 613, 682, 571, 84, 539, 607});
  s21::list<int> res({0, 81, 84, 186, 207, 353, 539, 571, 607, 613, 682, 964});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort96) {
  s21::list<int> lst({955, 156, 507, 432, 13, 709, 979, 237, 933, 53, 54, 454, 799, 333, 442, 618, 572, 447, 628, 388, 451});
  s21::list<int> res({13, 53, 54, 156, 237, 333, 388, 432, 442, 447, 451, 454, 507, 572, 618, 628, 709, 799, 933, 955, 979});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort97) {
  s21::list<int> lst({904, 582, 380, 719, 234, 664, 444, 846, 414, 438, 182, 273, 132, 603, 260, 805, 787, 49, 441, 586, 202, 486, 409, 306, 88, 746, 565, 195, 39, 542, 678, 749, 398, 872, 543, 89, 451, 78, 829, 478, 133, 849, 966, 784, 984, 513, 691, 739, 263, 743, 481, 630, 957, 239, 105, 331, 971, 20, 460, 715, 811, 872, 876, 105, 823});
  s21::list<int> res({20, 39, 49, 78, 88, 89, 105, 105, 132, 133, 182, 195, 202, 234, 239, 260, 263, 273, 306, 331, 380, 398, 409, 414, 438, 441, 444, 451, 460, 478, 481, 486, 513, 542, 543, 565, 582, 586, 603, 630, 664, 678, 691, 715, 719, 739, 743, 746, 749, 784, 787, 805, 811, 823, 829, 846, 849, 872, 872, 876, 904, 957, 966, 971, 984});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort98) {
  s21::list<int> lst({490, 661, 580, 512, 865, 85, 266, 341, 158, 844, 60, 76, 251, 532, 751, 15, 449, 865, 891, 931, 524, 216, 69, 901, 345, 758, 79});
  s21::list<int> res({15, 60, 69, 76, 79, 85, 158, 216, 251, 266, 341, 345, 449, 490, 512, 524, 532, 580, 661, 751, 758, 844, 865, 865, 891, 901, 931});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Sort99) {
  s21::list<int> lst({269, 161});
  s21::list<int> res({161, 269});
  lst.sort();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Clear0) {
  s21::list<int> lst({841, 533, 134, 1, 711, 670, 198, 2, 595, 107, 443, 437, 143, 452, 68, 952, 217, 756, 676, 382, 668, 191, 181, 171, 441, 4, 834, 989, 430, 677, 972, 729, 997, 859, 791, 985, 999, 22, 350, 132, 733, 437});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear1) {
  s21::list<int> lst({904, 759, 860, 341, 815, 549, 291, 678, 420, 925, 454, 32, 389, 35, 740, 21, 177, 405, 872, 364, 576, 111, 570, 961, 987, 793, 973, 177, 582, 274, 719, 996, 124, 425, 759, 362, 754, 589, 12, 577, 43});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear2) {
  s21::list<int> lst({844, 782});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear3) {
  s21::list<int> lst({496, 464, 599, 994, 339, 196, 699, 268, 976, 255, 108, 202, 309, 382, 643, 613, 557, 928, 103, 891, 528, 963, 725, 221, 110, 568, 855, 552, 212, 570, 508, 640, 831, 91, 388, 951, 8, 312, 83, 230, 730, 900, 602, 973, 379, 217, 523, 477, 472, 489, 617, 977, 167, 544, 550, 682, 755, 127, 25, 369, 430, 950, 843, 216, 341, 306, 496, 719, 414, 527, 119, 76, 500, 207, 344, 570, 542, 377, 380, 626, 994, 940, 678, 678, 594, 178, 53, 221, 889, 624, 704, 138, 421, 112, 23, 81, 501});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear4) {
  s21::list<int> lst({373, 732, 775, 59, 525, 964, 81, 475, 844, 19, 755, 339, 531, 312, 575, 663, 518, 224, 585, 326, 130, 195, 979, 325, 550, 745, 907, 548, 36, 379, 801, 951, 509, 575, 683, 149, 827, 388, 142, 55, 470, 470, 490, 333, 607, 280, 725, 881, 402, 411, 479, 42, 962, 835, 124, 462, 560, 651, 296});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear5) {
  s21::list<int> lst({946, 409, 488, 670, 499, 753, 855, 114, 711, 189, 191, 409, 491, 644, 342, 716, 722, 0, 36, 910, 937, 901, 361, 94, 453, 896, 739, 124, 485});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear6) {
  s21::list<int> lst({131, 234, 384, 682, 961, 881, 479, 320, 985, 191, 734, 874, 340, 75, 123, 963, 380, 642, 837, 538, 992, 570, 801, 113, 249, 130, 42, 388, 616, 439, 512, 81, 335, 819, 213, 993, 170, 182, 15, 339, 470, 478, 294, 634, 553, 901, 641, 438, 516, 985, 849, 995, 703, 117, 186, 399, 199, 790, 523, 692, 57, 15, 94, 947, 27, 651, 769, 796, 330, 863, 286, 960, 345, 686, 514, 831});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear7) {
  s21::list<int> lst({752, 970, 56, 684, 269, 187, 11, 645, 689, 494});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear8) {
  s21::list<int> lst({254, 662, 127, 590, 468, 148, 507, 951, 287, 956, 198, 178, 42, 184, 616, 263, 228, 995, 267, 454, 12, 678, 972, 516, 418, 4, 527, 732, 498, 599, 695, 42, 8, 488, 288, 151, 764, 582, 0, 42, 808, 13, 852, 408, 81, 152, 780, 79, 45, 760, 879, 943, 527, 412, 275, 299, 598, 207, 702, 993, 101, 183, 290, 732, 561, 327, 414, 282, 970, 596, 532, 92, 539, 651, 346, 420, 809, 33, 996, 385});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear9) {
  s21::list<int> lst({876, 623, 447, 210, 986, 670, 745, 707, 821, 200, 928, 231, 18, 623, 730, 870, 210, 972, 384, 452, 61, 768, 719, 510, 238, 56, 376, 235, 366, 82, 904, 761, 352, 816, 206, 560, 336, 308, 179, 781, 354, 458, 621, 612, 900, 90, 836, 502, 693, 320, 983, 571, 786, 185, 95, 164, 238, 818, 789, 394, 45, 81, 123, 72, 362, 977, 598, 106, 989, 467, 454});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear10) {
  s21::list<int> lst({252, 838, 344, 993, 491, 600, 840, 528, 217, 872, 954, 984, 338, 811, 894, 198, 558, 416, 289, 551, 235, 114, 681, 145, 437, 844, 672, 662, 81, 98, 789, 451, 781, 636, 774, 812, 175, 989, 433, 437, 76, 392, 269, 798, 69, 684, 875, 695, 250, 314, 585, 635, 741, 572, 180, 12, 595, 832, 644, 681, 799, 929, 693, 337, 923, 597, 234, 576, 88, 590, 78, 690, 721, 887, 341, 605, 912, 301, 758, 491, 976, 920, 269, 679, 270, 883});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear11) {
  s21::list<int> lst({976, 726, 28, 143, 302, 386, 844, 105, 686, 210, 5, 332, 939, 793, 657, 693, 92, 864, 676, 353, 543, 313, 220, 132, 318, 749, 915, 535, 226, 894, 10, 192, 555, 893, 296, 294, 282, 8, 217, 904, 340, 140, 216, 40, 616, 156, 644, 944, 317, 105, 131, 624, 320, 602, 432, 787, 980, 837, 695, 166, 28, 296, 971, 207, 849});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear12) {
  s21::list<int> lst({675, 167, 881, 397, 912, 834, 667, 236, 521, 453, 608, 859, 415, 466, 579, 72, 395, 52, 980, 675, 749});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear13) {
  s21::list<int> lst({859, 653, 368, 169, 533, 909, 672, 117, 348, 923});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear14) {
  s21::list<int> lst({420, 909, 580, 718, 544, 339, 919, 671, 605, 650, 381, 842, 767, 479, 724, 760, 327, 258, 438, 522, 310, 29, 876, 223, 166, 203, 294, 270, 523, 109, 590, 779, 324, 574, 995, 171, 918, 631, 180, 393, 389, 364, 280, 46, 186, 453, 40, 808, 63, 104, 13, 762, 537, 13, 243, 725, 759, 970, 334, 24, 395, 876, 959, 463, 339, 360, 416, 699});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear15) {
  s21::list<int> lst({537, 150, 795, 569, 340, 799, 383, 446, 482, 514, 933, 533, 690, 61, 384, 990, 685, 875, 391, 291, 387, 528, 461, 886, 850, 859, 408, 571, 83, 230});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear16) {
  s21::list<int> lst({723, 145, 520, 748, 852, 679, 78, 865, 52, 842, 558, 813, 876, 209, 629, 552, 635});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear17) {
  s21::list<int> lst({156, 606, 624, 317, 835, 471, 970, 345, 210, 903, 939, 259, 81, 736, 687, 756, 705, 926, 196, 220, 256, 218, 285, 65, 476, 763});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear18) {
  s21::list<int> lst({87, 805, 630, 658, 482, 473, 916, 378, 607, 169, 372, 876, 446, 696, 659, 169, 733, 206, 835, 119, 484, 679, 134, 553, 185, 55, 880, 653, 939, 476, 677, 823, 389, 19, 902, 112, 341, 418, 88, 515, 351, 652, 801, 318, 452, 762, 736, 714, 468, 199, 870, 777, 514, 409, 9, 723, 87, 399, 229, 417, 485, 34, 386, 462, 981, 732, 545, 136, 9, 728, 255});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear19) {
  s21::list<int> lst({135, 433, 779, 968, 945, 281, 88, 303, 907, 85, 663, 570, 308, 63, 310, 388, 549, 133, 98, 185, 241});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear20) {
  s21::list<int> lst({782, 151, 399, 232, 620, 887, 302, 716, 31, 437, 129, 768, 598, 284, 634, 392, 28, 371, 329, 560, 145, 91, 282, 511, 72, 825, 647, 539, 328, 313, 839, 507, 200, 954, 123, 574, 2, 354, 762, 644, 659, 932, 399, 350, 545, 708, 908, 536, 504, 35, 267, 767, 815, 363, 848, 996, 568, 963, 833, 824, 879, 553, 20, 96, 583, 399, 683, 861, 651, 450, 433, 539, 331, 907, 533, 229, 56, 648, 832, 986, 879, 559, 620, 309, 779, 560, 131, 534, 860, 380, 267, 604, 242, 143, 375, 953, 955, 607, 31, 293});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear21) {
  s21::list<int> lst({24, 825, 18, 553, 988, 322, 317, 243, 451, 346, 896, 616, 434, 80, 325, 122, 125, 569, 222, 351, 45, 696, 516, 503, 505, 313, 275, 392, 679, 601, 331, 486, 282, 539, 788, 372, 685, 836, 774, 240, 57, 582, 971, 496, 126, 339, 602, 958, 493, 679, 976, 793, 335, 675, 75, 562, 51, 954, 25, 285, 395, 673, 991, 90});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear22) {
  s21::list<int> lst({603, 863, 199, 690, 388, 787, 264, 181, 443, 66, 29, 735, 837, 979, 524, 694, 678, 702, 27, 953, 703, 650, 149, 843, 203, 148, 122, 116, 950, 749, 33, 317, 881, 390, 321, 465, 845, 61, 537, 490, 583, 555, 561, 514});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear23) {
  s21::list<int> lst({49, 296, 260, 257, 666, 162, 465, 145, 23, 563, 679, 871, 321, 419, 639, 551, 909, 881, 184, 250, 590, 246, 961, 736, 258, 91, 196, 255, 115, 38, 135, 230, 486, 856, 924, 933, 608, 377, 200, 531, 572, 859, 664, 283, 46, 893, 465, 258, 34, 61});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear24) {
  s21::list<int> lst({687, 431, 683, 691, 604, 232, 371, 773, 896, 795, 486, 340, 688, 118, 777, 584, 957, 62, 773, 20, 869, 968, 830, 587, 190, 683, 28, 388, 723, 345, 545, 497, 694, 661, 915, 201, 242, 19, 623, 166, 386, 831, 261, 755, 661, 190, 363, 392});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear25) {
  s21::list<int> lst({298, 646, 229, 743, 867, 287, 325, 408, 473, 810, 598, 664, 406});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear26) {
  s21::list<int> lst({712, 648, 749, 988, 23, 364, 649, 463, 758, 73, 121, 427, 653, 259, 503, 125, 499, 520, 627, 313, 524, 708, 461, 881, 214, 694, 874, 222, 129, 414, 259, 153, 388, 770, 921, 647, 105, 93, 336, 885, 455, 931, 523, 912, 277, 946, 328, 229, 791, 19, 423, 862, 110, 865, 799, 590, 216, 29, 2, 304, 363, 712, 154, 15, 975, 225, 499, 963, 725, 406});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear27) {
  s21::list<int> lst({546, 436, 230, 119, 862, 913, 993, 34, 857, 209, 882});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear28) {
  s21::list<int> lst({565, 240, 715, 425, 30});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear29) {
  s21::list<int> lst({191, 447, 437, 678, 380, 518, 784, 41, 656, 389, 38, 267, 949, 890, 564, 994, 808, 162, 908, 171, 17, 904, 760, 679, 833, 94, 622, 821, 392, 349, 553, 192, 667, 103, 367, 488, 989, 789, 447, 211, 225, 472, 321, 54, 130, 395, 317, 347, 803, 525, 724, 898, 369, 214, 9, 45, 143, 474, 652, 414, 429, 811, 22, 585, 877, 552, 812, 670, 850, 377, 36, 711});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear30) {
  s21::list<int> lst({615, 822, 330, 640, 83, 144, 577, 162, 486, 181, 35, 607, 254, 411, 414, 488, 13, 812, 707, 822, 478, 307, 113, 50, 457, 421, 501, 909, 60, 207, 721, 861, 805});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear31) {
  s21::list<int> lst({703, 499, 376, 311, 878, 398, 878, 258, 556, 61, 255, 493, 389, 450, 371, 379, 809, 507, 971, 386, 196, 592, 769, 551, 843, 285, 423, 985, 707, 908, 891, 759, 419, 486, 49, 995, 529, 998, 684, 490, 447, 387, 882, 840, 602, 163, 877, 221, 890, 504, 45, 967, 79, 33, 211, 617, 549, 184, 727, 502, 862, 119});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear32) {
  s21::list<int> lst({161, 951, 511, 396, 386, 682, 653, 289, 562, 383, 592, 462, 107, 52, 574, 506, 666, 286, 861, 283, 912, 233, 333, 660, 867, 414, 385, 627});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear33) {
  s21::list<int> lst({30, 277, 978, 647, 594, 775, 727, 423, 610, 752, 486, 427, 909, 762, 154, 243, 327, 244, 420, 169, 776, 623, 304, 195, 548, 103, 834, 370, 80, 146, 233, 77, 754, 23, 405, 476, 426, 254, 492, 508, 958, 771, 287, 287, 947, 794, 907, 772, 743, 448, 501, 938, 36, 821, 186, 325, 17, 840, 937, 226, 522, 424, 417, 702, 855, 895, 735, 26, 344, 184});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear34) {
  s21::list<int> lst({353, 396, 426, 225, 819, 355, 61, 191, 968, 459, 702, 353, 73, 143, 639, 285, 797, 943, 681, 816, 881, 14, 375, 261, 215, 502, 704, 473, 68, 280, 479, 131, 566, 368, 808, 536, 397, 178, 706, 956, 452, 343, 445, 393, 753, 34, 90, 900, 488, 871, 258, 329, 577, 867, 200, 434, 851, 923, 256, 243, 998, 822, 916, 349, 434, 201, 61, 313, 851, 646, 24, 619, 566, 997, 882, 527, 500, 927, 44, 861, 178, 984});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear35) {
  s21::list<int> lst({645, 424, 403, 685, 137, 468, 800, 375, 971, 415, 266, 144, 439, 776, 195, 94, 122, 55, 582, 695, 164, 500, 378, 11, 65, 739, 622, 844, 139, 384, 723, 83, 154, 328, 634, 162, 26, 351});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear36) {
  s21::list<int> lst({981, 235, 946, 378, 96, 262, 87, 120, 725, 655, 267, 882, 176, 265, 122, 617, 505, 440, 287, 411, 815, 615, 421, 125, 389, 132, 663, 624, 585, 921, 654, 664, 240, 370, 423, 883, 675, 336, 713, 387, 803, 115, 672, 883, 409, 350, 621, 53, 611, 202, 211, 267, 607, 624, 691, 740, 878, 600, 772, 571, 504, 409, 950, 526, 579, 686, 352, 710, 526, 101, 781});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear37) {
  s21::list<int> lst({280, 714, 420, 665, 813, 828, 879, 698, 392, 603, 15, 811, 233, 774, 927, 881, 508, 287, 321, 480, 640, 259, 814, 113, 255, 541, 325, 635, 37, 162, 884, 629, 794, 509, 249, 635, 311, 123});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear38) {
  s21::list<int> lst({698, 891, 45, 187, 341, 853, 850, 604, 467, 782, 856, 627, 394, 700, 478, 20, 492, 947, 872, 200, 263, 925, 996, 566, 492, 642, 213, 305, 644, 529, 582, 275, 186, 87, 656, 900, 31, 119, 859, 874, 216, 769, 557, 39, 826, 425, 690, 553, 988, 8, 851, 660, 198});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear39) {
  s21::list<int> lst({671, 380, 130, 445, 58, 961, 174, 460, 846, 688, 87, 999, 250, 425, 682, 38, 991, 298, 302, 618, 974, 719, 494, 396, 265, 931, 357, 768, 799, 162, 689, 566, 8, 399, 722, 633, 862, 307, 749, 530, 890, 21, 389, 535, 166, 38, 98, 566, 388, 117, 203, 633, 887, 343, 282, 949, 649, 754, 326, 875, 181, 333, 469});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear40) {
  s21::list<int> lst({529, 523, 216, 708, 135, 769, 346, 708, 333, 806, 308, 873, 397, 727, 450, 938, 743, 659, 944, 781, 728, 659, 345, 325, 490, 312, 258, 733, 939, 420, 885, 538, 399, 729, 881, 893, 776, 454, 122, 844, 931, 563});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear41) {
  s21::list<int> lst({174, 54, 642, 285, 561, 440, 378, 177, 46, 526, 840, 566, 395, 589, 161, 616, 674, 597, 316, 769, 677, 765});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear42) {
  s21::list<int> lst({58, 133, 394, 317, 381, 125, 531, 124, 574, 67, 655, 230, 527, 663, 928, 620, 841, 145, 165, 638, 766, 816, 603, 214, 705, 900, 413, 217, 9, 701, 169, 596, 482, 884, 641, 443, 676, 462, 99, 489, 132, 9, 224, 780, 611, 760, 331, 672, 307, 348, 951, 621, 628, 456, 659, 261, 402, 745, 878, 329, 603, 466, 866, 106, 680, 96, 651, 140, 872, 564, 43, 445, 506, 739, 606, 594, 1, 545, 678, 350, 11, 840, 880, 703, 750, 557, 19, 468, 336, 389, 877, 834, 388});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear43) {
  s21::list<int> lst({598, 75, 666, 617, 950, 55, 131, 538, 17, 766, 495, 582, 273, 60, 370, 382, 125, 716});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear44) {
  s21::list<int> lst({896, 754, 739, 879, 698, 701, 17, 782, 603, 767, 96, 653, 192, 506, 873, 754, 510, 208, 185, 515, 57, 878, 842, 376, 226, 511, 687, 789, 718, 160, 166, 615, 138, 180, 27, 490, 773, 296, 999, 922, 923, 566, 965, 829, 922, 662, 494, 369, 382, 582, 852, 203, 426, 158, 79, 704, 774, 652, 180, 701, 662, 171, 495, 346, 973, 164, 830, 615, 759, 452, 892, 847, 444, 421, 176, 331, 529, 938, 257, 700, 823});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear45) {
  s21::list<int> lst({674, 438, 530, 396, 647, 619, 479, 716, 44, 982, 396, 520, 425, 971, 747, 325, 671, 504, 399, 687, 775, 887, 106, 895, 211, 125, 250, 411, 32, 407, 100, 18, 458, 386, 857, 340, 340, 776});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear46) {
  s21::list<int> lst({15, 732, 144, 586, 21, 387, 200, 348, 277, 411, 691, 936, 849, 934, 440, 931, 241, 964, 276, 68, 369, 259, 124, 879, 80, 608, 964, 585, 122, 154, 617, 869, 750, 421, 165, 497, 321, 538, 323, 718, 767, 385, 343, 493, 652, 886, 278, 737, 882, 673, 575, 186, 105, 42, 949, 606, 296, 72, 933, 591, 885, 620, 119, 136, 993, 527, 98});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear47) {
  s21::list<int> lst({956, 853, 682, 87, 673, 617, 794, 884, 142, 642, 554, 974, 453, 212, 674, 166, 802});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear48) {
  s21::list<int> lst({782, 72, 535, 7, 840, 375, 763, 277, 391, 447, 79, 536, 330, 287, 309, 129, 319, 530, 678, 433, 567, 265, 72, 416, 780, 723, 704, 208, 470, 178, 333, 985, 647, 485, 131, 402, 271, 776, 330, 364, 618, 959, 997, 726, 462, 950, 735, 568, 905, 837, 258, 842, 386, 486, 873, 981, 636, 3, 496, 958, 133, 88, 667, 827, 58, 413, 435, 733, 455, 331, 432, 925, 53, 911, 481, 52, 315, 832, 66, 677, 393, 932, 920, 408, 548, 265, 952});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear49) {
  s21::list<int> lst({602, 555, 363, 535, 959, 954, 734, 238, 791, 508, 549, 94, 916, 655, 107, 966, 569, 409, 963, 104, 926, 337, 561, 122, 498, 242, 14, 936, 81, 583, 647, 395, 493, 102, 147, 753, 608, 417, 965, 462, 231, 712, 14, 990, 66, 360, 614, 817, 966, 279, 827, 609, 509, 33, 445, 636, 763, 141, 96, 151, 349, 107, 155, 642, 250, 996, 731, 164, 666, 718, 83, 227, 596, 616, 712, 394});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear50) {
  s21::list<int> lst({944, 873, 334, 372, 45, 812, 191, 591, 601, 171, 918, 345, 736, 920, 39, 197, 128, 187, 620, 69, 383, 156, 259, 299, 860, 558, 598, 409, 660, 381, 634, 180, 343, 386, 282, 75, 96, 304, 20, 313, 981, 246, 617, 948, 861, 530, 445, 489, 267, 995, 124, 771, 281, 331, 644});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear51) {
  s21::list<int> lst({775, 123, 778, 280, 705, 177, 143, 114, 914, 522, 462, 187, 890, 356, 229, 657, 9, 573, 886, 221, 91, 982, 295, 593, 930, 86, 587, 407, 985, 560, 20, 13, 27, 939, 912, 167, 443, 716, 360, 920, 892, 718, 348, 438, 784, 108, 830, 573, 346, 636, 291, 788, 671, 39, 867, 97, 5, 522, 455, 115, 442, 450, 944, 828, 902, 263, 226, 565, 726, 411, 78, 607, 670, 442, 588, 850, 769, 621, 910, 752, 929, 145, 151, 764, 246, 230, 669, 947, 981, 165, 520, 169, 471, 106, 252, 587, 872});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear52) {
  s21::list<int> lst({224, 859, 996, 997, 380, 245, 380, 276, 805, 152, 13, 947, 82, 128, 249, 844, 250, 255, 72, 737, 709, 707, 705, 36, 247, 220, 700, 930, 344, 617, 969});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear53) {
  s21::list<int> lst({11, 652, 22, 808, 348, 265, 230, 88, 167, 329, 13, 607, 957, 34, 173, 217, 154, 195, 215, 198, 354, 415});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear54) {
  s21::list<int> lst({947, 382, 492, 255, 748, 804, 338, 7, 828, 129, 702, 565, 667, 245});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear55) {
  s21::list<int> lst({342, 193});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear56) {
  s21::list<int> lst({604, 574, 365, 603, 234, 471, 5, 363, 477, 452, 70, 45, 742, 654, 421, 371, 11, 162, 259, 590, 352, 162, 135, 986, 517, 344, 225, 392, 29, 799, 530, 7, 358, 315, 984, 165, 589, 54, 923, 94, 391, 573, 959, 991, 626, 319, 486, 633, 962, 548, 269, 743, 497, 417, 680, 918, 440, 933, 627, 463, 333, 820, 781, 458, 569, 915, 756, 652, 885, 729, 998, 58, 842, 516, 584, 450, 826, 119, 664, 824, 675, 26, 192, 929, 27, 33, 346, 104, 797, 262, 157, 539, 442, 14, 557});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear57) {
  s21::list<int> lst({856, 347, 566, 185, 72, 767, 264, 553, 255, 851, 857, 933, 124, 638, 701, 452, 275, 282, 806, 776, 157, 854, 37, 183, 811, 928, 960, 663, 632, 497, 855, 767, 226, 97, 657, 344, 247, 977, 537, 614, 281, 718, 884, 606, 591, 723, 592, 50, 484, 200, 643, 554, 483, 990, 63, 37, 356, 130, 576, 237, 218, 271, 441, 222, 122, 982, 712, 71, 888, 915, 3});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear58) {
  s21::list<int> lst({596, 291, 148, 581, 905, 300, 770, 734, 565, 601, 54, 978, 390});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear59) {
  s21::list<int> lst({749, 583, 385, 867, 773, 820, 950, 987, 561, 616, 92, 741, 277, 969, 964, 532, 70, 388, 866, 905, 832, 503, 878, 362, 420, 877, 652, 255, 715, 830, 536, 639, 855, 626, 550, 862, 44, 139, 147, 671, 210, 989, 774, 286, 985, 582, 599, 150, 232, 924, 319, 466, 810, 563, 997, 341, 408, 371, 11, 320, 401});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear60) {
  s21::list<int> lst({137, 833, 428, 904, 284, 686, 120, 802, 554, 219, 319, 370, 376, 601, 934, 950, 781, 483, 701, 643, 868, 148, 952, 916});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear61) {
  s21::list<int> lst({278, 997, 683, 225, 362, 794, 217, 665, 410, 95, 178, 885, 80, 359, 526, 671, 879, 457, 799, 664, 12, 25, 512, 375, 710, 253, 137, 980, 622, 837, 1, 827, 629, 718, 482, 589, 684, 56, 427, 347, 464, 610, 797, 27, 888, 678, 585, 269, 966, 149, 121, 425, 516, 146, 573, 89, 443, 978, 825, 526, 398, 808, 178, 768, 281, 582, 47, 899, 953, 978, 290, 355, 396, 138, 771, 92, 43, 663, 342, 323, 984, 991, 622, 219, 48, 122, 233, 437, 13, 468, 742});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear62) {
  s21::list<int> lst({106, 111, 741, 394, 813, 387, 106, 905, 700, 590, 532, 611, 804, 876, 705, 988, 52, 972});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear63) {
  s21::list<int> lst({610, 172, 647, 576, 20, 646, 265, 494, 547, 879, 467, 819, 917, 425, 888, 99, 979, 204, 633, 844, 33, 309, 494, 85, 733, 926, 176, 459, 779, 775, 727, 354, 130, 326, 37, 434, 810, 538, 282, 349, 107, 777, 960, 855, 838, 175, 865, 612, 265, 809, 920, 52, 861, 638, 817, 732, 652, 225, 93, 953, 840, 242, 589, 978, 76, 7, 535, 340, 556, 663, 800, 533});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear64) {
  s21::list<int> lst({670, 468, 224, 829, 388, 264, 782, 206, 523, 658, 17, 406, 829, 880, 701, 896, 825, 247, 117, 707, 299, 264, 536, 334, 26, 546, 360, 808, 781, 34, 529, 967, 408, 671, 93, 292, 858, 427, 229, 167, 367, 184, 380, 397, 934, 124, 34, 483, 116, 681, 743, 276, 460, 492, 922, 449, 517, 365, 35, 347, 547, 664, 391, 735, 985, 571, 252, 628, 622, 774, 597, 112, 498, 406, 591, 354, 537, 72, 209, 439, 14});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear65) {
  s21::list<int> lst({995, 799, 554, 998, 55, 939, 49, 419, 816, 555, 808, 48, 906, 912, 330, 211});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear66) {
  s21::list<int> lst({839, 880, 302, 926, 849});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear67) {
  s21::list<int> lst({562, 736, 390, 546, 203, 246, 791, 629, 194, 406, 287, 431, 729, 474, 557, 776, 400, 700, 625, 923, 995, 221, 923, 56, 608, 367, 982, 25, 459, 919, 789, 153, 682, 626, 911, 495, 116, 348, 692, 282, 918, 308, 786, 172, 876, 298, 318, 342, 321, 811, 374, 912, 464, 126, 262, 125, 820, 683, 52, 658, 409, 840, 935, 807, 214, 416, 112});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear68) {
  s21::list<int> lst({502, 164, 16, 113, 840, 548, 977, 71, 808, 226, 177, 88, 817, 835, 531, 639, 291, 883, 724, 732, 302, 379, 597, 929, 350, 79, 459, 453, 361, 881, 156, 243, 444, 647, 822, 544, 736, 284, 639, 794, 145, 687, 222, 146, 509, 313, 665, 870, 876, 148, 65, 329, 431, 940, 729, 897, 558, 29, 515, 588, 765, 335, 963, 773, 561, 991, 175, 659, 903, 881, 641, 64, 387, 705, 785, 380, 369, 273, 213, 658, 532, 215, 499, 933, 177, 17, 958, 606, 637, 502, 809, 345, 206});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear69) {
  s21::list<int> lst({324, 217, 351, 305, 225, 167, 704, 564, 501, 435, 400, 918, 193, 396, 864, 506, 726, 843, 556, 759, 726, 544, 996, 437, 372, 713, 560, 473, 667, 619, 700, 165, 565, 678, 752, 783, 342, 61, 987, 656, 166, 182, 718, 433, 762, 842, 13, 58, 787, 289, 703, 499, 518, 202, 917, 938, 170, 211, 115, 417, 677, 359, 484, 738, 589, 978, 944, 538, 623, 788, 635, 704, 326, 217, 605, 963, 666, 986, 417, 161, 648, 858, 215, 691, 211, 733, 881, 359});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear70) {
  s21::list<int> lst({817, 252, 11, 536, 38, 648, 891, 336, 330, 485, 535, 39, 777, 115, 119, 826, 81, 118, 550, 951, 922, 129, 908, 557, 881, 949, 26, 369, 15, 379, 183, 266, 229, 355, 174, 732, 191, 25, 117, 865, 108, 113, 516, 666, 233});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear71) {
  s21::list<int> lst({487, 634, 986, 299, 699, 668, 354, 560, 553, 895, 705, 123});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear72) {
  s21::list<int> lst({872, 358, 313, 752, 937, 81, 828, 589, 646, 884, 41, 179, 634, 43, 282, 537, 191, 914, 277, 885, 26, 678, 615, 122, 247, 627, 195, 193, 642, 70, 604, 241, 597, 766, 62, 601, 997, 873, 847, 384, 607, 425, 782, 216, 539, 787, 919, 986, 564, 555, 358, 267, 464, 185, 783, 685, 808, 463, 957, 207, 564, 610, 385, 136, 846, 887, 137, 737, 506, 992, 985, 22, 654, 251, 308, 733, 771, 790, 452, 255, 589, 235, 178, 267, 239, 465, 996, 229, 31, 282, 289, 154, 147, 842});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear73) {
  s21::list<int> lst({791, 314, 752, 553, 294, 947, 794, 30, 205, 172});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear74) {
  s21::list<int> lst({853, 172, 364, 70, 993, 315, 686, 59, 849, 175, 475, 174, 715, 444, 937, 791, 553, 144, 686, 302, 405, 135, 506, 222, 632, 140, 514, 152, 62, 620, 956, 271, 51, 656, 969, 546, 992, 562, 877, 114, 101, 991, 288, 87, 776, 313, 875, 303, 199, 714, 198, 107, 273, 543, 994, 994, 636, 107, 173, 462, 985, 946, 635, 29, 424, 880, 46, 239, 930, 140, 408, 669, 823, 350, 923, 148, 502, 375, 47, 585, 157, 427});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear75) {
  s21::list<int> lst({293, 79, 295, 284, 299, 206, 230, 759, 701, 331, 148, 534, 983, 524, 8, 196, 34, 3, 140, 358, 736, 212, 997, 869, 823, 540, 741, 316, 529, 758, 654, 344, 809, 498, 833, 631, 692, 987, 473, 258, 786, 518, 897, 563, 838, 647, 733, 132, 407, 684, 571, 909, 938, 22, 178, 206, 436, 183, 69});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear76) {
  s21::list<int> lst({904, 757, 581, 165, 806, 839, 430, 716, 353, 101, 501, 936, 596, 212, 155, 838, 940, 596, 644, 72, 291, 426, 503, 610, 874, 828, 355, 510, 288, 245, 538, 247, 891, 753, 652, 171, 539, 878, 735, 31, 346, 615, 510, 528, 452, 966, 40, 430, 960, 542, 456});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear77) {
  s21::list<int> lst({599, 728, 488, 429, 740, 664, 799, 308, 426, 727, 395, 695, 764, 293, 586, 388, 316, 404, 247, 463, 214, 586, 197, 9, 874, 916, 653, 959, 591, 586, 176, 359, 449, 987, 52, 64, 323, 974, 466, 118, 285, 580, 579, 49, 337, 703, 990, 400, 839, 775, 118, 351, 974, 932, 960, 587, 757, 663, 531, 763, 280, 798, 826, 475, 124, 474, 851, 838, 197});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear78) {
  s21::list<int> lst({746, 416, 153, 174, 186, 755, 913, 798, 88, 76, 648, 386, 271, 893, 920, 258, 447, 457, 313, 200, 296, 307, 875, 709, 900, 440, 723, 940, 28, 879, 207, 418, 69, 198, 834, 357, 686, 899, 584, 615, 443, 516});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear79) {
  s21::list<int> lst({755, 901, 410, 847, 730, 628, 168, 636, 396, 9, 385, 744, 310, 109, 972, 148, 373, 21, 400, 849, 864, 905, 722, 940, 866, 750, 875, 835, 324, 538, 680, 932, 69, 432, 803, 232, 84, 996, 574, 289, 439, 347, 848, 727, 205, 97, 287, 207, 331, 589, 427, 968, 124, 315, 489, 204, 722, 323, 867, 170, 164, 289});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear80) {
  s21::list<int> lst({938, 49, 212, 144, 914, 897, 501, 783, 703, 465, 55, 54, 7, 372, 295, 375, 11, 227, 92, 8, 218, 399, 379, 185, 761});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear81) {
  s21::list<int> lst({525, 700, 983, 721, 662, 977, 432, 441, 437, 125, 745, 355, 879, 529, 850, 952, 361, 550, 582, 64, 71, 128, 740, 492, 176, 739, 601, 725, 627, 114});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear82) {
  s21::list<int> lst({891, 205, 265, 228, 25, 396, 433, 721, 566, 773, 909, 892, 677, 561, 971, 485, 861, 697, 336, 592, 794, 427});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear83) {
  s21::list<int> lst({937, 861, 732, 443, 82, 616, 669, 17, 749, 195, 274, 262, 797, 934, 672, 497, 129, 946, 193, 598, 953, 912, 55, 786, 907, 692, 498, 53, 787, 19, 934, 627, 904, 625, 755, 457, 406, 740, 25, 244, 388, 820, 728, 362, 342, 124, 123, 628, 32, 646, 899, 951, 718, 534, 831, 805, 382, 52, 725, 584, 88});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear84) {
  s21::list<int> lst({883, 366, 465, 962, 678, 191, 653, 404, 159, 710, 111, 376, 574, 748, 669, 365, 650, 184, 705, 926, 384, 580, 803, 764, 105, 545, 11, 231, 170, 2, 265, 9, 447, 622, 882, 912, 661, 143, 650, 92, 336, 739, 691, 287, 173, 341, 926, 573, 944, 257, 949, 39, 629, 160, 710, 404, 749, 705, 470, 75, 71, 661, 194, 947, 494, 146, 761, 281, 987, 868, 227, 864, 287, 103, 929, 158, 862, 270, 211, 376, 628, 786, 807, 549, 823, 974, 965, 256, 7, 954, 167, 976, 800, 269});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear85) {
  s21::list<int> lst({625, 1, 978, 243, 9, 37, 54, 115, 950, 445, 666, 398, 343, 938, 191, 729, 206, 380, 858, 306, 608, 148, 897, 928, 768, 242, 610, 195, 563, 989, 239, 495, 84, 596, 318, 769, 994, 499, 66, 716, 856, 208, 677, 481, 612, 169, 405, 539, 354, 87, 476, 276, 915, 13, 783, 612, 661, 759, 473, 365, 685, 101, 828, 347, 114, 366, 46, 580, 532, 378, 610, 298, 13, 342, 377});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear86) {
  s21::list<int> lst({387, 727, 797, 875, 897, 329, 237, 160, 937, 495, 973, 455, 151, 933, 880, 962, 91, 75, 306, 371, 55, 430, 266, 241, 679, 972, 513, 852, 756, 193, 912, 840, 269, 127, 110, 407, 146, 689, 414, 445, 767, 458});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear87) {
  s21::list<int> lst({823, 666, 373, 262, 491, 2, 644, 414, 174, 345, 392, 26, 738, 917, 844, 963, 760, 357, 883, 428, 963, 901, 101, 869, 203, 227, 648, 244, 375, 921, 323, 493, 783, 503, 315, 338, 196, 68, 152, 270, 589, 474, 134, 18, 586, 920, 265, 379, 121, 53, 508, 787, 751, 546, 594, 81, 276, 118, 69, 238, 623, 720, 407, 337, 894, 659, 577, 182, 515, 534, 822, 787});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear88) {
  s21::list<int> lst({156, 54, 289, 479, 83, 913, 920, 382, 52, 139, 611, 108, 835, 716, 50, 492, 438, 239, 693, 924, 713, 854, 855, 847, 826, 690, 96, 113, 878, 59, 944, 333, 794, 246, 338, 1, 877, 349, 114, 925, 807, 683, 62, 881, 72, 481, 169, 688, 843, 172, 753, 27, 561, 223, 977, 310, 495, 637, 16, 822, 928, 313, 978, 111, 607, 647, 368, 244, 697, 680, 190, 192, 795, 323, 637, 701, 43, 694, 110, 600, 81, 352, 710, 996, 572, 742, 186, 746, 582, 1, 415});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear89) {
  s21::list<int> lst({387, 888, 52, 502, 427, 395, 374, 357, 906, 552, 863, 949, 957, 951, 573, 211, 367, 725, 357, 647, 89, 441, 755, 185, 85, 302, 606, 13, 64, 275, 505, 822, 713, 157, 644, 194, 233, 171, 348, 297, 130, 301, 149, 231, 360, 613, 240, 295, 634, 758, 296, 938, 488, 579, 388, 603, 804, 756, 294, 198, 622, 481, 47, 389, 540, 140, 559, 212, 753, 397, 97, 929, 974, 784, 595});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear90) {
  s21::list<int> lst({75, 73, 65, 994, 114, 758, 790, 149, 808, 603, 42, 147, 248, 940, 211, 738, 682, 305, 373, 690, 979, 176, 139, 687, 27, 684, 452, 798, 303, 117, 518, 427, 380, 902, 443, 163, 339, 430, 409, 139, 989, 895, 7, 687, 176, 517, 858, 202, 86, 291, 669, 498, 898, 878, 995, 205, 43, 42, 324, 423, 109, 725, 9, 129, 56, 465, 728, 776, 468, 267, 548, 709, 343});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear91) {
  s21::list<int> lst({127, 851, 871, 574, 718, 688, 120});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear92) {
  s21::list<int> lst({512, 453, 603, 179, 623, 725, 458, 809, 450, 710, 338, 803, 434, 763, 997, 700, 948, 162, 112, 740, 878, 680, 72, 416, 283, 68, 931, 840, 728, 302, 527, 676, 448, 796, 171, 665, 176, 148, 228, 41, 1, 20, 139, 315, 137, 239, 689, 742, 580, 850, 786, 458, 677, 536, 470, 356, 960, 619, 755, 633, 268, 813, 326, 60, 65, 616, 4, 32, 14, 753, 472, 640, 314, 979, 521, 211, 691, 83, 862, 548, 369, 58, 88, 786, 71});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear93) {
  s21::list<int> lst({62, 484, 583, 505, 249, 724, 851, 907, 922, 564, 331, 428, 62, 287, 939, 349, 198, 587, 107, 445, 850, 283, 31, 893, 706, 863, 537, 250, 747, 376, 682, 218, 39, 450, 378, 945, 653, 239, 926, 136, 29, 998, 489, 826, 546, 840, 552, 152, 973, 751, 850, 244, 787, 837, 411, 953, 748, 647, 826, 803, 298, 727, 804, 41, 819, 929, 48, 927, 97, 406});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear94) {
  s21::list<int> lst({375, 650, 655, 202, 933, 60, 929, 518, 55, 417, 991, 442, 806, 405, 478, 287, 887, 257, 356, 768, 357, 330, 171, 57, 776, 107, 598, 817, 457, 469, 491, 482, 494, 687, 140, 337, 240, 706, 989, 525, 386, 329, 309, 651, 585, 90, 613, 352, 414, 20, 957, 32, 443, 177, 453, 656, 22, 26, 748, 408, 204, 267, 665, 188, 427, 280, 136, 352, 200, 502});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear95) {
  s21::list<int> lst({430, 837, 938, 659, 232, 378, 816, 894, 920, 587, 823, 393, 952, 834, 300, 328, 640, 31, 381, 676, 897, 924, 659, 603, 260, 8, 329, 722, 451, 794, 839, 973, 319, 294, 711, 892, 358, 225, 460, 698, 609, 237, 578, 465, 967, 836, 631, 193, 28, 246, 931, 516, 182, 853, 918, 165, 456, 401, 652, 608, 190, 587, 382, 9});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear96) {
  s21::list<int> lst({217, 889, 263, 237, 164, 501, 916, 796, 601, 234, 163, 854, 849, 621, 909, 350, 413, 629, 690, 51, 525, 165, 570, 110, 496, 729, 293, 472, 191, 777, 604, 314, 991, 639, 132, 790, 884, 645, 283, 159, 708, 57, 710, 262, 904, 436, 513, 692, 870, 181, 684, 926, 864, 770, 506, 199, 744, 934, 739, 144, 798, 55, 350, 260, 672, 759, 396, 663, 200, 734, 380, 52, 295, 899, 700, 661, 677, 824, 486, 96, 34, 346, 519, 317, 486, 432, 599, 694, 567, 719, 519, 643, 821, 485});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear97) {
  s21::list<int> lst({940, 107, 119, 601, 419, 704, 228, 594, 765, 339, 444, 902, 550, 683, 176, 222, 371, 968, 211, 594, 873, 88, 715, 284, 282, 391, 381, 248, 282, 145, 69, 749, 771, 680, 900, 337, 252, 822, 653, 305, 217, 894, 265, 727, 954, 20, 700, 605, 413, 190, 690, 842, 499, 597, 80, 866, 671, 759, 676, 545, 447, 264, 221, 143});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear98) {
  s21::list<int> lst({588, 689, 583, 484, 45, 722, 97, 187, 220, 980, 74, 848, 18, 413, 179, 75, 952, 467, 314, 357, 20, 656, 395, 727, 317, 88, 613, 260, 519, 538, 23, 639, 988, 90, 304, 351, 384, 960, 409, 285, 665, 766, 177, 426, 177, 370, 776, 118, 867, 230, 677, 535, 878, 139, 728, 50, 943, 208, 706, 433, 187, 256, 698, 129, 455, 907, 753, 9, 485, 977, 280, 6, 196, 540, 99, 526, 573, 631, 791, 795, 917, 699, 354, 254, 959, 632, 517, 694, 861, 485, 896, 633, 269, 944, 70, 231, 529, 257});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Clear99) {
  s21::list<int> lst({812, 265, 756, 402, 501, 530, 760, 836, 508, 183, 141, 433, 143, 478, 168, 157, 674, 7, 131});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Unique0) {
  s21::list<int> lst({801, 945, 814, 693, 14, 539, 580, 739, 380, 272, 781, 954, 808, 950, 418, 294, 49, 831, 259, 809, 740, 365, 296, 50, 505, 973, 667, 452, 50, 535, 486, 332, 119, 838, 78, 630, 276, 803, 166, 617, 269, 170, 256, 600, 800, 388, 96, 808, 769, 826, 135, 804, 87, 119, 752, 915, 240, 10, 820});
  s21::list<int> res({256, 769, 259, 388, 135, 10, 781, 14, 269, 272, 915, 276, 535, 539, 667, 800, 801, 418, 803, 804, 294, 166, 808, 809, 296, 170, 814, 945, 49, 50, 820, 693, 950, 954, 826, 831, 580, 452, 838, 332, 973, 78, 87, 600, 96, 739, 740, 486, 617, 365, 752, 240, 630, 119, 505, 380});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique1) {
  s21::list<int> lst({904, 385, 927, 685, 423, 311, 389, 414, 562, 833, 756, 425, 859, 806, 888, 505, 596, 961, 767, 8, 262, 520, 753, 656, 460, 304, 797, 321, 644, 865, 829, 843, 483, 226, 815, 469, 91, 243, 79, 857, 307, 874, 692, 159, 509, 650, 470, 770, 958, 208, 165, 194, 62, 676, 494, 346});
  s21::list<int> res({385, 770, 644, 389, 262, 904, 8, 520, 650, 656, 797, 414, 927, 159, 676, 165, 806, 423, 425, 685, 815, 304, 562, 307, 692, 311, 829, 958, 62, 833, 961, 321, 194, 843, 460, 79, 208, 596, 469, 470, 857, 346, 859, 91, 865, 226, 483, 874, 494, 753, 243, 756, 888, 505, 509, 767});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique2) {
  s21::list<int> lst({420, 801, 145, 617, 948, 449, 752, 835, 697, 186, 305, 772, 119, 529, 138, 766, 994, 914, 314, 730, 430, 151, 793, 312, 468, 111, 849, 589, 868, 386, 119, 814, 531, 391, 177, 792, 363, 586, 175, 430, 18, 729, 4, 994, 86, 238, 958, 30, 81, 920, 632, 699, 111, 34, 455, 790, 421, 586, 483, 393, 661, 552, 56, 279, 246, 618, 304, 937, 428, 22, 733, 80, 221, 55});
  s21::list<int> res({386, 772, 4, 391, 393, 138, 145, 529, 914, 531, 18, 790, 151, 792, 793, 920, 661, 279, 22, 30, 801, 34, 420, 421, 552, 937, 428, 430, 814, 175, 305, 177, 304, 948, 55, 312, 697, 314, 186, 699, 56, 958, 449, 835, 455, 586, 589, 80, 849, 81, 468, 86, 729, 730, 733, 221, 994, 483, 868, 617, 618, 363, 238, 111, 752, 246, 119, 632, 766});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique3) {
  s21::list<int> lst({508, 389, 613, 272, 796, 172, 41, 163, 519, 335, 613, 433, 625, 919, 854, 957, 87, 519, 47, 357, 664, 560, 35, 708, 134, 704, 491, 791, 858, 345, 197, 658, 366, 579, 811, 524, 839, 325, 469, 760, 565, 204, 69, 72, 699, 961, 791, 44, 541, 757, 143, 659, 864, 908, 358, 841, 360, 805, 457, 316, 943, 333, 741, 508});
  s21::list<int> res({389, 134, 519, 524, 908, 143, 272, 658, 659, 919, 664, 791, 796, 541, 163, 35, 805, 41, 811, 172, 44, 47, 560, 433, 943, 565, 699, 316, 957, 704, 961, 579, 708, 197, 325, 839, 69, 72, 841, 457, 204, 333, 335, 469, 854, 87, 345, 858, 864, 613, 357, 358, 360, 741, 491, 366, 625, 757, 760, 508});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique4) {
  s21::list<int> lst({530, 553, 501, 730, 4, 201, 803, 826, 465, 196, 135, 674, 826, 674, 169, 929, 52, 804, 2});
  s21::list<int> res({929, 674, 803, 4, 196, 804, 135, 2, 553, 201, 169, 465, 530, 52, 501, 730, 826});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique5) {
  s21::list<int> lst({733, 260, 938, 837, 823, 670, 284, 899, 505, 214, 655, 485, 800, 127, 985, 734, 490, 277, 943, 154, 539, 167, 590, 768, 104, 746, 623, 883, 850, 144, 84, 240, 162, 203, 536, 780, 168, 65, 608, 56, 505, 159, 751, 229, 261, 758, 569, 468, 843, 638, 544, 120, 342, 551, 964, 37, 889, 433, 604, 751, 674, 461, 84, 370, 976, 449, 212, 749, 954, 701, 886, 539, 220, 181, 122, 150, 663, 717, 107, 297, 282});
  s21::list<int> res({536, 539, 544, 37, 551, 56, 569, 65, 590, 84, 604, 608, 104, 107, 623, 120, 122, 638, 127, 655, 144, 150, 663, 154, 670, 159, 162, 674, 167, 168, 181, 701, 203, 717, 212, 214, 220, 733, 734, 229, 746, 749, 751, 240, 758, 768, 260, 261, 780, 277, 282, 284, 800, 297, 823, 837, 843, 850, 342, 370, 883, 886, 889, 899, 938, 943, 433, 954, 449, 964, 461, 976, 468, 985, 485, 490, 505});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique6) {
  s21::list<int> lst({692, 46, 73, 416, 514, 793, 73, 801, 243, 544, 613, 779, 813, 226, 56, 587, 438, 360, 920, 185, 804, 731, 27, 486, 689, 571, 407, 724, 325, 332, 360, 746, 436, 569, 208, 503, 836, 937, 943, 523, 9, 875, 683, 773, 568, 305, 427, 337, 864, 288, 91, 2, 692, 374, 519, 221, 478, 293, 479, 355, 991, 535, 301, 155, 611, 799, 227, 573, 825, 605, 689, 398, 328, 585, 371, 342, 333, 816, 797, 62, 509, 433, 562, 515, 137, 334, 870, 245, 246, 951});
  s21::list<int> res({514, 2, 515, 519, 9, 523, 535, 27, 544, 46, 562, 56, 569, 568, 571, 573, 62, 73, 585, 587, 91, 605, 611, 613, 137, 155, 683, 689, 692, 185, 208, 724, 731, 221, 226, 227, 746, 243, 245, 246, 773, 779, 793, 797, 799, 288, 801, 804, 293, 813, 301, 816, 305, 825, 836, 325, 328, 332, 333, 334, 337, 342, 864, 355, 870, 360, 875, 371, 374, 398, 407, 920, 416, 937, 427, 943, 433, 436, 438, 951, 478, 479, 991, 486, 503, 509});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique7) {
  s21::list<int> lst({621, 666, 200, 253, 111, 62, 526, 739, 496, 47, 906, 66, 602, 39, 288, 995, 267, 938, 628, 656, 607, 388, 716, 374, 319, 100, 851, 146, 747, 987, 151, 216, 911, 8, 207, 551, 619, 153, 648, 400, 836, 990, 575, 805, 448, 33, 910, 685, 34, 332, 36, 584, 475, 894, 389, 790, 664, 868, 618, 485, 400, 728, 113, 168});
  s21::list<int> res({388, 389, 8, 648, 906, 267, 526, 911, 656, 400, 146, 910, 790, 151, 664, 153, 666, 288, 33, 34, 36, 805, 39, 551, 168, 938, 685, 47, 62, 319, 575, 448, 66, 836, 200, 584, 716, 332, 207, 851, 216, 728, 602, 987, 475, 990, 607, 739, 995, 100, 868, 485, 618, 747, 619, 621, 111, 496, 113, 628, 374, 253, 894});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique8) {
  s21::list<int> lst({786, 386, 55, 359, 644, 804, 931, 431, 658, 44, 614, 992, 718, 842, 945, 410, 826, 956, 961, 852, 781, 730, 653, 274, 951, 451, 608, 83, 216, 207, 430, 417, 639, 150, 725, 92, 411, 473, 592, 609, 337, 250, 674, 490, 193, 491, 284, 714, 251, 484, 398, 759, 156, 17, 844, 675, 301, 56, 242, 619, 84, 400, 792, 311, 798, 179, 245, 995, 93, 948, 35, 287, 397, 303, 273});
  s21::list<int> res({386, 644, 781, 653, 398, 400, 17, 786, 658, 274, 397, 150, 273, 792, 410, 411, 284, 156, 798, 287, 417, 674, 931, 804, 675, 35, 44, 301, 430, 431, 303, 945, 179, 948, 55, 951, 56, 826, 311, 956, 961, 193, 451, 842, 714, 844, 718, 207, 592, 337, 83, 852, 725, 84, 216, 473, 730, 92, 93, 992, 608, 609, 995, 484, 614, 359, 490, 491, 619, 242, 245, 759, 250, 251, 639});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique9) {
  s21::list<int> lst({823, 484, 989, 23, 782, 152, 14, 522, 514, 496, 458, 627, 587, 385, 723, 451, 771, 614, 857, 101, 343, 777, 373, 467, 89, 943, 908, 525, 260, 430, 50, 24, 315, 966, 140, 724, 921});
  s21::list<int> res({385, 514, 771, 260, 777, 522, 908, 525, 782, 14, 140, 23, 152, 24, 921, 430, 943, 50, 823, 315, 451, 966, 458, 587, 723, 467, 724, 343, 857, 89, 989, 484, 101, 614, 496, 627, 373});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique10) {
  s21::list<int> lst({730, 552, 677, 631, 74, 600, 24, 115, 795, 991, 64, 183, 185, 980, 980, 858, 593, 702, 734, 154, 560, 27, 172, 312, 796, 707, 995, 487, 4, 718, 800, 620, 909, 455, 92, 461, 337, 32, 220, 306, 232, 488, 747, 95, 364, 345, 288, 310, 699, 141, 605, 576, 717, 457, 986, 807, 146, 465, 210, 147, 629, 506, 185, 704, 892, 710, 728, 118, 858, 156, 782, 879, 227, 845, 860, 87, 409, 443, 52, 752, 936, 969, 122, 40, 602, 127, 261, 55, 52, 449, 818, 514, 300, 43});
  s21::list<int> res({514, 4, 24, 27, 32, 552, 40, 43, 560, 52, 55, 64, 576, 74, 593, 87, 600, 602, 92, 605, 95, 620, 115, 629, 118, 631, 122, 127, 141, 146, 147, 154, 156, 677, 172, 183, 185, 699, 702, 704, 707, 710, 717, 718, 210, 728, 730, 220, 734, 227, 232, 747, 752, 261, 782, 795, 796, 800, 288, 807, 300, 306, 818, 310, 312, 845, 337, 345, 858, 860, 364, 879, 892, 909, 409, 936, 443, 449, 455, 457, 969, 461, 465, 980, 986, 991, 995, 487, 488, 506});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique11) {
  s21::list<int> lst({212, 989, 109, 719, 455, 411, 427, 679, 922, 848, 442, 715, 249, 186, 96, 715, 729, 369, 76, 270, 190, 968, 149, 70, 458, 327, 52, 648, 228, 23, 171, 503, 138, 565});
  s21::list<int> res({648, 138, 270, 149, 23, 922, 411, 679, 427, 171, 52, 565, 186, 442, 190, 70, 455, 968, 327, 458, 715, 76, 719, 848, 212, 729, 989, 96, 228, 109, 369, 503, 249});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique12) {
  s21::list<int> lst({573, 52, 943, 442, 854});
  s21::list<int> res({943, 52, 854, 442, 573});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique13) {
  s21::list<int> lst({891, 814, 673, 180, 230, 264, 322, 845, 168, 982, 384, 994, 330, 863, 807, 630, 786, 18, 156, 822, 429, 604, 408, 390, 579, 715, 805, 150, 945, 78, 828, 487, 539, 253, 22, 980, 143, 22, 134, 31, 769, 550, 866, 769, 709, 429, 309, 895, 560, 616, 563, 940, 781, 958, 142, 891, 115, 488, 788, 169, 56, 476, 1, 609, 267, 884, 540, 19, 979, 92});
  s21::list<int> res({384, 769, 1, 390, 134, 264, 267, 781, 142, 143, 786, 18, 788, 19, 150, 22, 408, 539, 156, 540, 31, 673, 805, 550, 807, 168, 169, 940, 429, 814, 560, 945, 563, 180, 309, 822, 56, 828, 958, 322, 579, 709, 330, 715, 845, 78, 979, 980, 982, 604, 476, 92, 863, 609, 994, 866, 230, 487, 616, 488, 115, 884, 630, 891, 253, 895});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique14) {
  s21::list<int> lst({910, 1, 857, 884, 606, 149, 568, 291, 899, 69, 110, 402, 116, 649, 675, 977, 738, 217, 798, 351, 575, 292, 594, 367, 951, 200, 331, 507, 334, 638, 424, 494, 256, 660});
  s21::list<int> res({256, 1, 899, 649, 910, 402, 660, 149, 798, 291, 675, 292, 424, 951, 568, 575, 69, 200, 331, 334, 977, 594, 217, 857, 606, 351, 738, 110, 367, 494, 884, 116, 507, 638});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique15) {
  s21::list<int> lst({474, 741, 766, 593, 204, 373, 241, 379, 963, 195, 373, 393, 459, 357, 800, 920, 700, 994, 999, 111, 224, 130, 991, 360, 499, 641, 455, 200, 751, 446, 389, 410, 403, 602, 134, 643, 714, 814, 936, 815, 529, 242, 255, 796, 203, 193, 18, 188, 646, 861, 976, 350, 355, 643, 580, 770, 770});
  s21::list<int> res({641, 130, 643, 770, 389, 134, 646, 393, 529, 18, 403, 920, 410, 796, 800, 936, 814, 815, 700, 188, 446, 193, 963, 195, 580, 455, 200, 714, 459, 204, 203, 976, 593, 474, 602, 861, 350, 991, 224, 994, 355, 741, 357, 999, 360, 111, 751, 241, 242, 499, 373, 379, 766, 255});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique16) {
  s21::list<int> lst({123, 644, 322, 710, 706, 92, 400, 347, 188, 466, 429, 663, 811, 914, 408, 757, 153, 331, 347, 756, 201, 607, 88, 475});
  s21::list<int> res({644, 400, 914, 663, 408, 153, 811, 429, 188, 706, 322, 710, 201, 331, 466, 88, 347, 92, 475, 607, 756, 757, 123});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique17) {
  s21::list<int> lst({671, 672, 722, 835, 874, 229, 962, 8, 652, 681, 405, 955, 737, 369, 754, 858, 647, 709, 296, 382, 135, 61, 827, 29, 164, 245, 795, 603, 668, 240});
  s21::list<int> res({647, 8, 135, 652, 405, 795, 668, 29, 671, 672, 164, 296, 681, 955, 827, 61, 962, 835, 709, 722, 858, 603, 737, 229, 874, 240, 369, 754, 245, 382});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique18) {
  s21::list<int> lst({510, 75, 352, 906, 361, 868, 689, 449, 264, 563, 930, 895, 828, 687, 526, 98, 698, 259, 477, 917, 618, 858, 557, 820, 479, 782, 326, 502, 848});
  s21::list<int> res({259, 264, 906, 526, 782, 917, 930, 557, 687, 689, 563, 820, 698, 828, 449, 326, 75, 848, 858, 477, 479, 352, 98, 868, 361, 618, 502, 510, 895});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique19) {
  s21::list<int> lst({899, 942, 867, 920, 818, 616, 816, 223, 306, 507, 866, 294, 279, 508, 774, 344, 752, 790, 948, 582, 541, 317, 366, 330, 339, 235, 500, 735, 939, 191, 582, 697, 136, 666, 91, 767, 941, 980, 952, 6, 860, 143, 130, 620, 795, 514, 524, 158, 258, 695, 90, 762, 409, 50, 391, 312, 869, 728, 547, 921, 494, 443, 143, 715, 402, 665, 114, 25, 55});
  s21::list<int> res({130, 899, 514, 258, 774, 6, 136, 391, 524, 143, 402, 790, 279, 920, 409, 666, 795, 921, 541, 158, 665, 25, 547, 294, 939, 941, 942, 816, 818, 306, 948, 50, 695, 952, 697, 312, 443, 55, 317, 191, 582, 330, 715, 339, 980, 344, 728, 90, 91, 860, 223, 735, 866, 867, 869, 616, 235, 620, 366, 494, 752, 114, 500, 762, 507, 508, 767});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique20) {
  s21::list<int> lst({635, 810, 937, 919, 511, 308, 234, 434, 807, 953, 494, 608, 475, 446, 7, 386, 975, 747, 994, 507, 795, 402, 90, 242, 723, 743, 796, 402, 400, 382, 172, 235, 770, 570, 286, 643, 574, 668, 619, 253, 401, 879, 543, 194, 53, 563, 713, 373, 246, 948, 11, 961, 150, 528, 560, 773, 107, 520, 216, 990, 387, 874, 74, 501, 945, 636, 146, 672, 765, 815, 29, 48, 549, 203, 563, 171, 688, 194, 573, 739, 933, 189, 431, 500, 682, 41, 941, 902});
  s21::list<int> res({7, 520, 11, 528, 29, 543, 549, 41, 560, 48, 563, 53, 570, 573, 574, 74, 90, 608, 619, 107, 635, 636, 643, 146, 150, 668, 672, 682, 171, 172, 688, 189, 194, 713, 203, 723, 216, 739, 743, 234, 747, 235, 242, 246, 765, 253, 770, 773, 795, 796, 286, 807, 810, 815, 308, 874, 879, 373, 382, 386, 387, 902, 400, 401, 402, 919, 933, 937, 941, 431, 945, 434, 948, 953, 446, 961, 975, 475, 990, 994, 494, 500, 501, 507, 511});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique21) {
  s21::list<int> lst({698, 153, 924, 900, 929, 388, 543, 483, 216, 354, 775, 191, 708, 84, 880, 123, 453, 733, 466, 232, 68, 204, 309, 176, 840, 404, 515, 452, 35, 213, 309, 671, 648, 429, 724, 191, 554, 206, 691, 558, 25, 63, 551, 299, 899, 918, 752, 163, 362, 328, 799, 284, 838, 747, 947, 630, 521, 220, 382, 86, 341, 280, 69, 467, 476, 984, 822, 565, 28, 937, 447, 518, 797, 530, 47, 24, 366, 607, 762, 805, 477, 136, 12, 838, 523, 444, 980, 682});
  s21::list<int> res({515, 518, 521, 523, 12, 530, 24, 25, 28, 543, 35, 551, 554, 558, 47, 565, 63, 68, 69, 84, 86, 607, 630, 123, 648, 136, 153, 671, 163, 682, 176, 691, 698, 191, 708, 204, 206, 724, 213, 216, 220, 733, 232, 747, 752, 762, 775, 280, 284, 797, 799, 805, 299, 309, 822, 838, 840, 328, 341, 354, 362, 366, 880, 382, 899, 900, 388, 404, 918, 924, 929, 937, 429, 947, 444, 447, 452, 453, 466, 467, 980, 984, 476, 477, 483});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique22) {
  s21::list<int> lst({631, 863, 16, 124, 152, 152, 32, 162, 384, 172, 317, 862, 497, 733});
  s21::list<int> res({32, 384, 162, 733, 172, 16, 497, 631, 152, 124, 317, 862, 863});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique23) {
  s21::list<int> lst({815, 520, 578, 541, 809, 179, 936, 916, 518, 670, 460, 261, 994, 752, 360, 464, 651, 842, 268, 74, 980, 918});
  s21::list<int> res({261, 518, 520, 651, 268, 916, 918, 541, 670, 936, 809, 815, 179, 578, 842, 74, 460, 464, 980, 994, 360, 752});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique24) {
  s21::list<int> lst({198, 768, 452, 183, 136, 996, 964, 43, 539, 785, 445, 597, 568, 804, 447, 320, 757, 307, 866, 844, 189, 209, 90, 71, 334, 447, 204, 642, 717, 958, 958, 816});
  s21::list<int> res({768, 642, 136, 785, 539, 804, 43, 816, 307, 183, 568, 445, 189, 447, 320, 958, 452, 964, 198, 71, 844, 204, 334, 717, 209, 597, 90, 866, 996, 757});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique25) {
  s21::list<int> lst({937, 425, 184, 590, 551, 968, 994, 542, 885, 70, 702, 781, 533, 169, 844, 311, 152, 750, 703, 209, 570, 487, 199, 614, 105, 89, 553, 641});
  s21::list<int> res({641, 781, 533, 152, 542, 551, 937, 425, 169, 553, 311, 184, 570, 702, 703, 70, 199, 968, 844, 590, 209, 89, 994, 614, 487, 105, 750, 885});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique26) {
  s21::list<int> lst({5, 695, 808, 95, 79, 590, 250, 574, 110, 903, 343, 584, 626, 798, 529, 435, 374, 856, 468, 333, 950, 935, 518, 581, 502, 663, 263, 541, 429, 371, 96, 571, 754});
  s21::list<int> res({5, 518, 903, 263, 529, 663, 541, 798, 935, 808, 429, 435, 950, 695, 571, 574, 581, 584, 333, 590, 79, 468, 343, 856, 95, 96, 110, 626, 371, 754, 374, 502, 250});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique27) {
  s21::list<int> lst({532, 691, 910, 881, 736, 113, 46, 994, 806, 673, 444, 514, 608, 554, 901, 966, 352, 954, 532, 189, 80, 846, 531, 547, 352, 129, 31, 151, 743, 86, 278, 898, 785, 372, 542, 673, 149, 251, 538, 464, 490, 595, 306, 670, 771, 79, 326, 98, 602, 594, 561});
  s21::list<int> res({129, 514, 898, 771, 901, 910, 785, 531, 532, 149, 278, 151, 538, 542, 31, 670, 673, 547, 806, 554, 46, 561, 306, 691, 954, 444, 189, 966, 326, 846, 79, 80, 464, 594, 595, 86, 602, 736, 608, 994, 352, 98, 743, 490, 881, 113, 372, 251});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique28) {
  s21::list<int> lst({461, 277, 88, 696, 383, 711, 440, 923, 44, 112, 466, 829});
  s21::list<int> res({440, 711, 44, 461, 696, 112, 466, 277, 88, 923, 829, 383});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique29) {
  s21::list<int> lst({673, 73, 646, 970, 423, 176, 242, 654, 841, 544, 151, 707, 410, 830, 821, 859, 321, 453, 583, 196, 467, 858, 704, 899, 71, 108, 776, 535, 594, 272, 294, 224, 983, 173, 450, 283, 738, 414, 499});
  s21::list<int> res({899, 646, 776, 654, 272, 151, 535, 410, 283, 414, 544, 673, 294, 423, 173, 176, 821, 830, 704, 321, 450, 707, 196, 453, 583, 71, 73, 970, 841, 594, 467, 983, 858, 859, 224, 738, 108, 242, 499});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique30) {
  s21::list<int> lst({702, 119, 808, 546, 519, 594, 117, 776, 677, 473, 615, 767, 184, 223, 491, 137, 383, 293, 863, 347, 273, 534, 636, 786, 949, 940, 276, 15, 833, 575, 754, 357, 528, 98, 953, 765, 660, 51, 447, 924, 398, 164, 624, 990, 272, 646, 161, 569, 137, 90, 898, 564, 673, 403, 9, 226, 764, 261, 796, 685, 984, 195, 481, 337, 437, 864, 940, 343, 393, 96, 929, 284, 919, 445, 186, 162, 628, 194, 903, 614, 962, 15, 154, 270, 562, 860, 582, 830, 591, 562, 149, 991, 633, 755});
  s21::list<int> res({519, 9, 15, 528, 534, 546, 562, 51, 564, 569, 575, 582, 591, 594, 90, 96, 98, 614, 615, 624, 628, 117, 119, 633, 636, 646, 137, 660, 149, 154, 161, 673, 162, 164, 677, 685, 184, 186, 702, 194, 195, 223, 226, 754, 755, 764, 765, 767, 261, 776, 270, 272, 273, 786, 276, 796, 284, 293, 808, 830, 833, 337, 343, 347, 860, 863, 864, 357, 383, 898, 903, 393, 398, 403, 919, 924, 929, 940, 949, 437, 953, 445, 447, 962, 984, 473, 990, 991, 481, 491});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique31) {
  s21::list<int> lst({926, 798, 728, 797, 909, 497, 11, 236, 861, 716, 987, 560, 957, 457, 798, 119, 709, 665, 26, 438, 130, 67, 374, 289, 510, 576, 948, 83, 538, 523, 13, 401, 830, 529, 842, 151, 147, 963, 152, 733, 621, 272, 71, 663, 856, 133});
  s21::list<int> res({130, 133, 11, 523, 909, 13, 272, 401, 529, 147, 151, 152, 665, 26, 538, 663, 797, 798, 926, 289, 560, 948, 438, 957, 830, 576, 67, 963, 709, 71, 457, 842, 716, 83, 728, 856, 987, 861, 733, 236, 621, 497, 374, 119, 510});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique32) {
  s21::list<int> lst({219, 431, 747, 834, 770, 589, 31, 560, 615, 804, 142, 530, 109, 159, 913, 630, 697, 143, 529, 283, 215, 207, 483, 260, 877, 579, 526, 708, 463, 64, 577, 136, 498, 271, 99, 171, 820, 85, 494, 333, 980, 50, 625, 185, 728, 85, 646, 823, 35, 43, 615, 446, 316, 795, 843, 53, 917, 643, 355, 263, 201, 581, 709, 236, 485, 482, 931, 19, 79, 881, 65, 360, 153, 498, 299, 249, 647, 728, 66, 554, 126, 506, 199, 831, 85, 138, 998, 943, 443, 31, 422, 81, 102, 75, 999});
  s21::list<int> res({526, 529, 530, 19, 31, 35, 554, 43, 560, 50, 53, 64, 577, 65, 579, 66, 581, 75, 589, 79, 81, 85, 99, 102, 615, 109, 625, 630, 126, 643, 646, 647, 136, 138, 142, 143, 153, 159, 171, 697, 185, 708, 709, 199, 201, 207, 215, 728, 219, 747, 236, 249, 770, 260, 263, 271, 283, 795, 804, 299, 820, 823, 316, 831, 834, 843, 333, 355, 360, 877, 881, 913, 917, 931, 422, 431, 943, 443, 446, 463, 980, 482, 483, 485, 998, 999, 494, 498, 506});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique33) {
  s21::list<int> lst({680, 923, 727, 36, 592, 967, 488, 687, 56, 813, 89, 927, 58, 992, 144, 744, 543, 884, 561, 942, 934, 152, 376, 679, 889, 182, 513, 265, 493, 187, 138, 945, 504, 542, 536, 379, 987, 122, 344, 719, 955, 350, 911, 287, 266, 413, 741, 133, 766, 626, 770, 456, 342, 499, 121, 240, 546, 953, 154, 747, 252, 787, 237, 293, 221, 471, 0, 784, 97, 43, 998, 475, 405, 117, 988, 812, 726, 562, 453, 940, 354, 710, 384});
  s21::list<int> res({0, 513, 536, 542, 543, 546, 36, 43, 561, 562, 56, 58, 592, 89, 97, 626, 117, 121, 122, 133, 138, 144, 152, 154, 679, 680, 687, 182, 187, 710, 719, 726, 727, 221, 741, 744, 747, 237, 240, 252, 766, 770, 265, 266, 784, 787, 287, 293, 812, 813, 342, 344, 350, 354, 884, 376, 889, 379, 384, 911, 405, 923, 413, 927, 934, 940, 942, 945, 953, 955, 453, 967, 456, 471, 987, 475, 988, 992, 998, 488, 493, 499, 504});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique34) {
  s21::list<int> lst({517, 611, 167, 693, 642, 828, 81, 677, 392, 525, 73, 646, 613, 978, 765, 200, 790, 886, 959, 760, 195, 866, 559, 296, 104, 445, 806, 479, 799, 657, 615, 10, 268, 275, 223, 478, 567, 990, 587, 801, 15, 710, 214, 906, 315, 875, 574, 160, 566, 97, 2, 100, 111, 69, 91, 29, 609, 601, 774, 729, 550, 697, 875, 9, 98, 24, 810, 8, 327, 741, 933});
  s21::list<int> res({642, 2, 517, 646, 774, 392, 9, 10, 906, 268, 525, 8, 15, 657, 275, 790, 24, 29, 799, 160, 801, 677, 806, 167, 296, 550, 810, 933, 559, 693, 566, 567, 697, 315, 828, 445, 574, 959, 195, 69, 710, 327, 200, 73, 587, 81, 978, 214, 601, 729, 91, 478, 479, 223, 990, 866, 611, 97, 613, 100, 615, 104, 609, 98, 875, 741, 111, 886, 760, 765});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique35) {
  s21::list<int> lst({199, 58, 582, 448, 160, 849, 367, 163, 185, 889, 125, 549, 693, 277, 37, 697, 932, 520, 808, 959, 300, 923, 740, 190, 954, 858, 374, 567, 716, 185, 110, 481, 359, 422, 821, 794, 200, 110, 858, 941, 344, 467, 283, 399, 201});
  s21::list<int> res({520, 399, 277, 794, 923, 283, 160, 163, 932, 549, 37, 422, 808, 300, 941, 693, 821, 567, 697, 185, 58, 954, 190, 959, 448, 582, 199, 200, 201, 716, 849, 467, 344, 858, 481, 740, 359, 110, 367, 374, 889, 125});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique36) {
  s21::list<int> lst({700, 314, 853, 569, 133, 51, 13, 568, 25, 106, 356, 865, 918, 358, 486, 969, 833, 119, 482, 269, 493, 125});
  s21::list<int> res({133, 13, 269, 918, 25, 51, 568, 569, 314, 700, 833, 969, 853, 865, 482, 356, 358, 486, 106, 493, 119, 125});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique37) {
  s21::list<int> lst({375, 300, 856, 931, 982, 953, 445, 271, 913, 500, 897, 827, 999, 496, 301, 917, 119, 115, 933, 513, 114, 922, 308, 729, 336, 780, 300, 70, 852, 495, 463, 737, 958, 267, 95, 104, 219, 877, 840, 566, 6, 529, 295, 125, 392, 720, 916, 238, 588, 969, 581, 906, 857, 199, 92, 370, 733, 524, 474, 516, 182, 933, 782, 829, 764, 241, 785, 410, 178, 483, 996, 740});
  s21::list<int> res({897, 513, 516, 6, 392, 906, 267, 780, 524, 782, 271, 913, 529, 785, 916, 917, 922, 410, 931, 933, 295, 300, 301, 178, 308, 566, 182, 953, 827, 445, 958, 829, 581, 70, 199, 840, 969, 588, 463, 336, 720, 852, 982, 119, 856, 729, 857, 219, 92, 733, 474, 95, 737, 483, 996, 740, 999, 104, 877, 238, 495, 496, 241, 114, 115, 500, 370, 375, 764, 125});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique38) {
  s21::list<int> lst({86, 7, 435, 877, 660, 224, 281, 455, 498, 823, 385, 155, 136, 17, 483, 286, 620, 145, 791, 317, 949, 647, 382, 969, 159, 493, 737, 32, 673, 321, 214, 799, 848, 20, 312, 100, 185, 539, 826, 172, 589, 695, 282, 683, 780, 251, 855, 358, 454, 761, 166, 749, 729, 260, 761, 509, 559, 43, 338, 1, 204, 170});
  s21::list<int> res({385, 1, 260, 7, 136, 647, 780, 17, 145, 660, 20, 791, 281, 282, 155, 539, 286, 159, 32, 673, 799, 166, 170, 683, 172, 43, 559, 435, 949, 823, 312, 185, 826, 695, 317, 321, 454, 455, 969, 204, 589, 848, 338, 86, 214, 855, 729, 224, 737, 483, 100, 358, 620, 877, 493, 749, 498, 761, 251, 509, 382});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique39) {
  s21::list<int> lst({726, 920, 283, 222, 44, 46, 325, 221, 242, 20, 681, 168, 396, 945, 127, 274, 314, 600, 193, 498, 864, 549, 526, 576, 702, 143, 340, 590, 345, 715, 721, 672, 310, 74, 336, 746, 716, 949, 297, 928, 633, 467, 924, 795, 471, 252, 178, 678, 1, 460, 831, 431, 666, 214, 556, 503, 392, 668, 234, 307, 942, 689, 538, 179, 421});
  s21::list<int> res({1, 392, 396, 526, 143, 274, 20, 920, 666, 283, 924, 795, 668, 538, 672, 928, 549, 678, 421, 168, 681, 297, 44, 556, 46, 431, 942, 945, 178, 307, 689, 949, 310, 179, 314, 702, 831, 576, 193, 325, 74, 715, 716, 460, 590, 336, 721, 467, 340, 726, 471, 600, 345, 214, 221, 222, 864, 746, 234, 242, 498, 503, 633, 252, 127});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique40) {
  s21::list<int> lst({144, 33, 378, 53, 131, 515, 672, 3, 799, 969, 831, 222, 978, 878, 637, 271, 404, 475, 19, 836, 906, 790, 755, 932, 719, 192, 431, 496, 820, 903, 711, 950, 186, 563, 909, 604, 352, 959, 130, 478, 335, 71, 577, 599, 435});
  s21::list<int> res({130, 131, 515, 3, 903, 906, 909, 271, 144, 19, 404, 790, 799, 672, 33, 932, 431, 563, 820, 53, 950, 435, 186, 831, 192, 959, 577, 836, 711, 71, 969, 719, 335, 978, 599, 475, 604, 222, 478, 352, 878, 496, 755, 378, 637});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique41) {
  s21::list<int> lst({411, 851, 798, 316, 604, 13, 203, 49, 148, 826, 721, 798, 82, 940, 539, 32, 887, 828, 457, 264, 812, 198, 687, 543, 635});
  s21::list<int> res({264, 13, 148, 539, 411, 798, 543, 32, 940, 812, 687, 49, 826, 828, 316, 198, 457, 203, 721, 82, 851, 604, 887, 635});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique42) {
  s21::list<int> lst({209, 310});
  s21::list<int> res({209, 310});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique43) {
  s21::list<int> lst({70, 450, 47, 520, 580, 378, 746, 323, 993, 524, 224, 265, 775, 585, 825});
  s21::list<int> res({224, 993, 450, 323, 580, 70, 775, 520, 265, 746, 585, 524, 47, 825, 378});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique44) {
  s21::list<int> lst({673, 4, 108, 419, 260, 463, 362, 466, 107, 68, 996, 957, 638, 218, 238, 717, 410, 167, 1, 764, 506, 10, 529, 753, 835, 819, 480, 186, 25, 350, 98, 322, 769, 388, 380, 648, 23, 283, 187, 623, 938, 807, 404, 59, 349, 802, 792, 780, 794, 113, 956, 600, 293, 835, 498, 57, 87, 947, 323, 19, 524, 212, 149, 844, 21, 33, 312, 724, 926, 823, 638, 364, 195, 346, 383, 824, 967, 22, 775, 531, 334, 353, 859, 443, 355, 246, 604, 97, 863, 868, 259, 954, 751, 860, 745, 190, 261, 682});
  s21::list<int> res({1, 4, 10, 524, 529, 19, 531, 21, 22, 23, 25, 33, 57, 59, 68, 87, 600, 604, 97, 98, 107, 108, 623, 113, 638, 648, 149, 673, 167, 682, 186, 187, 190, 195, 717, 212, 724, 218, 745, 238, 751, 753, 246, 764, 769, 259, 260, 261, 775, 780, 792, 794, 283, 802, 293, 807, 819, 823, 312, 824, 322, 835, 323, 844, 334, 346, 859, 860, 349, 350, 863, 353, 355, 868, 362, 364, 380, 383, 388, 404, 410, 926, 419, 938, 947, 954, 443, 956, 957, 967, 463, 466, 480, 996, 498, 506});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique45) {
  s21::list<int> lst({336, 278, 462, 310, 46, 29, 977, 664, 202, 293, 125, 395, 407, 181, 268, 192, 484, 455, 514, 207, 63, 369, 82, 35, 73, 925, 100, 568, 286, 365, 73, 883, 600, 143, 400, 730, 432, 230, 143, 588, 776, 561, 663, 126, 788, 644, 733, 737, 10, 924, 832, 694});
  s21::list<int> res({514, 644, 776, 10, 395, 268, 143, 400, 788, 278, 407, 664, 663, 924, 29, 925, 286, 35, 293, 46, 432, 561, 181, 310, 694, 568, 63, 192, 832, 455, 73, 202, 588, 462, 207, 336, 977, 82, 600, 730, 733, 737, 484, 100, 230, 365, 369, 883, 125, 126});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique46) {
  s21::list<int> lst({701, 465, 352, 15, 404, 152, 312, 444, 531, 915, 688, 435, 61, 195, 446, 368, 446, 759, 805, 155, 111, 216, 836, 849});
  s21::list<int> res({15, 531, 404, 915, 152, 155, 805, 688, 435, 312, 444, 61, 701, 446, 195, 836, 465, 849, 216, 352, 111, 368, 759});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique47) {
  s21::list<int> lst({987, 426, 81, 642, 924, 829, 442, 821, 289, 611, 878, 352, 504, 399, 546, 813, 419, 1, 539, 406, 93, 53, 55, 562, 518, 804, 301, 811, 4, 278, 88, 65, 32, 76, 37, 110, 627, 451, 462, 94, 248, 54});
  s21::list<int> res({1, 642, 4, 518, 399, 406, 278, 539, 924, 32, 289, 546, 419, 804, 37, 426, 811, 813, 301, 562, 821, 53, 55, 54, 442, 829, 65, 451, 76, 462, 81, 88, 987, 93, 94, 352, 248, 611, 878, 110, 627, 504});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique48) {
  s21::list<int> lst({148, 879, 279, 633, 848, 165, 286, 710, 505, 983, 560, 827, 307, 614, 854, 495, 456, 714, 307, 792, 191, 327, 510, 638, 466, 257, 109, 613, 643, 652, 5, 210, 672, 166, 781, 694, 57, 779, 574, 895, 2, 396, 657, 902, 590, 178, 193, 406, 612, 427, 209, 371, 222, 790, 325, 21, 696, 432, 71, 48, 195, 788, 827, 843, 8, 556, 703, 582, 922, 707, 537, 261, 942, 414, 879});
  s21::list<int> res({257, 2, 643, 5, 902, 261, 8, 638, 779, 652, 781, 396, 657, 148, 21, 406, 279, 792, 790, 788, 922, 537, 286, 414, 672, 165, 166, 427, 556, 942, 560, 432, 178, 307, 48, 694, 696, 57, 827, 574, 191, 703, 193, 195, 707, 325, 710, 327, 456, 71, 714, 843, 582, 590, 848, 209, 466, 210, 854, 983, 222, 612, 613, 614, 109, 879, 495, 633, 371, 505, 510, 895});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique49) {
  s21::list<int> lst({830, 112, 526, 489, 724, 630, 580, 828, 5, 835, 816, 170, 302, 867, 588, 601, 891, 860, 968, 812, 885, 484, 176, 198, 766, 295, 618, 249, 441, 99, 883, 74, 771, 258, 22, 680, 105, 330, 661, 354, 250, 809, 99, 971, 146, 616, 537, 194, 303, 986, 499, 899, 248, 525, 436, 889, 556});
  s21::list<int> res({258, 771, 899, 5, 525, 526, 146, 661, 22, 537, 295, 680, 809, 170, 812, 556, 302, 303, 816, 176, 436, 441, 828, 830, 194, 835, 580, 198, 968, 74, 330, 588, 971, 724, 601, 986, 860, 889, 354, 867, 484, 99, 616, 489, 618, 105, 112, 883, 499, 885, 630, 248, 249, 250, 891, 766});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique50) {
  s21::list<int> lst({569});
  s21::list<int> res({569});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique51) {
  s21::list<int> lst({671, 741, 403, 369, 860, 986, 722, 556, 988, 105, 323, 235, 213, 149, 779, 56, 113, 829, 611, 981, 205, 509, 745, 470, 208, 249, 219, 652, 392, 116, 326, 586, 947, 130, 646, 425, 687, 600, 123, 568, 85, 355, 117, 850, 609, 8, 554, 23});
  s21::list<int> res({130, 646, 392, 8, 779, 652, 403, 149, 23, 671, 425, 554, 556, 687, 947, 56, 568, 829, 323, 326, 586, 205, 208, 722, 850, 213, 981, 470, 600, 85, 986, 219, 988, 860, 609, 611, 355, 741, 105, 745, 235, 369, 113, 116, 117, 249, 123, 509});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique52) {
  s21::list<int> lst({214, 399, 240, 796, 513, 254, 796, 585, 198, 102, 732, 52, 649, 899, 837, 267, 390, 869, 251, 445, 463, 542, 109, 27, 811, 767, 44, 601, 514, 837, 92, 474, 11, 867, 122, 9, 239, 140, 848, 907, 343, 560, 121, 906, 777, 276, 860});
  s21::list<int> res({513, 514, 899, 390, 649, 9, 267, 11, 140, 907, 399, 906, 777, 276, 27, 796, 542, 811, 44, 560, 52, 445, 837, 198, 585, 463, 848, 214, 343, 601, 474, 732, 92, 860, 867, 869, 102, 109, 239, 240, 121, 122, 251, 254, 767});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique53) {
  s21::list<int> lst({705, 63, 549, 790, 551, 953, 159, 916, 723, 521, 150, 809, 746, 73, 900, 255, 194, 352, 862, 479, 296, 798, 348, 277, 140, 974, 928, 752, 137, 882, 528});
  s21::list<int> res({900, 521, 137, 140, 528, 916, 277, 790, 150, 798, 159, 928, 549, 551, 296, 809, 953, 63, 705, 194, 73, 974, 723, 348, 862, 479, 352, 746, 752, 882, 255});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique54) {
  s21::list<int> lst({168, 395, 235, 74, 811, 710, 512, 867, 535, 408, 348, 354, 349, 938, 72, 660, 840, 692, 713, 175, 952, 896, 675, 262, 244, 50, 534, 975, 127, 662, 651, 943, 953, 151, 114, 52, 580, 387, 49, 738, 258, 799, 18, 359, 933, 802, 42, 735, 331, 234, 441, 855, 525, 487, 420, 321, 693, 384, 255, 434, 729, 567, 616, 23, 800, 557, 719, 410, 209, 412, 250});
  s21::list<int> res({512, 896, 258, 387, 384, 255, 262, 395, 651, 525, 18, 660, 534, 535, 408, 662, 151, 23, 410, 412, 799, 800, 802, 675, 420, 933, 168, 938, 811, 42, 557, 175, 943, 49, 50, 434, 692, 52, 693, 567, 952, 953, 441, 321, 580, 710, 72, 840, 74, 713, 331, 975, 719, 209, 855, 729, 348, 349, 735, 354, 867, 738, 359, 487, 616, 234, 235, 114, 244, 250, 127});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique55) {
  s21::list<int> lst({802, 616, 799, 748, 20, 603, 438, 451, 576, 459, 158, 389, 460, 997, 666, 83, 875, 720, 604, 140, 672, 335, 292, 720, 841, 853, 629, 954, 643, 298, 754, 790, 83, 734, 643, 699, 339, 313, 839, 143, 226, 771, 841, 53, 19, 613, 457, 904, 726, 589, 53, 524, 900, 222, 826, 192, 511, 818, 201, 335, 634, 390, 702, 378, 800, 769, 912, 955, 988, 355, 464, 860, 251, 892, 301, 910});
  s21::list<int> res({769, 643, 771, 389, 900, 390, 904, 140, 524, 910, 143, 912, 19, 20, 790, 666, 158, 799, 672, 800, 802, 292, 298, 301, 818, 53, 438, 313, 954, 699, 826, 955, 702, 576, 192, 451, 839, 841, 457, 459, 460, 589, 201, 335, 720, 464, 83, 339, 853, 726, 603, 604, 988, 734, 222, 860, 226, 355, 997, 613, 616, 875, 748, 378, 754, 629, 634, 251, 892, 511});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique56) {
  s21::list<int> lst({316, 392, 612, 247, 564, 278, 519, 20, 763, 902, 245, 529, 211, 747, 28, 394, 84, 442, 527, 681, 457, 156, 407, 857, 244, 767, 808, 776, 666, 516, 718, 380, 366, 952, 232, 4, 866, 804, 666, 227, 979, 991, 481, 878, 949, 905, 412, 820, 41, 15, 453, 384, 730, 982, 578, 488, 420, 550, 719, 207, 222, 819, 345, 591, 580, 679, 650, 609, 248, 869, 484, 357, 854, 455, 135, 767, 340, 201, 397, 476, 617, 61, 241, 960, 440, 109, 24, 560, 261, 903, 632, 359});
  s21::list<int> res({516, 4, 519, 527, 15, 529, 20, 24, 28, 550, 41, 560, 564, 61, 578, 580, 591, 84, 609, 612, 617, 109, 632, 135, 650, 666, 156, 679, 681, 201, 718, 719, 207, 211, 730, 222, 227, 232, 747, 241, 244, 245, 247, 248, 763, 767, 261, 776, 278, 804, 808, 819, 820, 316, 340, 854, 857, 345, 866, 869, 357, 359, 366, 878, 380, 384, 902, 903, 392, 905, 394, 397, 407, 412, 420, 949, 952, 440, 442, 960, 453, 455, 457, 979, 982, 476, 991, 481, 484, 488});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique57) {
  s21::list<int> lst({283, 932, 937, 49, 605, 720, 943, 59, 397, 200, 824, 59, 329, 374, 278, 569, 422, 782, 359, 674, 317, 356, 724, 812, 654, 227, 555, 306, 439, 318, 443});
  s21::list<int> res({397, 782, 654, 278, 283, 674, 932, 422, 937, 555, 812, 943, 49, 306, 439, 824, 569, 59, 443, 317, 318, 200, 329, 720, 724, 605, 227, 356, 359, 374});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique58) {
  s21::list<int> lst({274, 874, 991, 261, 559, 271, 324, 610, 401, 249, 933, 461, 233, 665, 884, 729, 89, 316, 457, 908, 286, 129, 41, 882, 41, 61, 829, 65, 540, 490, 2, 745, 895, 854, 721, 3, 769});
  s21::list<int> res({129, 2, 3, 769, 261, 908, 271, 401, 274, 665, 540, 286, 933, 41, 559, 316, 61, 829, 65, 324, 457, 461, 721, 854, 89, 729, 991, 610, 233, 874, 490, 745, 882, 884, 249, 895});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique59) {
  s21::list<int> lst({627, 286, 710, 900, 733, 567, 988, 442, 529, 876, 812, 294, 548, 951, 437, 98, 194, 631, 958, 353, 945, 820, 902, 254, 887, 474, 981, 388, 606, 181, 615, 769, 821, 542, 537, 896, 238, 908, 523, 159, 185, 286, 908, 83, 387, 605, 628, 437, 5, 88, 428, 596, 84, 35, 500, 87, 331, 868, 35, 379, 192, 239, 428, 920, 213, 669, 958, 994, 936, 177, 923, 405, 53, 364, 93, 252, 479, 711, 192, 46, 194, 508, 342, 611, 257});
  s21::list<int> res({5, 523, 529, 537, 542, 35, 548, 46, 53, 567, 83, 596, 84, 87, 88, 605, 606, 93, 98, 611, 615, 627, 628, 631, 669, 159, 177, 181, 185, 192, 194, 710, 711, 213, 733, 238, 239, 252, 254, 769, 257, 286, 294, 812, 820, 821, 331, 342, 353, 868, 876, 364, 887, 379, 896, 387, 900, 388, 902, 908, 405, 920, 923, 936, 428, 945, 437, 951, 442, 958, 981, 474, 988, 479, 994, 500, 508});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique60) {
  s21::list<int> lst({977, 821, 628, 249, 350, 600, 385, 739, 696, 967, 459, 217, 889, 884, 721, 297, 749, 679});
  s21::list<int> res({385, 739, 217, 967, 679, 297, 459, 749, 696, 977, 721, 628, 821, 884, 889, 600, 249, 350});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique61) {
  s21::list<int> lst({115, 601, 787, 3, 187, 444, 502, 684, 55, 543, 650, 534, 865, 288, 496, 358, 685, 248, 728, 255, 539, 338, 799, 609, 383, 927, 700, 26, 660, 987, 988, 200, 794, 569, 909, 464, 295, 761, 11, 136, 934, 893, 269, 769, 351, 48, 373, 590, 912, 309, 197, 27, 997, 681, 4, 691, 208, 20, 165, 454, 67, 480, 99, 693, 987, 545, 410, 520, 766, 389, 958, 424, 295, 36, 849, 625, 838});
  s21::list<int> res({769, 3, 4, 389, 383, 136, 520, 650, 11, 909, 269, 912, 787, 660, 20, 534, 26, 539, 794, 27, 410, 543, 288, 799, 927, 545, 36, 165, 934, 295, 424, 681, 684, 685, 48, 691, 309, 693, 55, 569, 187, 444, 700, 958, 67, 197, 454, 838, 200, 590, 464, 208, 338, 849, 728, 601, 987, 988, 351, 480, 865, 609, 99, 997, 358, 496, 625, 115, 373, 502, 248, 761, 893, 766, 255});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique62) {
  s21::list<int> lst({787, 785, 302, 824, 377, 289, 842});
  s21::list<int> res({289, 842, 302, 785, 787, 824, 377});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique63) {
  s21::list<int> lst({125, 439, 691, 82, 940, 344, 12, 323, 488, 935, 411, 168, 262, 586, 912, 939, 115, 874, 880, 697, 789, 178, 903, 433, 373, 372, 80, 768, 209, 130, 541, 422, 160, 531});
  s21::list<int> res({768, 130, 262, 903, 12, 912, 531, 789, 411, 541, 160, 422, 935, 168, 939, 940, 433, 178, 691, 439, 697, 323, 586, 80, 209, 82, 344, 488, 874, 880, 115, 372, 373, 125});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique64) {
  s21::list<int> lst({828, 300, 585, 683, 681, 793, 778, 236, 557, 591, 772, 361, 331, 586, 340, 398, 491, 424, 800, 487, 794, 321, 439, 917, 844, 334, 885, 675, 651, 46});
  s21::list<int> res({772, 778, 651, 398, 917, 793, 794, 800, 675, 424, 681, 683, 300, 557, 46, 439, 828, 321, 585, 586, 331, 844, 334, 591, 340, 487, 361, 491, 236, 885});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique65) {
  s21::list<int> lst({140, 804, 59, 625, 45, 418, 705, 799, 471, 932, 823, 318, 910, 592, 122, 458, 481, 625, 783, 644, 348, 670, 277, 425, 575, 92, 229, 299});
  s21::list<int> res({644, 140, 910, 783, 277, 670, 799, 418, 804, 932, 425, 299, 45, 823, 59, 318, 575, 705, 458, 592, 471, 348, 92, 481, 229, 625, 122});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique66) {
  s21::list<int> lst({549, 836, 305, 965, 156, 12, 573, 825, 947, 216, 75, 678, 959, 665, 950, 582, 256, 114, 934, 959, 668, 440, 471, 425, 454, 615, 67, 775, 193, 350, 301, 271, 165, 323, 157, 6, 42, 483, 526, 358, 785, 759, 465, 433, 866, 172, 686});
  s21::list<int> res({256, 6, 775, 12, 526, 271, 785, 665, 156, 668, 157, 549, 678, 934, 165, 425, 42, 172, 301, 686, 305, 433, 947, 950, 440, 825, 573, 959, 193, 67, 836, 965, 582, 454, 323, 75, 465, 471, 216, 350, 866, 483, 358, 615, 114, 759});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique67) {
  s21::list<int> lst({596, 517, 123, 323, 913, 954, 837, 493, 133, 69, 211, 18, 479, 881, 334, 286, 308, 305, 914, 432, 445, 872, 648, 337, 800, 785, 460, 157, 501, 712, 857, 3, 511, 563, 546, 861, 586, 802, 608, 345, 517, 195, 689, 999, 167, 988, 2, 323, 477, 849, 9, 117, 12, 287, 718, 444, 1, 132, 952, 843, 801, 663, 277, 5, 975});
  s21::list<int> res({1, 2, 3, 132, 517, 133, 5, 648, 9, 12, 913, 18, 914, 785, 277, 663, 157, 286, 287, 800, 801, 546, 802, 167, 432, 305, 689, 563, 308, 952, 954, 444, 445, 323, 195, 837, 69, 712, 586, 843, 460, 334, 718, 975, 337, 849, 211, 596, 857, 345, 988, 861, 477, 479, 608, 999, 872, 493, 881, 501, 117, 123, 511});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique68) {
  s21::list<int> lst({753, 757, 691, 575, 81, 606, 569, 786, 437, 601, 730, 682, 90, 518, 182, 179, 35, 325, 357, 761, 607, 107, 439, 581, 929, 380, 992, 406, 240, 184, 587, 30, 96, 415, 103, 362, 52, 340, 772, 19, 941, 760, 61, 438, 989, 150, 634, 521, 364, 800, 831, 556, 368, 727, 771, 438, 229, 780, 123, 972, 787, 646, 482, 591, 88, 12, 720, 631, 297, 484, 183, 788, 212, 86, 327, 294, 899, 538, 105, 956, 557, 879, 553, 888, 231, 118, 570, 501, 770, 612, 900, 773, 456, 924, 809, 925, 392, 757, 358});
  s21::list<int> res({518, 521, 12, 19, 538, 30, 35, 553, 556, 557, 52, 569, 570, 61, 575, 581, 587, 591, 81, 86, 88, 601, 90, 606, 607, 96, 612, 103, 105, 107, 118, 631, 634, 123, 646, 150, 682, 691, 179, 182, 183, 184, 720, 212, 727, 730, 229, 231, 240, 753, 757, 760, 761, 770, 771, 772, 773, 780, 786, 787, 788, 800, 294, 297, 809, 831, 325, 327, 340, 357, 358, 362, 364, 879, 368, 888, 380, 899, 900, 392, 406, 924, 925, 415, 929, 941, 437, 438, 439, 956, 456, 972, 989, 992, 482, 484, 501});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique69) {
  s21::list<int> lst({336, 336, 59, 364, 826, 666, 211, 518, 272, 858, 198, 737, 865, 776, 627, 927, 632, 612, 878, 854, 512, 809, 285, 389, 699, 264, 815, 631, 226, 794, 421, 385, 934, 835, 590, 336, 974, 801, 119, 925, 338, 174, 138, 951, 859, 281, 602, 60, 30, 813, 928, 532, 123, 136, 786, 231, 180, 833});
  s21::list<int> res({512, 385, 389, 518, 776, 264, 138, 136, 272, 786, 532, 281, 666, 794, 285, 925, 927, 30, 801, 928, 421, 934, 809, 813, 174, 815, 180, 951, 826, 59, 699, 60, 833, 835, 198, 590, 974, 336, 338, 211, 854, 119, 858, 859, 602, 737, 865, 226, 612, 231, 364, 878, 627, 631, 632, 123});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique70) {
  s21::list<int> lst({649, 367, 87, 716, 267, 466, 395, 533, 462, 989, 0, 658, 204, 984, 235, 660, 983, 407, 448, 426, 99, 599, 964, 686, 523, 467, 711, 609, 600, 952, 137, 640, 976, 553, 500, 617, 993, 473, 489, 741, 255, 286, 499, 615, 930, 232, 642, 404, 648, 325, 134, 896, 544, 135, 255, 561, 675, 291, 451, 928, 820, 863, 72, 295, 776, 526, 201, 25, 67, 631, 5, 274, 287, 420, 226, 348, 4, 209, 997});
  s21::list<int> res({0, 4, 5, 523, 526, 533, 25, 544, 553, 561, 67, 72, 87, 599, 600, 609, 99, 615, 617, 631, 640, 642, 134, 135, 648, 649, 137, 658, 660, 675, 686, 711, 201, 716, 204, 209, 226, 741, 232, 235, 255, 776, 267, 274, 286, 287, 291, 295, 820, 325, 348, 863, 367, 896, 395, 404, 407, 928, 930, 420, 426, 952, 448, 451, 964, 462, 976, 466, 467, 983, 984, 473, 989, 993, 997, 489, 499, 500});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique71) {
  s21::list<int> lst({453, 961, 967, 68, 519, 721, 662, 692, 649, 560, 483, 254, 565, 192, 156, 309, 524, 809, 216, 622, 688, 533, 231, 246, 557});
  s21::list<int> res({519, 649, 524, 533, 662, 156, 809, 557, 560, 688, 692, 565, 309, 192, 961, 68, 453, 967, 721, 216, 483, 231, 622, 246, 254});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique72) {
  s21::list<int> lst({762, 983, 119, 522, 88, 860, 290, 646, 576, 43, 329, 982, 766, 646, 187, 165, 17, 820, 144, 212, 352, 828, 781, 520, 50, 750, 635, 731, 885, 827, 212, 3, 546, 311, 57, 656, 783, 643, 1, 6, 500, 383, 657, 907, 291, 20, 493, 141, 500, 31, 349, 632, 753, 728, 17, 446, 927, 372, 475, 486, 778, 422, 767, 590, 158, 670, 909, 296, 213, 349, 409});
  s21::list<int> res({1, 3, 643, 646, 6, 520, 522, 907, 778, 781, 141, 783, 144, 17, 656, 657, 20, 767, 909, 409, 158, 31, 927, 670, 290, 546, 291, 165, 422, 296, 43, 50, 820, 311, 57, 187, 828, 827, 446, 576, 329, 590, 212, 213, 982, 983, 88, 728, 731, 860, 349, 475, 352, 486, 493, 750, 753, 500, 885, 372, 119, 632, 762, 635, 766, 383});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique73) {
  s21::list<int> lst({251, 156, 179, 69, 753, 249, 241, 315, 314, 339, 550, 131, 15, 33, 12, 980, 644, 85, 103, 201, 192, 903, 662, 718, 911, 499, 881, 785, 378, 874, 694, 235, 587, 645, 745, 657, 264, 675, 552, 631, 563, 798, 375, 59, 706, 858, 304, 277, 706, 33, 713, 155, 295, 55});
  s21::list<int> res({131, 644, 645, 903, 264, 12, 15, 911, 785, 657, 277, 662, 155, 156, 798, 33, 675, 550, 295, 552, 304, 179, 563, 694, 55, 314, 315, 59, 192, 706, 69, 201, 713, 587, 718, 339, 980, 85, 858, 375, 103, 745, 874, 235, 753, 241, 499, 881, 631, 249, 378, 251});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique74) {
  s21::list<int> lst({541, 127, 5, 16, 307, 281, 803, 879, 830, 562, 319, 788, 120, 506, 67, 445, 883, 44, 603, 371, 885, 889});
  s21::list<int> res({5, 16, 788, 281, 541, 803, 44, 562, 307, 445, 830, 319, 67, 603, 879, 883, 371, 885, 120, 889, 506, 127});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique75) {
  s21::list<int> lst({973, 449, 754, 236, 584, 523, 532, 610, 884, 194, 262, 240, 949, 155, 998, 779, 932, 303, 673, 535, 638, 849, 237, 344, 573, 583, 87, 859, 305, 272, 136, 735, 512, 717, 617, 170, 196, 671, 616, 311, 735, 331, 839, 545, 179, 161, 752, 465, 729, 624, 50, 692, 109, 34, 122, 959, 725, 921, 144, 83, 541, 100, 844});
  s21::list<int> res({512, 262, 136, 523, 779, 272, 144, 532, 535, 921, 155, 541, 671, 673, 545, 161, 932, 34, 170, 303, 305, 50, 179, 692, 949, 311, 573, 959, 449, 194, 196, 583, 584, 839, 331, 844, 973, 717, 849, 465, 83, 725, 87, 344, 729, 859, 735, 610, 100, 998, 616, 617, 236, 237, 109, 240, 752, 754, 624, 884, 122, 638});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique76) {
  s21::list<int> lst({605, 241, 469, 459, 677, 934, 90, 613, 604, 560, 845, 480, 472, 892, 473, 416, 615, 985, 385, 128, 343, 350, 735, 913, 797, 423});
  s21::list<int> res({128, 385, 913, 797, 416, 677, 934, 423, 560, 459, 845, 469, 343, 472, 985, 473, 90, 604, 605, 350, 735, 480, 613, 615, 241, 892});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique77) {
  s21::list<int> lst({432, 258, 663, 693, 376, 554});
  s21::list<int> res({258, 554, 432, 693, 663, 376});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique78) {
  s21::list<int> lst({227, 919, 199, 254, 209, 766, 336, 59, 133, 316, 630, 519, 691, 459, 318, 615, 526, 959, 669, 968, 202, 763, 745, 403, 335, 762, 145, 234, 945, 524, 916, 122, 805, 293, 789, 473, 780, 629, 99, 107, 501, 78, 243, 452, 59, 492, 589, 506, 335, 249, 587, 500, 192, 321, 139, 724, 392, 707, 724, 672, 437, 610, 355, 858, 402, 848, 417, 306, 245, 384, 626, 781, 877, 155, 88, 769, 895, 389, 770, 622, 168, 620, 230, 883, 5, 78, 234, 298, 593, 808, 620, 46, 320, 422});
  s21::list<int> res({5, 519, 524, 526, 46, 59, 587, 589, 78, 593, 88, 610, 99, 615, 107, 620, 622, 626, 629, 630, 122, 133, 139, 145, 155, 669, 672, 168, 691, 192, 707, 199, 202, 209, 724, 227, 230, 745, 234, 243, 245, 249, 762, 763, 254, 766, 769, 770, 780, 781, 789, 805, 293, 808, 298, 306, 316, 318, 320, 321, 335, 336, 848, 858, 355, 877, 883, 895, 384, 389, 392, 402, 403, 916, 919, 417, 422, 945, 437, 959, 452, 968, 459, 473, 492, 500, 501, 506});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique79) {
  s21::list<int> lst({512, 880, 1, 728, 136, 89, 457, 907, 178, 417, 237, 525, 739, 206, 382, 355, 518, 239, 12, 440, 397, 610, 746, 951, 31, 377, 385});
  s21::list<int> res({512, 1, 385, 518, 136, 907, 12, 525, 397, 31, 417, 178, 951, 440, 457, 206, 728, 89, 610, 739, 355, 746, 237, 239, 880, 377, 382});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique80) {
  s21::list<int> lst({446, 701, 169, 398, 526, 88, 139, 601, 406, 347, 868, 292, 785, 520, 482, 525, 650, 306, 823, 465, 651, 736, 171, 376, 493, 137, 527, 584, 960, 931, 628, 106, 825, 406, 325, 182, 230, 231, 497, 380, 483, 159, 379, 144});
  s21::list<int> res({520, 137, 650, 139, 651, 525, 398, 526, 527, 785, 144, 406, 159, 931, 292, 169, 171, 306, 182, 823, 825, 701, 446, 960, 325, 584, 465, 88, 601, 347, 736, 482, 483, 868, 230, 231, 106, 493, 497, 628, 376, 379, 380});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique81) {
  s21::list<int> lst({661, 635, 996, 382, 198, 245, 843, 55, 50, 787, 907, 811, 893, 829, 786, 472, 853, 166, 473, 657, 550, 210, 928, 361, 192, 908, 812, 16, 461, 945, 497, 57, 322, 802, 858, 595, 983, 665, 343, 916, 102, 67, 748, 386, 448, 620, 43, 598, 196, 388, 445, 318, 726, 128, 774, 560, 237, 183, 295, 529, 474, 120, 148});
  s21::list<int> res({128, 386, 388, 774, 907, 908, 16, 657, 786, 787, 916, 661, 529, 148, 665, 928, 802, 166, 550, 295, 811, 812, 43, 560, 945, 50, 55, 183, 57, 829, 445, 318, 192, 448, 322, 67, 196, 198, 843, 461, 210, 595, 853, 598, 983, 472, 473, 858, 343, 726, 474, 996, 102, 361, 748, 620, 237, 497, 245, 120, 635, 893, 382});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique82) {
  s21::list<int> lst({436, 198, 862, 581, 607, 47, 559, 844, 728, 226, 865, 746, 66, 581, 850, 579, 988, 115, 510, 350, 275, 19, 46, 25, 797, 70, 571, 446, 85, 782, 986, 8, 101, 654, 130, 495, 216, 670, 529, 977, 441, 532, 12, 278, 926, 917, 344, 443, 185, 684, 787, 888, 21, 863, 959, 864});
  s21::list<int> res({130, 8, 12, 782, 654, 529, 275, 19, 532, 278, 917, 787, 25, 21, 797, 670, 926, 684, 46, 47, 559, 436, 441, 185, 571, 443, 446, 959, 66, 579, 581, 198, 70, 844, 977, 850, 85, 728, 216, 986, 344, 988, 350, 862, 607, 865, 226, 863, 864, 101, 746, 495, 115, 888, 510});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique83) {
  s21::list<int> lst({653, 570, 447, 509, 806, 617, 408, 851, 496, 932, 493, 506, 525, 442, 539, 416, 548, 571, 159, 849, 526, 567, 163, 21, 827, 473, 508, 78});
  s21::list<int> res({653, 525, 526, 21, 408, 539, 159, 416, 163, 932, 548, 806, 567, 442, 571, 570, 827, 447, 78, 849, 851, 473, 617, 493, 496, 506, 508, 509});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique84) {
  s21::list<int> lst({847, 218, 308, 126, 138, 949});
  s21::list<int> res({138, 847, 308, 949, 218, 126});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique85) {
  s21::list<int> lst({379, 248, 809, 952, 823, 568, 574, 166, 152, 45, 522, 279, 690, 173, 420, 321, 814, 155, 770, 339, 963, 728, 988, 52});
  s21::list<int> res({770, 522, 279, 152, 155, 420, 166, 809, 45, 173, 814, 690, 52, 823, 568, 952, 574, 321, 963, 339, 728, 988, 248, 379});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique86) {
  s21::list<int> lst({964, 210, 374, 602, 663, 335, 142, 228, 972, 258, 396, 820, 375, 503, 208, 445, 409, 601, 698, 374, 217, 498, 505, 324, 995, 908, 523, 742, 88, 170, 731, 156, 414, 857, 70, 836, 66, 560, 804, 507, 373, 411, 461, 532, 802, 19, 362, 566, 838, 433, 627, 229, 445, 138, 28});
  s21::list<int> res({258, 138, 523, 396, 908, 142, 19, 532, 663, 409, 411, 156, 28, 414, 802, 804, 170, 560, 433, 820, 566, 698, 445, 66, 964, 324, 70, 836, 838, 972, 461, 335, 208, 210, 88, 601, 602, 217, 731, 857, 375, 995, 228, 229, 742, 362, 498, 627, 373, 374, 503, 505, 507});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique87) {
  s21::list<int> lst({624, 424, 460, 401, 869, 636, 408, 617, 687, 216, 348, 812, 7, 988, 956, 511, 399, 448, 425, 124, 262, 459, 183, 387, 385, 517, 183, 700, 599, 937, 223, 518, 453, 486, 562, 898, 708, 122, 772, 271, 377, 34, 946, 797, 574, 24, 873, 403, 944, 502, 750, 667, 162, 596, 534, 312, 57, 475, 908, 20, 364, 119, 994, 657, 502, 844, 230, 295, 953, 558, 207, 480, 822, 417, 486, 759, 150, 725});
  s21::list<int> res({385, 898, 387, 772, 517, 262, 7, 518, 908, 399, 271, 401, 657, 403, 20, 534, 150, 408, 24, 667, 797, 417, 34, 162, 295, 424, 425, 937, 812, 558, 687, 944, 562, 946, 822, 183, 312, 57, 953, 956, 700, 574, 448, 708, 453, 459, 460, 844, 207, 596, 725, 599, 216, 475, 988, 348, 223, 480, 994, 869, 486, 230, 617, 873, 759, 364, 750, 624, 124, 502, 119, 377, 122, 636, 511});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique88) {
  s21::list<int> lst({734, 294, 773, 684, 837, 87, 739, 12, 236, 607, 433, 577, 804, 119, 275, 853, 855, 790, 603, 528, 734, 668, 981, 442, 636, 166, 616, 999, 114, 170, 761, 525, 926, 388, 287, 53});
  s21::list<int> res({388, 773, 12, 525, 528, 275, 790, 668, 926, 287, 804, 294, 166, 170, 684, 433, 53, 442, 577, 837, 853, 981, 855, 87, 603, 734, 607, 739, 999, 616, 236, 114, 119, 761, 636});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique89) {
  s21::list<int> lst({312, 396, 606, 194, 764, 918, 546, 993, 686, 430, 379, 192, 968, 564, 734, 99, 664, 789, 851, 168, 613, 818, 38, 580, 384, 219, 136, 407, 893, 771, 127, 443, 987, 692, 333, 114, 64, 327, 604, 738, 58, 841, 698, 373, 968, 298, 798, 969, 6, 638, 120, 370, 539, 617, 710, 855, 837, 399, 68, 976, 831, 563, 713, 502, 917, 542, 341, 850, 275, 754, 445, 725, 507, 208});
  s21::list<int> res({384, 771, 6, 136, 396, 399, 275, 789, 918, 407, 664, 917, 539, 798, 542, 546, 38, 168, 298, 686, 430, 818, 563, 564, 692, 312, 58, 443, 698, 445, 831, 192, 64, 194, 580, 837, 710, 327, 968, 841, 969, 68, 713, 333, 976, 208, 850, 851, 341, 725, 855, 219, 987, 604, 734, 606, 993, 738, 99, 613, 617, 114, 370, 754, 373, 502, 507, 120, 379, 764, 893, 638, 127});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique90) {
  s21::list<int> lst({340, 438, 246, 293, 230, 463, 910, 523, 290, 140, 733});
  s21::list<int> res({290, 293, 230, 523, 140, 910, 463, 340, 438, 246, 733});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique91) {
  s21::list<int> lst({666, 540, 893, 37, 685, 556, 884, 573, 151, 46, 385, 760, 956, 40, 130, 591, 235, 450, 330, 445, 664, 637, 101, 622, 905, 615, 664, 306, 303, 2, 177, 349, 598, 491, 602, 386, 441, 587, 466, 548, 951, 840, 833, 994, 158, 696, 93, 781, 0, 924, 935, 606, 853, 35, 883, 61, 492, 868, 318, 604, 94, 150, 651, 209, 351, 614, 26, 253, 953, 604, 613, 766});
  s21::list<int> res({0, 385, 130, 2, 386, 637, 905, 651, 781, 150, 151, 664, 666, 26, 540, 924, 158, 35, 548, 37, 935, 40, 556, 685, 46, 303, 177, 306, 951, 696, 441, 953, 956, 573, 445, 61, 318, 833, 450, 840, 330, 587, 591, 209, 466, 853, 598, 602, 604, 349, 93, 606, 94, 351, 994, 868, 101, 614, 615, 613, 235, 491, 492, 622, 883, 884, 760, 253, 893, 766});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique92) {
  s21::list<int> lst({970, 167, 795, 230, 318, 261, 383, 265, 729, 583, 545, 436, 611, 443, 710, 501});
  s21::list<int> res({545, 611, 261, 230, 167, 583, 265, 970, 710, 436, 443, 501, 729, 795, 318, 383});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique93) {
  s21::list<int> lst({581, 74});
  s21::list<int> res({74, 581});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique94) {
  s21::list<int> lst({984, 599, 23, 138, 328, 180, 838, 74, 835, 885, 829, 506, 852, 419, 187, 342, 155, 399, 273, 208, 289, 425, 99, 543, 460, 442, 898, 299, 972, 810, 790, 514, 371, 672, 113, 216, 184, 720, 750, 107, 612, 286, 323, 572, 723, 432, 424, 401, 326, 953, 123, 135, 401, 513, 954, 747, 754, 737, 857, 360, 215, 419, 98, 395, 887, 406, 118, 163, 553, 586, 972, 957, 357});
  s21::list<int> res({513, 898, 514, 135, 138, 395, 399, 273, 401, 790, 23, 406, 155, 286, 543, 672, 289, 419, 163, 424, 425, 810, 299, 553, 432, 180, 184, 953, 442, 187, 572, 829, 954, 957, 835, 323, 838, 326, 328, 74, 586, 460, 972, 208, 720, 723, 852, 342, 599, 984, 216, 857, 215, 737, 98, 99, 612, 357, 360, 107, 747, 750, 113, 754, 371, 885, 118, 887, 506, 123});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique95) {
  s21::list<int> lst({941, 541, 743});
  s21::list<int> res({541, 941, 743});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique96) {
  s21::list<int> lst({959, 544, 239, 901, 87, 705, 878, 603, 936, 44, 480, 483, 106, 70, 474, 747, 324, 676});
  s21::list<int> res({544, 705, 480, 483, 324, 901, 70, 676, 936, 106, 747, 44, 878, 239, 87, 474, 603, 959});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique97) {
  s21::list<int> lst({685, 887, 573, 693, 127, 60, 194, 519, 874, 938, 614, 322, 704, 789, 769, 748, 889, 734, 828, 255, 518, 324, 275, 653, 97, 945, 875, 227, 447, 782, 227, 693, 953, 207, 426, 381, 331, 478, 29, 948, 171, 679, 168, 432, 426, 779, 483, 608, 492, 666, 635, 144, 890, 324, 965, 886, 382, 346, 735, 749, 855, 315, 569, 134, 991});
  s21::list<int> res({769, 255, 518, 519, 134, 779, 653, 782, 144, 275, 789, 666, 29, 679, 168, 938, 426, 171, 685, 432, 945, 948, 693, 953, 569, 315, 828, 60, 573, 447, 704, 194, 322, 324, 965, 331, 207, 855, 346, 734, 478, 608, 97, 735, 227, 483, 991, 614, 874, 875, 748, 492, 749, 886, 887, 889, 890, 635, 381, 382, 127});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique98) {
  s21::list<int> lst({315, 306, 639, 123, 645, 201, 386, 878, 307, 187, 63, 731, 193, 122, 399, 946, 633, 260, 448, 526, 354, 682, 245, 615, 436, 881, 671, 557, 943, 343, 957, 593, 977, 923, 942, 896, 317, 897, 683, 125, 801, 190, 673, 689, 253, 771, 63, 245, 887, 188, 966, 654, 918, 724, 585, 431, 220, 981, 829, 543, 590, 364, 314, 805, 378, 967, 388, 199, 508, 405, 328, 493, 619, 429});
  s21::list<int> res({896, 897, 386, 771, 260, 645, 388, 526, 399, 654, 405, 918, 923, 671, 543, 801, 673, 805, 682, 683, 557, 942, 943, 431, 689, 306, 307, 946, 436, 429, 314, 187, 315, 957, 317, 63, 448, 193, 190, 188, 829, 966, 967, 199, 201, 585, 328, 590, 593, 977, 724, 981, 343, 731, 220, 253, 354, 615, 619, 364, 493, 878, 378, 881, 245, 887, 633, 122, 123, 508, 125, 639});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Unique99) {
  s21::list<int> lst({976, 20, 321, 423, 63, 870, 112, 550, 513, 285, 800, 229, 357, 354, 647, 512, 114, 993, 585, 995, 413, 686, 426, 119, 424, 926, 751, 498, 390, 646, 554, 360, 913, 245, 188, 340, 221});
  s21::list<int> res({512, 513, 390, 647, 646, 913, 20, 285, 413, 926, 800, 550, 423, 424, 426, 554, 686, 188, 63, 321, 585, 976, 340, 221, 993, 354, 995, 229, 870, 357, 360, 751, 112, 114, 498, 245, 119});
  lst.unique();
  EXPECT_EQ(lst, res);
}

TEST(ListTest, Reverses0) {
  s21::list<int> lst({762, 655, 637, 755, 793, 568, 368, 929, 912, 485, 739, 982, 578, 179, 724, 642, 172, 883, 577, 147});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses1) {
  s21::list<int> lst({695, 609, 103, 380, 132, 384, 939, 941, 987, 416, 482, 319, 896, 884});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses2) {
  s21::list<int> lst({532, 290, 458, 819, 501, 164, 586, 435, 662, 542, 902, 71, 393, 387, 385, 474, 661, 998, 811, 555, 59, 239, 220, 59, 993, 658, 135, 370, 133, 90, 973, 996, 85, 321, 356, 49, 607, 377, 818, 873, 415, 149, 817, 943, 897, 784, 40, 845, 633, 531, 859, 862, 713, 228, 290});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses3) {
  s21::list<int> lst({140, 141, 33, 351, 921, 685, 177, 178, 923, 118, 740, 714, 758, 977, 184, 16, 420, 506, 871, 162, 780, 191, 956, 539, 279, 684, 712, 773, 926, 987, 226, 612, 872, 235, 523, 758, 698, 393, 502, 39, 576, 151, 762, 730, 284, 325, 498, 860, 333, 375, 525, 804, 369, 5, 919, 713, 309, 95, 695, 671, 339, 369, 252, 657});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses4) {
  s21::list<int> lst({159, 754, 697, 988, 693, 748, 999, 86, 219, 17, 49, 619, 910, 349, 757, 517, 989, 703, 898, 947, 959, 37, 387, 550, 943, 698, 277, 799, 65, 88, 893, 891, 399, 777, 189, 396, 135, 415, 967, 622, 669, 97, 466, 769, 141, 3, 74, 714, 306, 69, 726, 77, 291, 221, 640, 24, 572, 192, 600, 238, 254, 197, 107, 616, 866, 878, 487, 455, 173, 742, 355, 366, 566, 436, 769});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses5) {
  s21::list<int> lst({907, 215, 46, 843, 39, 175, 943, 500, 420, 682, 971, 23, 179, 446, 737, 127, 750, 379, 464, 422, 676, 155, 853, 943, 411, 485, 40, 296, 396, 840, 981, 292, 51, 251, 660, 237, 614, 780, 59});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses6) {
  s21::list<int> lst({206, 591, 373, 399, 668, 328, 7, 773, 392, 835, 957});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses7) {
  s21::list<int> lst({78, 884, 246, 189, 467, 418, 211, 599, 152, 352, 56, 593, 338, 957, 661, 984, 862, 137, 312, 852, 607, 692, 763, 159, 885, 138, 862, 947, 772, 143, 628, 591, 250, 770, 504, 237, 671, 840, 343, 834, 725, 876, 371, 383, 190, 353, 156});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses8) {
  s21::list<int> lst({656, 954, 934, 687, 893, 114, 815, 838, 390, 945, 177, 307, 95, 980, 632, 522, 839, 120, 978, 592, 419, 58, 966, 305, 229, 719, 642, 919, 302, 272, 755, 462, 505, 630, 442, 515, 139, 151, 809, 762, 328, 324, 815, 171, 509, 856, 275, 356, 914, 822, 124, 528, 268, 265, 659});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses9) {
  s21::list<int> lst({440, 386, 900, 333, 426, 960, 12, 56, 109, 75, 642, 447, 483, 7, 735, 145, 538, 515, 312});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses10) {
  s21::list<int> lst({561, 288, 249, 423, 850, 179, 579, 257, 482, 922, 316, 83, 641, 452, 477, 805, 650, 579, 326, 694, 967, 749, 696, 432, 785});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses11) {
  s21::list<int> lst({383, 740, 387, 849, 383, 483, 857, 544, 565, 883, 718, 889, 684, 139, 773, 199, 904, 978, 276, 765, 195, 365, 366, 862, 840, 874, 3, 636, 613, 585, 402, 941, 493, 678, 345, 102, 757, 287, 476, 836, 197, 124, 497, 217, 112, 59, 907, 563, 717, 778, 377, 643, 515, 18, 767, 551, 405, 710, 459, 250, 983, 272, 475, 75});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses12) {
  s21::list<int> lst({592, 623, 694, 939});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses13) {
  s21::list<int> lst({901, 642, 43, 851, 960, 413, 338, 411, 49, 257, 750, 45, 446, 937, 375, 194, 997, 371, 544, 80, 154, 526, 5, 689, 200, 457, 150, 386, 593, 86, 854, 255, 355, 456, 907, 573, 932, 532, 429, 56, 722, 668, 730, 31, 210, 917, 165, 174, 23, 720, 748, 992, 534, 824, 220, 955, 602, 698, 214, 64, 73, 810, 542, 597, 737, 37, 666, 622, 83, 605, 736, 920, 945, 350, 572, 913, 138, 251, 335, 288});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses14) {
  s21::list<int> lst({913, 930, 517, 295, 568, 289, 939, 328, 346, 76, 969, 658});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses15) {
  s21::list<int> lst({99, 416, 380, 604, 493, 0, 523, 252, 736, 459, 741, 630, 672, 929, 980, 882, 239, 360, 369, 525, 631, 849, 393, 298, 684, 624, 990, 779, 449});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses16) {
  s21::list<int> lst({946, 184, 776, 638, 34, 73, 406, 727, 658, 650, 35, 978, 319, 684, 939, 289, 364, 561, 259, 152, 994, 831, 489, 346, 864, 633, 904, 820, 480, 180, 614, 38, 838, 445, 252, 603, 195, 444, 848, 38, 271, 767, 817, 818, 465, 161, 776, 289, 347, 517, 23, 347, 585, 807, 225, 624, 973, 131, 470, 371, 339, 144, 749, 58, 373, 421, 413, 569, 549, 536, 125, 885, 108, 363, 692, 156});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses17) {
  s21::list<int> lst({294, 625, 779, 407, 658, 902, 416, 522, 498, 899, 630, 143, 51, 683, 555, 366, 82, 520, 573, 227, 507, 758, 382, 857, 571, 895, 816, 307, 349, 694, 729, 496, 345, 469, 386, 880, 953, 638, 840, 83, 561, 67, 591, 580, 512, 907, 787, 81, 939, 640, 808, 29, 861, 646, 580, 569, 941, 225, 206, 47, 210, 601, 324, 627, 115, 643, 439, 314, 381, 573, 732});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses18) {
  s21::list<int> lst({285, 477, 512, 631, 143, 505, 353, 981, 350, 258, 173, 155, 863, 664, 289, 506, 125, 31, 291, 471, 469, 770, 703, 622, 148, 666, 651, 808, 611, 627, 314});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses19) {
  s21::list<int> lst({942, 560, 892, 453, 52, 868, 788, 222, 741, 815, 558, 919, 3});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses20) {
  s21::list<int> lst({169, 328});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses21) {
  s21::list<int> lst({223, 863, 53, 86, 371, 995, 86, 658, 271, 771, 363, 436, 599, 539, 653, 287, 868, 798, 592, 392, 618});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses22) {
  s21::list<int> lst({806, 687, 907, 547, 382, 761, 737, 243, 666, 966, 39, 557, 657, 918, 18, 131, 854, 819, 292, 778, 518, 416, 733, 262, 863, 361, 684, 615, 308, 679, 821, 604, 976, 219, 771, 330, 364, 790, 822, 337, 115, 415, 308, 560, 486, 328, 31, 530, 453, 176, 524, 226, 258, 43, 224, 430, 275, 499, 575, 728, 429, 772, 548, 895, 515, 630, 758, 232, 242, 308, 380, 747, 398, 704, 98, 174, 88, 387, 859, 807, 62, 42, 452, 818, 529, 998, 454, 606, 704, 616, 752, 23});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses23) {
  s21::list<int> lst({500, 268, 181, 192, 575, 316, 808, 481, 868, 141, 801, 67, 977, 601, 191, 305, 680, 537, 470, 401, 637, 733, 945, 249, 106, 762, 167, 90, 609, 727, 977, 936, 839, 670, 165, 208, 866, 236, 460, 519, 405, 568, 980, 573, 520, 930, 301, 990, 945, 986, 5, 472, 676, 961, 358, 564, 377, 73, 448, 211, 163, 725, 88, 385, 420, 560, 524, 165, 962, 744, 36, 95});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses24) {
  s21::list<int> lst({806, 164, 512, 980, 204, 898, 189, 834, 930, 230, 639, 434, 615, 184, 870, 155, 36, 629, 416, 43, 551, 375, 80, 93, 348, 662, 911, 460, 407, 492, 850, 754, 725, 846, 816, 131, 10, 49, 830, 437, 649, 600, 192, 802, 95, 693, 591, 7, 742, 524, 404, 699, 77, 911, 869, 731, 912, 744, 898, 393, 65, 155, 235, 89, 58, 230, 484, 361, 792, 89, 15});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses25) {
  s21::list<int> lst({132, 707, 643, 331, 771, 66, 72, 73, 971, 463, 130, 833, 507, 186, 351, 720});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses26) {
  s21::list<int> lst({886, 224, 877, 5, 878, 430, 723, 486, 801, 827, 435, 903, 981, 870, 573, 53, 440, 491, 546, 23, 635, 200, 410, 322, 60, 6, 291, 306, 109, 484, 814, 620, 313, 386, 108, 540, 715, 286, 883, 515, 359, 181, 770, 271, 559, 990, 846, 795});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses27) {
  s21::list<int> lst({783, 472, 126, 129, 949, 988, 170, 42, 396, 46, 579, 149, 616, 556, 317, 712, 681, 393, 870, 362, 355, 376, 949, 818, 529, 84, 664, 755, 716, 347, 852, 26, 696, 380, 604, 134, 271, 595, 660, 472, 848, 577, 852, 583, 266, 266, 435, 706, 524, 447, 976, 838, 951, 117, 437, 523, 733, 853, 493});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses28) {
  s21::list<int> lst({479, 484, 174, 919, 54, 186, 26, 626, 594, 336, 371, 655, 26, 885, 83, 935, 411, 922, 804, 537, 889, 872, 2, 523, 919, 162, 616, 24, 336, 244, 970, 467, 736, 877, 180, 616, 654, 87, 149, 298, 332, 864, 722, 141, 221, 840, 560, 512, 861, 384, 440, 614, 888, 873, 614, 223, 627, 34, 537, 515, 1, 70, 774, 727, 894});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses29) {
  s21::list<int> lst({183, 335, 335, 577, 873, 915, 359, 685, 141, 840, 594, 874, 394, 380, 977, 829, 563, 749, 970, 604, 734, 322, 629, 905, 459, 759, 986});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses30) {
  s21::list<int> lst({837, 204, 833, 203, 735, 751, 357, 105, 20, 103, 321, 961, 145, 198, 590, 994, 522, 46, 392, 414, 579, 958, 338, 989, 597, 464, 498, 649, 92, 450, 618, 792, 855, 623, 694, 652, 898, 392, 394, 691, 953, 562, 646, 113, 8});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses31) {
  s21::list<int> lst({130, 161, 127, 816, 370, 813, 650});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses32) {
  s21::list<int> lst({801, 46, 833, 42, 567, 611, 655, 796, 27, 505, 99, 440, 367, 130, 941, 505, 392, 215, 137, 43, 698, 438, 414, 480, 801, 872, 421, 53, 446, 877, 250, 143, 281, 165, 956, 939, 157, 99, 108, 62, 739, 641, 276, 1, 117, 386, 66, 508, 888, 342, 873, 684, 244, 768, 294, 570, 530, 907, 336, 477, 50, 695, 29, 842, 889, 553, 476, 447, 818, 916, 297, 10, 806, 131, 448, 706, 774, 46, 423});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses33) {
  s21::list<int> lst({495, 305, 860, 919, 769, 440, 399, 273, 588, 359, 235, 265, 270, 5, 221, 996, 663, 90, 380, 527, 76, 368, 828, 422, 454, 511, 913, 842, 784, 86, 909, 432, 350, 565, 975, 522, 993, 827, 586, 442, 550, 883, 893, 63, 50, 657, 969, 412, 217, 503, 639, 513, 138, 350, 433, 466, 935, 878, 718, 428, 417, 341, 380, 366, 697, 873, 719, 208, 62, 547, 56, 294, 666, 238, 658, 877, 624, 505, 255, 28, 627, 536, 161, 440, 105, 990, 202, 273, 870, 411, 804, 318, 770, 837, 608, 316, 213, 432});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses34) {
  s21::list<int> lst({57, 645, 987, 670, 39, 251, 491, 769, 556, 505, 831, 826, 879, 700, 404, 872, 658, 520, 948, 484, 814, 459, 982, 727, 762, 874, 405, 457, 473, 260, 917, 51, 875, 747, 421, 993, 509, 997, 797, 779, 953, 935, 443, 557, 87, 283, 672, 982, 714, 203, 338, 52});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses35) {
  s21::list<int> lst({237, 427, 896, 242, 850, 631, 902, 759, 149});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses36) {
  s21::list<int> lst({20, 35, 602, 320, 892, 651, 113, 272, 689, 485, 415, 467, 474, 517, 140, 791, 670, 7, 523, 95, 27, 618, 27, 212, 513, 42, 493, 953, 52, 516, 378, 15, 983, 830, 645, 0, 739, 146, 64, 134, 777, 979, 925, 862, 407, 455, 439, 705, 569, 766, 404, 184, 885, 197, 92, 793, 333, 602, 593, 370, 102, 708, 404, 81, 91, 368, 886, 366, 755, 158, 318, 597, 500, 90, 476});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses37) {
  s21::list<int> lst({827, 401, 500, 629, 648, 20, 711, 634, 380, 614, 896, 288, 597, 47, 373, 681, 452, 48, 617, 743, 381, 351, 820, 284, 83, 742, 219, 964, 128, 480, 194});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses38) {
  s21::list<int> lst({273, 916, 144, 275, 711, 559, 970, 138, 314, 414, 114, 94, 205, 739, 369, 119, 708, 810, 850, 964, 836});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses39) {
  s21::list<int> lst({890, 425, 513, 414, 762, 113, 143, 202, 677, 59, 687, 68, 473, 642, 506, 448, 296, 707, 13, 510, 108, 836, 700, 423, 797, 414, 70, 735, 241, 647, 999, 376, 218, 363, 126, 360, 930});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses40) {
  s21::list<int> lst({719, 374, 256, 762, 550, 849, 142, 857, 661, 775, 530, 500, 256, 924, 382, 321, 594, 474, 702, 13, 509, 71, 647, 729, 620, 25, 29, 712, 304, 865, 871, 318, 596, 703, 587, 542, 1, 519, 933, 83, 610, 303});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses41) {
  s21::list<int> lst({817, 695, 443, 920, 5, 521, 44, 524, 418, 286, 730, 50, 706, 602, 322, 44, 678, 254, 762, 680, 710, 283, 950, 73, 911, 263, 271, 993, 885, 113, 262, 641, 362, 320, 231, 902, 225, 952, 557, 45, 58, 574, 779, 885, 0, 989, 8, 967, 131, 815, 956, 795, 983, 873, 904, 72, 879, 625, 640, 226, 883, 608, 544, 501, 372, 874, 332});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses42) {
  s21::list<int> lst({256, 771, 374, 92, 166, 329, 378, 788, 748, 359, 527, 541, 646, 166, 455, 965, 362, 865, 970, 129, 445, 10, 657, 362, 459, 817, 225, 787, 371, 725, 955, 889, 604, 728, 942, 926, 253, 677, 212, 755, 840, 843, 521, 429, 666, 873, 528, 179, 960, 637, 495, 209, 574, 314, 501, 432, 534, 64, 133, 85, 354, 746, 555, 154, 116, 447, 915, 217, 369, 529, 256, 365, 873, 27, 850, 161});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses43) {
  s21::list<int> lst({237, 612, 326, 973, 436, 581, 262, 882, 706, 856, 234, 314, 52, 73, 498, 285, 582, 678, 264, 170, 254, 459, 562, 734, 155, 137, 91, 883, 739, 270, 527, 383, 642, 152, 738, 619, 623, 537, 334, 843, 879, 720, 160, 949, 624, 662, 357, 962, 5, 589, 911, 688, 477, 176, 714, 228, 317, 922});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses44) {
  s21::list<int> lst({478, 293, 88, 682, 632, 69, 768, 899, 482, 528, 337, 996, 526, 313, 100, 327, 673, 957, 949, 418, 918, 363, 304, 270, 331, 734, 729, 877, 798, 682, 553, 92, 942, 45, 326, 190, 271, 394, 964, 865, 275, 624, 608, 216, 263, 298, 630, 983, 891, 235, 771, 583, 154});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses45) {
  s21::list<int> lst({431, 227, 705, 402, 800, 703, 635, 569, 249, 130, 73, 849, 105, 566, 271, 88, 956, 889, 36, 144, 69, 90, 795, 143, 965, 892, 78, 502, 197, 275, 313, 642, 361, 151, 879, 580, 193, 457, 817, 894, 341, 829, 482, 592, 227, 81, 817, 117, 684, 620, 462, 299, 803, 62, 670, 229, 212, 200, 743, 855, 586, 965, 800, 832, 402, 664, 478});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses46) {
  s21::list<int> lst({403, 802, 607, 827, 431, 488, 94, 674, 325, 644, 271, 509, 99, 590, 496});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses47) {
  s21::list<int> lst({510, 183, 267, 214, 252, 782, 600});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses48) {
  s21::list<int> lst({961, 251, 412, 751, 877, 588, 648, 727, 919, 580, 955, 890, 126, 94, 458, 147, 111, 826, 553, 443, 948, 291, 904, 454, 496, 800, 968, 134, 193, 945, 526, 83, 221, 492, 321, 572, 302, 143, 39, 592, 907, 761});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses49) {
  s21::list<int> lst({507, 925, 410, 528, 228, 44, 115, 898, 24, 361, 796, 819, 585, 341, 770, 65, 241, 557, 530, 336, 725, 2, 551, 279, 941, 155, 890, 252, 551, 329, 207, 44, 240, 853, 681, 192, 806, 293, 856, 176, 427, 92, 291, 113, 868, 989, 357, 46, 362, 660, 190, 526, 710, 345, 298, 341, 713, 77, 161, 905, 405, 211, 498, 544, 593, 11});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses50) {
  s21::list<int> lst({236, 290, 939, 936, 718, 46, 361, 764, 840, 680, 669, 561, 508, 812, 375, 920, 904, 560, 546, 648, 371, 645, 327, 801, 320, 819, 873, 111, 759, 797, 105, 486, 445, 122, 39, 603, 614});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses51) {
  s21::list<int> lst({956, 75, 806, 226, 22, 13, 193, 772, 854, 539, 130});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses52) {
  s21::list<int> lst({689, 915, 48, 58, 507, 747, 597, 666, 806, 9, 340, 818, 106, 346, 315, 316, 617, 512, 86, 177, 517, 299, 41, 419, 350, 582, 823, 995, 444, 911, 480, 812, 230, 146, 516, 830, 788, 437, 470, 134, 482, 505, 650, 48, 390, 110, 518, 667, 398, 420, 552, 513, 841, 192, 341, 0, 450, 29, 804, 820, 15, 32, 887, 425, 203, 156, 470, 273, 610, 692, 381, 434, 555, 591, 615, 251, 333, 231, 562, 461, 957, 946, 607, 917, 993, 905, 640, 751, 163, 147, 81, 134});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses53) {
  s21::list<int> lst({820, 816});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses54) {
  s21::list<int> lst({74, 779, 339, 470, 484, 713, 246, 435, 740, 512, 535, 636, 718, 823, 642, 89, 600, 550, 687, 353, 290, 664, 538, 973, 371, 966, 809, 11, 905, 26, 323, 122, 537, 86, 776, 123, 868, 895, 472, 732, 321, 28, 835, 36, 984, 585, 87, 755, 967, 72, 134, 935, 794, 2, 197, 33, 132, 540, 855, 682, 373, 278, 807, 829, 859, 528, 320, 83, 586, 630, 942, 977, 269, 813, 532, 138, 12, 547, 721, 65, 29, 536, 48, 771, 624, 751, 135, 340, 959, 714, 843, 857, 501, 285, 463, 556, 529, 556});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses55) {
  s21::list<int> lst({684, 612, 797, 20, 414, 630, 282, 853, 881, 668, 142, 569, 418, 267, 11, 849, 684, 295, 901, 776, 966, 732, 272, 489, 13, 748, 174, 383, 742, 493, 993, 539, 244, 282, 817, 719, 199, 463, 653});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses56) {
  s21::list<int> lst({973, 205, 242, 84, 122, 19, 953, 961, 683, 55, 490, 250, 126, 289, 763, 198, 969, 176, 345, 12, 899, 196, 321, 582, 812, 830, 900, 79, 964, 150, 30, 424, 913, 872, 328, 13, 445, 983, 815, 396});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses57) {
  s21::list<int> lst({490, 325, 347, 757, 427, 566, 449, 82, 686, 251, 283, 714, 779, 921, 417, 299, 277, 688, 71, 81, 769, 269, 233, 228, 840, 213, 665, 228, 653, 88, 405, 503, 899, 911, 560, 217, 563, 309, 373, 994, 303, 343, 595, 141, 308, 502, 917, 232, 355, 846, 870, 455, 401, 116, 666, 503, 671, 463, 377, 571, 683, 833, 282, 395, 977, 196, 190, 898, 985, 425, 140, 252, 471, 346, 929, 212, 470, 841, 785, 634, 510, 122, 383, 28, 780, 200, 924});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses58) {
  s21::list<int> lst({322, 762, 447, 787, 22, 654, 107, 971, 939, 151, 326, 595, 325, 297, 609, 970, 467, 520, 982, 48, 259, 642, 407, 133, 208, 334, 329, 526, 797, 820, 571, 802, 100, 883});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses59) {
  s21::list<int> lst({671, 117, 438, 441, 628, 617, 945, 166, 859, 846, 366, 464, 738, 711, 708, 95, 307, 987, 231, 694, 990, 249, 235});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses60) {
  s21::list<int> lst({759, 53, 136, 192, 454, 774, 721, 962, 829, 507, 675, 736, 303, 625, 245, 496, 232, 322, 443, 422, 680, 379, 776, 341, 659, 70, 474, 773, 231, 831, 566, 380, 225, 703, 561, 497, 901, 82, 135, 65, 959, 758, 120, 879, 835, 977, 128, 177, 134, 272, 579, 531, 584, 24, 495, 678, 331, 84, 127, 985, 749, 760, 348, 485, 626, 59, 544, 943, 346, 832, 892, 899, 435, 677, 193});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses61) {
  s21::list<int> lst({95, 714, 1, 756, 445, 308, 969, 100, 852, 383, 876, 607, 130, 233, 299, 422, 768});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses62) {
  s21::list<int> lst({637, 478, 998, 264, 994, 952});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses63) {
  s21::list<int> lst({563, 662, 111, 222, 625, 765, 392, 598, 309, 406, 344, 73, 804, 448, 692, 60, 321, 828, 607, 669, 19, 1, 445, 120});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses64) {
  s21::list<int> lst({657, 70, 622, 920, 248, 745, 985, 91, 108, 7, 968, 203, 69, 934, 747, 552, 608, 166, 920, 815, 658, 450, 514, 186, 967, 306, 168, 452, 904, 281, 262, 777, 220, 6, 468, 892, 717, 499, 364, 244, 617, 883, 547, 16, 651, 379, 938, 90, 581, 557, 283, 610, 741, 488, 736, 46, 157, 83, 961, 951, 892});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses65) {
  s21::list<int> lst({365, 410, 258, 201, 836, 749, 40, 956, 167, 195, 169, 633, 717, 501, 858, 722, 877, 680, 559, 166, 999, 962, 674, 172, 204, 842, 594, 235, 129, 603, 814, 128, 360, 119, 399, 458, 591, 934, 645, 720, 735, 8, 747, 327, 473, 916, 804, 43, 335});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses66) {
  s21::list<int> lst({582, 497, 815, 817, 407, 210, 597, 203, 997, 933, 869, 146, 267, 892, 904, 520, 459, 164, 96, 475, 462, 170, 302, 362, 301, 556, 554});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses67) {
  s21::list<int> lst({677, 729, 344, 939, 212, 489, 326, 513, 996, 252, 9, 70, 467, 741, 855, 988, 198, 979, 525, 650, 642, 205, 733, 533, 674, 678, 477, 169, 146, 223, 735, 968, 928, 647, 339, 525, 607, 157, 256, 984, 967, 753, 148, 288, 293, 632, 298, 246, 187, 292, 128, 130, 996, 199, 893, 757, 266, 237, 240, 30, 377, 259});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses68) {
  s21::list<int> lst({563, 618, 801, 375, 786, 844, 571, 462, 192, 414, 193, 702, 541, 463, 633, 636, 935, 141, 985, 77, 56, 520, 36, 791, 561, 570, 127, 939, 324, 927, 263, 580, 276, 839, 76, 718, 273, 311, 551, 760, 498, 826, 925, 211, 247, 588, 169, 10, 959, 281, 614, 398, 872, 690, 73, 575, 996, 792, 122, 347, 114, 519, 13, 333, 753, 464, 595, 913, 667, 723, 727, 955, 720, 872, 98, 70, 931, 42, 936, 962, 105, 297, 485, 272, 398, 491, 447, 805, 620, 528, 584, 411, 467, 797, 964});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses69) {
  s21::list<int> lst({398, 221, 92, 459, 398, 338, 741, 945, 132, 195, 914, 896, 689, 401, 455, 18, 994, 733, 723, 528, 11, 547, 11, 843, 151, 435, 187, 450, 621, 755, 439, 126, 279, 126, 5, 728, 737, 370, 120, 788, 576, 501, 733, 565, 490, 198, 140, 931, 880, 232, 379, 566, 565, 939, 226, 754, 110, 986, 362, 706, 805, 582, 964, 35, 358, 268, 200, 586, 846, 995, 292, 798, 379, 700, 275, 694, 955, 690, 95, 973, 433, 641, 148, 628, 896, 673, 736, 146, 816, 207, 109, 897, 517, 185, 466, 640, 342});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses70) {
  s21::list<int> lst({801, 347, 956, 144, 260, 856, 439, 256, 262, 783, 872, 626, 494, 568, 697, 602, 917, 23, 229, 323, 76, 536, 422, 208, 95, 857, 555, 675, 949, 646, 948, 488, 499, 543, 373, 576, 801, 362, 857, 146});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses71) {
  s21::list<int> lst({692, 162, 946, 619, 998, 943, 566, 747});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses72) {
  s21::list<int> lst({698, 973, 250, 239, 208, 944, 177, 640, 845, 222, 514, 354, 23, 888, 873, 155, 423, 634, 602, 600, 513, 853, 455, 453, 969, 897, 799, 973, 208, 258, 210, 865, 608, 446, 615, 819, 183, 888, 224, 219, 259, 559, 175, 51, 665, 908, 374, 134, 360, 239, 938, 838, 983, 905, 219, 953, 927, 673, 581, 695, 173, 312, 612, 399, 904, 161, 628, 516, 709, 591, 572, 728, 240, 805, 569, 614, 3, 27, 161, 423, 406, 734, 664, 859, 83, 593, 277, 778, 503, 823, 683, 747, 650, 301, 557});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses73) {
  s21::list<int> lst({702, 942, 803, 410, 997, 435, 22, 629, 824, 313, 759, 154, 264, 714, 395, 929, 999, 633, 355, 897, 411, 94, 446, 516, 754, 737, 248, 199, 762, 879, 718, 66, 527, 185, 892, 849, 587, 493, 267, 42, 542, 550, 609, 579, 97, 943, 512, 381, 578, 147, 638, 910, 533, 944, 522, 142, 466, 529, 14, 53, 463, 749, 979, 798, 589, 499, 743, 810, 589, 831});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses74) {
  s21::list<int> lst({760, 306, 469, 262, 2, 807, 796, 58, 913, 28, 591, 995, 183, 447, 656, 882, 477, 974, 938, 782, 105, 596, 619, 429, 282, 831, 301, 768, 825, 646, 801, 688, 6, 503, 545, 527, 710, 791, 997, 974, 922, 255, 522, 187, 873, 332, 156, 993, 808, 640, 466, 61, 458, 741, 349, 383, 109, 46, 865, 99, 208, 96, 880, 661, 31, 13, 758, 870, 389, 688, 443, 44, 768, 24});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses75) {
  s21::list<int> lst({492, 523, 104, 615, 488, 432, 93, 426, 876, 851, 511, 721, 520, 872, 337, 982, 215, 648, 602, 549, 29, 283, 95, 53, 636, 684, 377, 840, 849, 867, 290, 553, 190, 562, 869, 730, 894, 509, 393, 573, 895, 399, 636, 485, 110, 915, 35, 348, 648, 620, 458, 905, 818, 702, 448, 239, 519});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses76) {
  s21::list<int> lst({208, 693, 982, 915, 932});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses77) {
  s21::list<int> lst({106, 480, 282, 84, 22, 622, 972, 464, 319, 840, 501, 707, 403, 811, 942, 579, 924, 577, 130, 186});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses78) {
  s21::list<int> lst({838, 64, 53, 204, 234, 556, 985, 229, 458, 621, 836, 792, 908, 766, 800, 652, 596, 708, 693, 108, 315, 130, 440, 167, 725, 220, 51, 558, 746, 916, 551, 416, 262, 684, 411, 225, 464, 301, 417, 931, 544, 855, 332, 144, 296, 591, 445, 15, 883, 439, 957, 173, 887, 607, 629, 474, 145, 898, 569, 155, 779, 479, 199, 296, 278, 346, 837, 507, 896, 955, 763, 361, 548, 460, 910, 62, 461, 596, 117, 215, 350, 258, 362, 773, 555, 452, 337, 728, 898, 530, 560, 181, 922, 685});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses79) {
  s21::list<int> lst({529, 394, 837, 441, 454, 524, 555, 582, 986, 808, 853, 445, 414, 486, 907, 160, 927, 298, 610, 801, 543, 392, 438, 249, 782, 132, 315, 964, 824, 122, 215, 595, 310, 501, 490});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses80) {
  s21::list<int> lst({859, 1, 254, 712, 250, 603, 444, 577, 899, 57, 390, 945, 375, 491, 576, 828, 784, 535, 116, 877, 817, 698, 575, 969, 369, 551, 143, 821, 724, 146, 323, 978, 994, 651, 321, 934, 233, 697, 680, 12, 406, 629, 235, 364, 617, 294, 955, 686, 283, 887, 803, 442, 508, 764, 324, 264, 941, 629, 19, 267, 151, 864, 554, 127, 919, 815, 307, 629, 529, 172, 582, 376, 585, 380, 204, 896, 208, 93, 31, 111, 407, 282, 664, 242, 89, 816, 989, 514, 701, 578, 82, 174, 860, 642, 225});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses81) {
  s21::list<int> lst({435, 544, 943, 941, 53, 918, 888, 628, 532, 788, 660, 224, 662, 240, 145, 264, 612, 804, 13, 248, 218, 939, 446, 321, 548, 674, 158, 144, 663, 876, 736, 545, 836, 579, 33, 150, 736, 15, 860, 136, 52, 776, 79, 359, 268, 155, 892, 104, 507, 404, 668, 99, 318, 968, 999, 836});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses82) {
  s21::list<int> lst({67, 274, 117, 268, 528, 69, 181, 752, 133, 22, 437, 310, 907, 867, 921, 620, 49, 533, 842, 320, 416, 7, 738, 177, 249, 697, 352, 373, 890, 443, 170, 413, 33, 76, 147, 710, 742, 494, 66, 113, 887, 777, 40, 23, 326, 26, 937, 668, 886, 549, 877, 473, 361, 564, 98, 143, 106, 874, 779, 510, 896, 128, 890, 519, 469, 939, 632, 661, 315, 569, 618, 51, 749, 700, 285, 662, 543, 721, 478, 825, 749, 25, 156, 200, 272, 195, 768, 659, 616, 924, 653, 548, 896, 39, 934, 923, 747, 380});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses83) {
  s21::list<int> lst({393, 162, 959, 926, 825, 666, 348, 505, 603, 318, 804, 914, 251, 407, 981, 521, 566, 638, 459, 495, 790});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses84) {
  s21::list<int> lst({227, 973, 28, 610, 447, 70, 433, 610, 148, 154, 173, 382, 533, 829, 15, 153, 770, 870, 599, 769, 134, 31, 941, 613, 520, 671, 779, 746, 637, 490, 729, 456, 120, 253, 973, 491, 823, 33, 721, 940, 112, 100, 655, 845, 828, 79, 230, 600, 483, 901, 512});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses85) {
  s21::list<int> lst({967, 673, 847, 551, 506, 588, 971, 272, 459, 44, 525, 566, 970, 99, 931, 589, 963, 234, 994, 864, 153, 182, 830, 471, 854, 13, 381});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses86) {
  s21::list<int> lst({662, 60, 907, 625, 363, 292, 504, 141, 478, 375, 207, 683, 521, 582, 347, 505, 688, 66, 273, 215, 590, 725, 668, 949, 904, 652, 597, 157, 848, 583, 675, 974, 516, 294, 143, 164, 105, 708, 613, 101, 217, 929, 520, 796, 492, 724, 436, 734, 832, 718, 241, 434, 408, 162, 605, 420, 761, 364, 168, 308, 435, 633, 913, 391, 801, 945, 659, 0, 374, 226, 457, 197});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses87) {
  s21::list<int> lst({278, 346, 896, 621, 78, 881, 487, 738, 629, 417, 571, 788, 56, 5});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses88) {
  s21::list<int> lst({488, 587, 132, 623, 851});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses89) {
  s21::list<int> lst({45, 812, 151, 650, 105, 324, 134, 753, 749, 950, 652, 530, 476, 873, 748, 774, 615, 3, 630, 99, 514, 80, 364, 341, 991, 986, 278, 674, 796, 94, 386, 696, 543, 566, 816, 709, 717, 638, 71});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses90) {
  s21::list<int> lst({772, 814, 96, 653, 743, 908, 90, 593, 616, 668, 49, 955, 148, 399, 151, 847, 55, 902, 503, 759, 668, 331, 466, 134, 212, 201, 348, 670, 530, 248, 977, 877, 44, 681, 223, 958, 497, 425, 446, 255, 214, 797, 225, 40, 400, 730, 635, 19, 199, 107, 767, 526, 236, 16, 161, 750, 36, 76, 798, 781, 84, 998, 948, 878, 962, 360, 596, 736, 93, 567, 39, 154, 936, 712, 715, 788, 84, 321, 151, 400, 158, 292, 493});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses91) {
  s21::list<int> lst({341, 259, 257, 426, 756, 156, 527});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses92) {
  s21::list<int> lst({369, 190, 923, 812, 797, 341, 690, 826, 97, 537, 946, 272, 260, 952, 776, 230, 984, 6, 87, 441, 141, 808, 777, 627, 662, 450, 365, 846, 816, 908, 194, 19, 230, 840, 269, 628, 219, 165, 509, 689, 899, 120, 774, 890, 5, 320, 217, 826, 87, 393, 446, 784, 288, 353, 219, 891, 487, 571, 197, 358, 139, 869, 673, 87, 727, 155, 363, 122, 977, 81, 981});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses93) {
  s21::list<int> lst({977, 819, 184, 488, 789, 101, 790, 568, 221, 654, 799, 670, 416, 258, 428, 615, 561, 416, 319, 190, 674, 754, 4, 431, 111, 917, 962, 126, 817, 93, 171, 38, 446, 458, 243, 555, 989, 420, 917, 314, 468, 344, 95, 247, 396, 475, 304, 251, 664, 745, 303, 435, 112, 793, 124, 119, 745, 308, 421, 841, 692, 290, 764, 532, 873, 195, 933, 885, 902, 863, 9, 140, 605, 433, 86, 258, 499, 212, 616, 266});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses94) {
  s21::list<int> lst({556, 964, 381, 721, 991, 491, 37, 496, 943, 567, 287, 490, 594, 143, 799, 163, 862, 697, 297, 763, 593, 674, 765, 641});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses95) {
  s21::list<int> lst({600, 300, 687, 795, 598, 240, 622, 945, 706, 253, 214, 501, 249, 540, 486, 110, 917, 542, 971, 378, 501, 592, 354, 843, 963, 250, 751, 486, 344, 738});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses96) {
  s21::list<int> lst({947, 407, 258, 843, 871, 790, 926, 311, 567, 528, 139, 398, 458, 42, 731, 203, 411, 416, 81, 40, 337, 400, 788, 796, 649, 319, 51, 140, 82, 958, 214, 216, 763, 927, 915, 675, 1, 626, 660, 828, 741});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses97) {
  s21::list<int> lst({229, 153, 272, 425, 292, 45, 273, 663, 63, 312, 567, 569, 823, 873, 971, 614, 831, 936, 164, 600, 701, 326, 127, 885, 741, 406, 714, 410, 887, 587, 462, 54, 640, 864, 821, 497, 601, 612, 986, 697, 870, 847, 881, 925, 548, 745, 824, 349, 638, 534, 103, 192, 843, 82});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses98) {
  s21::list<int> lst({977, 106, 870, 82, 140, 701, 115, 798, 775, 857, 602, 960, 404, 978, 774, 241, 919, 180, 3, 836, 19, 243, 768, 60, 635, 782, 426, 953, 796, 238});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}

TEST(ListTest, Reverses99) {
  s21::list<int> lst({217, 531, 905, 833, 53, 593, 760, 910, 138, 406, 946, 802, 982, 624, 563, 660, 772, 648, 734, 914, 491, 559, 923, 2, 925, 765, 728, 485, 106});
  lst.clear();
  EXPECT_TRUE(lst.empty());
}
